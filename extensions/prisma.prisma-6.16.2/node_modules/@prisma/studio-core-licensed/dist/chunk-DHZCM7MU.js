import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{a as d,b as E,c as D,d as S,e as B,f as g,g as w,i as R,j as I}from"./chunk-AQXRIQHE.js";import{e as u}from"./chunk-GDQBQ7MK.js";u();u();u();function c(n){let{error:s,query:a}=n,e=s;return e.query=a,[e]}u();var q={bool:{group:"boolean"},boolean:{group:"boolean"},bytea:{group:"string"},char:{group:"string"},citext:{group:"string"},date:{group:"datetime"},interval:{group:"string"},name:{group:"string"},varchar:{group:"string"},text:{group:"string"},time:{group:"time"},timestamp:{group:"datetime"},timestamptz:{group:"datetime"},"timestamp without time zone":{group:"datetime"},"timestamp with time zone":{group:"datetime"},timetz:{group:"time"},"time without time zone":{group:"time"},"time with time zone":{group:"datetime"},uuid:{group:"raw"},int2:{group:"numeric"},int4:{group:"numeric"},int8:{group:"numeric"},smallint:{group:"numeric"},integer:{group:"numeric"},bigint:{group:"numeric"},decimal:{group:"numeric"},numeric:{group:"numeric"},real:{group:"numeric"},float4:{group:"numeric"},float8:{group:"numeric"},"double precision":{group:"numeric"},json:{group:"json"},jsonb:{group:"json"}};u();u();function _(n){return S({...n,Adapter:D,QueryCompiler:E})}function O(n,s){let{table:a,rows:e}=n,{name:r,schema:t,columns:o}=a,i=_(s),p=Object.keys(o);return g(i.withSchema(t).insertInto(r).values(R("insert",e,o)).returning(p).returning(l=>l.cast("ctid","text").as("ctid")))}function C(n,s){let{pageIndex:a,pageSize:e,sortOrder:r,table:{name:t,schema:o,columns:i},filter:p={kind:"FilterGroup",after:"and",filters:[]}}=n,l=_(s),b=Object.keys(i),h=N(p.filters,i),y=l.withSchema(o).selectFrom(t).where(h).select(m=>m.cast(m.fn.coalesce(m.fn.countAll(),d.lit(0)),"text").as("oid"));return g(l.with("count",()=>y).withSchema(o).selectFrom([t,"count"]).select(d.ref("count.oid").$castTo().as("oid")).select(m=>m.cast("ctid","text").as("ctid")).select(b).$call(m=>r.reduce((A,k)=>A.orderBy(k.column,k.direction),m)).where(h).limit(e).offset(d.lit(BigInt(a)*BigInt(e))))}function v(n,s){return n.kind==="ColumnFilter"?a=>{let{column:e,operator:r,value:t}=n,o=s[e];return a(o.datatype.group==="raw"?a.cast(e,"text"):e,r,I(t,o))}:N(n.filters,s)}function N(n,s){if(n.length===0)return r=>r.lit(!0);let a=[],e=[];for(let r=0;r<n.length;r++)e.push(v(n[r],s)),(r===n.length-1||n[r].after==="or")&&(a.push(e),e=[]);return r=>{let t=a.map(o=>r.and(o.map(i=>i(r))));return r.or(t)}}function le(){return[{created_at:new Date("2025-01-26T21:56:12.345Z"),ctid:"(0,1)",deleted_at:null,id:1,name:"John Doe",oid:"2",role:"admin",name_role:"Jonn Doe - admin"},{created_at:new Date("2025-01-26T20:56:12.345Z"),ctid:"(0,2)",deleted_at:null,id:2,name:"Jane Doe",oid:"2",role:"poweruser",name_role:"Jane Doe - poweruser"}]}function F(n,s){let{changes:a,row:e,table:{columns:r,name:t,schema:o}}=n,i=_(s),p=Object.keys(r);return g(i.withSchema(o).updateTable(t).set(R("update",a,r)).$call(w([e],r)).returning(p).returning(l=>[l.cast("ctid","text").as("ctid"),l.cast(l.fn("floor",[l(l.fn("extract",[d`epoch from now()`]),"*",1e6)]),"text").as("__ps_updated_at__")]))}function z(n,s){let{rows:a,table:{columns:e,name:r,schema:t}}=n,o=_(s);return g(o.withSchema(t).deleteFrom(r).$call(w(a,e)))}u();u();function P(n){return d`(select coalesce(json_agg(agg), '[]') from ${n} as agg)`}var L="r",M="v",V=[L,M];function j(n){return g(_(n).selectFrom("pg_catalog.pg_class as cls").innerJoin("pg_catalog.pg_namespace as ns","cls.relnamespace","ns.oid").$call(W).where("cls.relkind","in",V).select(s=>["ns.nspname as schema","cls.relname as name",P(s.selectFrom("pg_catalog.pg_attribute as att").innerJoin("pg_catalog.pg_type as typ","typ.oid","att.atttypid").innerJoin("pg_catalog.pg_namespace as tns","tns.oid","typ.typnamespace").leftJoin("pg_catalog.pg_constraint as pk_con",a=>a.on("pk_con.contype","=","p").onRef("pk_con.conrelid","=","cls.oid").on(e=>e("att.attnum","=",e.fn.any("pk_con.conkey")))).leftJoin("pg_catalog.pg_constraint as fk_con",a=>a.on("fk_con.contype","=","f").onRef("fk_con.conrelid","=","cls.oid").on(e=>e("att.attnum","=",e.fn.any("fk_con.conkey")))).leftJoin("pg_catalog.pg_class as fk_cls","fk_cls.oid","fk_con.confrelid").leftJoin("pg_catalog.pg_namespace as fk_ns","fk_ns.oid","fk_cls.relnamespace").leftJoin("pg_catalog.pg_attribute as fk_att",a=>a.onRef("fk_att.attrelid","=","fk_cls.oid").on(e=>e("fk_att.attnum","=",e.fn.any("fk_con.confkey")))).whereRef("att.attrelid","=","cls.oid").where("att.attnum",">=",0).where("att.attisdropped","!=",!0).select(["att.attname as name","typ.typname as datatype","tns.nspname as datatype_schema","fk_ns.nspname as foreign_key_schema","fk_cls.relname as foreign_key_table","fk_att.attname as foreign_key_column"]).select(a=>[a("pk_con.conkey","is not",null).$castTo().as("pk"),a("att.attgenerated","!=","").$castTo().as("computed"),a("att.attnotnull","!=",!0).$castTo().as("nullable"),a.fn.coalesce(a.selectFrom("pg_catalog.pg_enum as enm").whereRef("enm.enumtypid","=","typ.oid").select(e=>e.fn.jsonAgg(e.ref("enm.enumlabel")).as("o")),d`'[]'`).as("options")])).as("columns")]))}function G(){return[{schema:"zoo",name:"animals",columns:[{name:"id",datatype:"int4",datatype_schema:"pg_catalog",pk:!0,computed:!1,options:[],nullable:!1,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"name",datatype:"text",datatype_schema:"pg_catalog",pk:!1,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null}]},{schema:"public",name:"users",columns:[{name:"id",datatype:"int4",datatype_schema:"pg_catalog",pk:!0,computed:!1,options:[],nullable:!1,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"created_at",datatype:"timestamp",datatype_schema:"pg_catalog",pk:!1,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"deleted_at",datatype:"timestamp",datatype_schema:"pg_catalog",pk:!1,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"role",datatype:"varchar",datatype_schema:"pg_catalog",pk:!1,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"name",datatype:"varchar",datatype_schema:"pg_catalog",pk:!1,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"name_role",datatype:"text",datatype_schema:"pg_catalog",pk:!1,computed:!0,options:[],nullable:!1,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null}]},{schema:"public",name:"composite_pk",columns:[{name:"id",datatype:"uuid",datatype_schema:"pg_catalog",pk:!0,computed:!1,options:[],nullable:!1,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"name",datatype:"text",datatype_schema:"pg_catalog",pk:!0,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null},{name:"created_at",datatype:"timestamp",datatype_schema:"pg_catalog",pk:!1,computed:!1,options:[],nullable:!0,foreign_key_schema:null,foreign_key_table:null,foreign_key_column:null}]}]}function U(){let n=_();return g(n.selectNoFrom(n.fn("current_setting",[d.lit("timezone")]).as("timezone")))}function $(){return[{timezone:"UTC"}]}function W(n){return n.where("ns.nspname","!~","^pg_").where("ns.nspname","!=","information_schema")}function we(n){let{executor:s,...a}=n;return{defaultSchema:"public",async introspect(e){try{let r=j(a),t=U(),[[o,i],[p,l]]=await Promise.all([s.execute(r,e),s.execute(t,e)]);if(o)return c({error:o,query:r});if(p)return c({error:p,query:t});let b=l[0]?.timezone;return b?[null,K({tables:i,timezone:b,query:r})]:c({error:new Error("Timezone not found"),query:t})}catch(r){return c({error:r})}},async query(e,r){try{let t=C(e,a),[o,i]=await s.execute(t,r);return o?c({error:o,query:t}):[null,{filteredRowCount:i[0]?.oid||"0",rows:i,query:t}]}catch(t){return c({error:t})}},async insert(e,r){try{let t=O(e,a),[o,i]=await s.execute(t,r);return o?c({error:o,query:t}):[null,{rows:i,query:t}]}catch(t){return c({error:t})}},async update(e,r){try{let t=F(e,a),[o,i]=await s.execute(t,r);if(o)return c({error:o,query:t});let[p]=i;return p?[null,{row:p,query:t}]:c({error:new Error("Update failed"),query:t})}catch(t){return c({error:t})}},async delete(e,r){try{let t=z(e,a),[o]=await s.execute(t,r);return o?c({error:o,query:t}):[null,{...e,query:t}]}catch(t){return c({error:t})}}}}function K(n){let{tables:s,timezone:a,query:e}=n;return s.reduce((r,t)=>{let{schemas:o}=r,{columns:i,name:p,schema:l}=t,b=i.reduce((h,y)=>{let{datatype:m,datatype_schema:A,name:k,options:Q,nullable:J}=y,x=m.startsWith("_"),T=x?m.slice(1):m;return{...h,[k]:{datatype:{...q[T]||{group:Q.length>0?"enum":"raw"},isArray:x,isNative:A==="pg_catalog",name:x?`${T}[]`:T,options:Q,schema:A},isComputed:y.computed,isInPrimaryKey:y.pk,name:k,nullable:J,schema:l,table:p,fkSchema:y.foreign_key_schema,fkTable:y.foreign_key_table,fkColumn:y.foreign_key_column}}},{});return o[l]===void 0&&(o[l]={name:l,tables:{}}),o[l].tables[p]={columns:b,name:p,schema:l},r},{schemas:{public:{tables:{},name:"public"}},timezone:a,filterOperators:Y,query:e})}var Y=["=","!=",">",">=","<","<=","is","is not","like","not like","ilike","not ilike"];function Re(){let n=G(),[{timezone:s}]=$();return K({tables:n,timezone:s,query:{parameters:[],sql:"<mocked>"}})}u();function Se(){return B("select pg_backend_pid() as pid")}function Be(n){return{parameters:[n],sql:"select pg_cancel_backend($1);"}}export{O as a,C as b,le as c,F as d,z as e,j as f,G as g,U as h,$ as i,we as j,Re as k,Se as l,Be as m};
//# sourceMappingURL=data:application/json;base64,