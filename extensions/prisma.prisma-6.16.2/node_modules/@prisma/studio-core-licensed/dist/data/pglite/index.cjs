"use strict";var ai=Object.defineProperty;var wn=Object.getOwnPropertyDescriptor;var gn=Object.getOwnPropertyNames;var On=Object.prototype.hasOwnProperty;var bn=(t,e)=>{for(var r in e)ai(t,r,{get:e[r],enumerable:!0})},Cn=(t,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of gn(e))!On.call(t,n)&&n!==r&&ai(t,n,{get:()=>e[n],enumerable:!(o=wn(e,n))||o.enumerable});return t};var vn=t=>Cn(ai({},"__esModule",{value:!0}),t);var Ns={};bn(Ns,{createPGLiteAdapter:()=>fs,createPGLiteExecutor:()=>xn});module.exports=vn(Ns);var Gt=class extends Error{constructor(){super("This operation was aborted"),this.name="AbortError"}};function $(t){let{error:e,query:r}=t,o=e;return o.query=r,[o]}var uo={bool:{group:"boolean"},boolean:{group:"boolean"},bytea:{group:"string"},char:{group:"string"},citext:{group:"string"},date:{group:"datetime"},interval:{group:"string"},name:{group:"string"},varchar:{group:"string"},text:{group:"string"},time:{group:"time"},timestamp:{group:"datetime"},timestamptz:{group:"datetime"},"timestamp without time zone":{group:"datetime"},"timestamp with time zone":{group:"datetime"},timetz:{group:"time"},"time without time zone":{group:"time"},"time with time zone":{group:"datetime"},uuid:{group:"raw"},int2:{group:"numeric"},int4:{group:"numeric"},int8:{group:"numeric"},smallint:{group:"numeric"},integer:{group:"numeric"},bigint:{group:"numeric"},decimal:{group:"numeric"},numeric:{group:"numeric"},real:{group:"numeric"},float4:{group:"numeric"},float8:{group:"numeric"},"double precision":{group:"numeric"},json:{group:"json"},jsonb:{group:"json"}};function Y(t){return typeof t>"u"||t===void 0}function v(t){return typeof t=="string"}function Ee(t){return typeof t=="number"}function Je(t){return typeof t=="boolean"}function _e(t){return t===null}function po(t){return t instanceof Date}function et(t){return typeof t=="bigint"}function W(t){return typeof t=="function"}function Q(t){return typeof t=="object"&&t!==null}function i(t){return Object.freeze(t)}function Rt(t){return F(t)?t:[t]}function F(t){return Array.isArray(t)}function V(t){return t}var N=i({is(t){return t.kind==="AlterTableNode"},create(t){return i({kind:"AlterTableNode",table:t})},cloneWithTableProps(t,e){return i({...t,...e})},cloneWithColumnAlteration(t,e){return i({...t,columnAlterations:t.columnAlterations?[...t.columnAlterations,e]:[e]})}});var d=i({is(t){return t.kind==="IdentifierNode"},create(t){return i({kind:"IdentifierNode",name:t})}});var oe=i({is(t){return t.kind==="CreateIndexNode"},create(t){return i({kind:"CreateIndexNode",name:d.create(t)})},cloneWith(t,e){return i({...t,...e})},cloneWithColumns(t,e){return i({...t,columns:[...t.columns||[],...e]})}});var jt=i({is(t){return t.kind==="CreateSchemaNode"},create(t,e){return i({kind:"CreateSchemaNode",schema:d.create(t),...e})},cloneWith(t,e){return i({...t,...e})}});var co=["preserve rows","delete rows","drop"],M=i({is(t){return t.kind==="CreateTableNode"},create(t){return i({kind:"CreateTableNode",table:t,columns:i([])})},cloneWithColumn(t,e){return i({...t,columns:i([...t.columns,e])})},cloneWithConstraint(t,e){return i({...t,constraints:t.constraints?i([...t.constraints,e]):i([e])})},cloneWithFrontModifier(t,e){return i({...t,frontModifiers:t.frontModifiers?i([...t.frontModifiers,e]):i([e])})},cloneWithEndModifier(t,e){return i({...t,endModifiers:t.endModifiers?i([...t.endModifiers,e]):i([e])})},cloneWith(t,e){return i({...t,...e})}});var z=i({is(t){return t.kind==="SchemableIdentifierNode"},create(t){return i({kind:"SchemableIdentifierNode",identifier:d.create(t)})},createWithSchema(t,e){return i({kind:"SchemableIdentifierNode",schema:d.create(t),identifier:d.create(e)})}});var Re=i({is(t){return t.kind==="DropIndexNode"},create(t,e){return i({kind:"DropIndexNode",name:z.create(t),...e})},cloneWith(t,e){return i({...t,...e})}});var It=i({is(t){return t.kind==="DropSchemaNode"},create(t,e){return i({kind:"DropSchemaNode",schema:d.create(t),...e})},cloneWith(t,e){return i({...t,...e})}});var Dt=i({is(t){return t.kind==="DropTableNode"},create(t,e){return i({kind:"DropTableNode",table:t,...e})},cloneWith(t,e){return i({...t,...e})}});var I=i({is(t){return t.kind==="AliasNode"},create(t,e){return i({kind:"AliasNode",node:t,alias:e})}});var X=i({is(t){return t.kind==="TableNode"},create(t){return i({kind:"TableNode",table:z.create(t)})},createWithSchema(t,e){return i({kind:"TableNode",table:z.createWithSchema(t,e)})}});function b(t){return Q(t)&&W(t.toOperationNode)}function Kt(t){return Q(t)&&"expressionType"in t&&b(t)}function mo(t){return Q(t)&&"expression"in t&&v(t.alias)&&b(t)}var he=i({is(t){return t.kind==="SelectModifierNode"},create(t,e){return i({kind:"SelectModifierNode",modifier:t,of:e})},createWithExpression(t){return i({kind:"SelectModifierNode",rawModifier:t})}});var G=i({is(t){return t.kind==="AndNode"},create(t,e){return i({kind:"AndNode",left:t,right:e})}});var ne=i({is(t){return t.kind==="OrNode"},create(t,e){return i({kind:"OrNode",left:t,right:e})}});var Ht=i({is(t){return t.kind==="OnNode"},create(t){return i({kind:"OnNode",on:t})},cloneWithOperation(t,e,r){return i({...t,on:e==="And"?G.create(t.on,r):ne.create(t.on,r)})}});var Oe=i({is(t){return t.kind==="JoinNode"},create(t,e){return i({kind:"JoinNode",joinType:t,table:e,on:void 0})},createWithOn(t,e,r){return i({kind:"JoinNode",joinType:t,table:e,on:Ht.create(r)})},cloneWithOn(t,e){return i({...t,on:t.on?Ht.cloneWithOperation(t.on,"And",e):Ht.create(e)})}});var Ie=i({is(t){return t.kind==="BinaryOperationNode"},create(t,e,r){return i({kind:"BinaryOperationNode",leftOperand:t,operator:e,rightOperand:r})}});var kn=["=","==","!=","<>",">",">=","<","<=","in","not in","is","is not","like","not like","match","ilike","not ilike","@>","<@","^@","&&","?","?&","?|","!<","!>","<=>","!~","~","~*","!~*","@@","@@@","!!","<->","regexp","is distinct from","is not distinct from"],Wn=["+","-","*","/","%","^","&","|","#","<<",">>"],ho=["->","->>"],Tn=[...kn,...Wn,"&&","||"],Sn=["exists","not exists"],An=["not","-",...Sn],lo=[...Tn,...ho,...An,"between","between symmetric"],Z=i({is(t){return t.kind==="OperatorNode"},create(t){return i({kind:"OperatorNode",operator:t})}});function ui(t){return v(t)&&ho.includes(t)}var l=i({is(t){return t.kind==="ColumnNode"},create(t){return i({kind:"ColumnNode",column:d.create(t)})}});var tt=i({is(t){return t.kind==="SelectAllNode"},create(){return i({kind:"SelectAllNode"})}});var rt=i({is(t){return t.kind==="ReferenceNode"},create(t,e){return i({kind:"ReferenceNode",table:e,column:t})},createSelectAll(t){return i({kind:"ReferenceNode",table:t,column:tt.create()})}});var Yt=class{#e;get dynamicReference(){return this.#e}get refType(){}constructor(e){this.#e=e}toOperationNode(){return pi(this.#e)}};function Xt(t){return Q(t)&&b(t)&&v(t.dynamicReference)}var se=i({is(t){return t.kind==="OrderByItemNode"},create(t,e){return i({kind:"OrderByItemNode",orderBy:t,direction:e})},cloneWith(t,e){return i({...t,...e})}});var k=i({is(t){return t.kind==="RawNode"},create(t,e){return i({kind:"RawNode",sqlFragments:i(t),parameters:i(e)})},createWithSql(t){return k.create([t],[])},createWithChild(t){return k.create(["",""],[t])},createWithChildren(t){return k.create(new Array(t.length+1).fill(""),t)}});var fo={is(t){return t.kind==="CollateNode"},create(t){return i({kind:"CollateNode",collation:d.create(t)})}};var Zt=class t{#e;constructor(e){this.#e=i(e)}desc(){return new t({node:se.cloneWith(this.#e.node,{direction:k.createWithSql("desc")})})}asc(){return new t({node:se.cloneWith(this.#e.node,{direction:k.createWithSql("asc")})})}nullsLast(){return new t({node:se.cloneWith(this.#e.node,{nulls:"last"})})}nullsFirst(){return new t({node:se.cloneWith(this.#e.node,{nulls:"first"})})}collate(e){return new t({node:se.cloneWith(this.#e.node,{collation:fo.create(e)})})}toOperationNode(){return this.#e.node}};var No=new Set;function De(t){No.has(t)||(No.add(t),console.log(t))}function ci(t){return t==="asc"||t==="desc"}function ee(t){if(t.length===2)return[di(t[0],t[1])];if(t.length===1){let[e]=t;return Array.isArray(e)?(De("orderBy(array) is deprecated, use multiple orderBy calls instead."),e.map(r=>di(r))):[di(e)]}throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${t.length}`)}function di(t,e){let r=En(t);if(se.is(r)){if(e)throw new Error("Cannot specify direction twice!");return r}return yo(r,e)}function En(t){if(be(t))return j(t);if(Xt(t))return t.toOperationNode();let[e,r]=t.split(" ");return r?(De("`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead."),yo(_(e),r)):_(t)}function yo(t,e){if(typeof e=="string"){if(!ci(e))throw new Error(`Invalid order by direction: ${e}`);return se.create(t,k.createWithSql(e))}if(Kt(e))return De("`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead."),se.create(t,e.toOperationNode());let r=se.create(t);return e?e(new Zt({node:r})).toOperationNode():r}var it=i({is(t){return t.kind==="JSONReferenceNode"},create(t,e){return i({kind:"JSONReferenceNode",reference:t,traversal:e})},cloneWithTraversal(t,e){return i({...t,traversal:e})}});var _t=i({is(t){return t.kind==="JSONOperatorChainNode"},create(t){return i({kind:"JSONOperatorChainNode",operator:t,values:i([])})},cloneWithValue(t,e){return i({...t,values:i([...t.values,e])})}});var qe=i({is(t){return t.kind==="JSONPathNode"},create(t){return i({kind:"JSONPathNode",inOperator:t,pathLegs:i([])})},cloneWithLeg(t,e){return i({...t,pathLegs:i([...t.pathLegs,e])})}});function pi(t){return v(t)?_(t):t.toOperationNode()}function Ce(t){return F(t)?t.map(e=>L(e)):[L(t)]}function L(t){return be(t)?j(t):pi(t)}function xo(t,e){let r=_(t);if(ui(e))return it.create(r,_t.create(Z.create(e)));let o=e.slice(0,-1);if(ui(o))return it.create(r,qe.create(Z.create(o)));throw new Error(`Invalid JSON operator: ${e}`)}function _(t){let e=".";if(!t.includes(e))return rt.create(l.create(t));let r=t.split(e).map(hi);if(r.length===3)return Rn(r);if(r.length===2)return In(r);throw new Error(`invalid column reference ${t}`)}function wo(t){let e=" as ";if(t.includes(e)){let[r,o]=t.split(e).map(hi);return I.create(_(r),d.create(o))}else return _(t)}function mi(t){return l.create(t)}function ot(t){let e=" ";if(t.includes(e)){let[r,o]=t.split(e).map(hi);if(!ci(o))throw new Error(`invalid order direction "${o}" next to "${r}"`);return ee([r,o])[0]}else return mi(t)}function Rn(t){let[e,r,o]=t;return rt.create(l.create(o),X.createWithSchema(e,r))}function In(t){let[e,r]=t;return rt.create(l.create(r),X.create(e))}function hi(t){return t.trim()}var er=i({is(t){return t.kind==="PrimitiveValueListNode"},create(t){return i({kind:"PrimitiveValueListNode",values:i([...t])})}});var le=i({is(t){return t.kind==="ValueListNode"},create(t){return i({kind:"ValueListNode",values:i(t)})}});var S=i({is(t){return t.kind==="ValueNode"},create(t){return i({kind:"ValueNode",value:t})},createImmediate(t){return i({kind:"ValueNode",value:t,immediate:!0})}});function go(t){return F(t)?Dn(t):g(t)}function g(t){return be(t)?j(t):S.create(t)}function tr(t){return Ee(t)||Je(t)||_e(t)}function qt(t){if(!tr(t))throw new Error(`unsafe immediate value ${JSON.stringify(t)}`);return S.createImmediate(t)}function Dn(t){return t.some(be)?le.create(t.map(e=>g(e))):er.create(t)}var fe=i({is(t){return t.kind==="ParensNode"},create(t){return i({kind:"ParensNode",node:t})}});function O(t){if(t.length===3)return rr(t[0],t[1],t[2]);if(t.length===1)return g(t[0]);throw new Error(`invalid arguments: ${JSON.stringify(t)}`)}function rr(t,e,r){return qn(e)&&bo(r)?Ie.create(L(t),li(e),S.createImmediate(r)):Ie.create(L(t),li(e),go(r))}function D(t,e,r){return Ie.create(L(t),li(e),L(r))}function fi(t,e){return nt(Object.entries(t).filter(([,r])=>!Y(r)).map(([r,o])=>rr(r,bo(o)?"is":"=",o)),e)}function nt(t,e,r=!0){let o=e==="and"?G.create:ne.create;if(t.length===0)return Ie.create(S.createImmediate(1),Z.create("="),S.createImmediate(e==="and"?1:0));let n=Oo(t[0]);for(let a=1;a<t.length;++a)n=o(n,Oo(t[a]));return t.length>1&&r?fe.create(n):n}function qn(t){return t==="is"||t==="is not"}function bo(t){return _e(t)||Je(t)}function li(t){if(v(t)&&lo.includes(t))return Z.create(t);if(b(t))return t.toOperationNode();throw new Error(`invalid operator ${JSON.stringify(t)}`)}function Oo(t){return b(t)?t.toOperationNode():t}var ve=i({is(t){return t.kind==="OrderByNode"},create(t){return i({kind:"OrderByNode",items:i([...t])})},cloneWithItems(t,e){return i({...t,items:i([...t.items,...e])})}});var Ni=i({is(t){return t.kind==="PartitionByNode"},create(t){return i({kind:"PartitionByNode",items:i(t)})},cloneWithItems(t,e){return i({...t,items:i([...t.items,...e])})}});var Bt=i({is(t){return t.kind==="OverNode"},create(){return i({kind:"OverNode"})},cloneWithOrderByItems(t,e){return i({...t,orderBy:t.orderBy?ve.cloneWithItems(t.orderBy,e):ve.create(e)})},cloneWithPartitionByItems(t,e){return i({...t,partitionBy:t.partitionBy?Ni.cloneWithItems(t.partitionBy,e):Ni.create(e)})}});var $e=i({is(t){return t.kind==="FromNode"},create(t){return i({kind:"FromNode",froms:i(t)})},cloneWithFroms(t,e){return i({...t,froms:i([...t.froms,...e])})}});var yi=i({is(t){return t.kind==="GroupByNode"},create(t){return i({kind:"GroupByNode",items:i(t)})},cloneWithItems(t,e){return i({...t,items:i([...t.items,...e])})}});var xi=i({is(t){return t.kind==="HavingNode"},create(t){return i({kind:"HavingNode",having:t})},cloneWithOperation(t,e,r){return i({...t,having:e==="And"?G.create(t.having,r):ne.create(t.having,r)})}});var T=i({is(t){return t.kind==="InsertQueryNode"},create(t,e,r){return i({kind:"InsertQueryNode",into:t,...e&&{with:e},replace:r})},createWithoutInto(){return i({kind:"InsertQueryNode"})},cloneWith(t,e){return i({...t,...e})}});var ir=i({is(t){return t.kind==="ListNode"},create(t){return i({kind:"ListNode",items:i(t)})}});var Ne=i({is(t){return t.kind==="UpdateQueryNode"},create(t,e){return i({kind:"UpdateQueryNode",table:t.length===1?t[0]:ir.create(t),...e&&{with:e}})},createWithoutTable(){return i({kind:"UpdateQueryNode"})},cloneWithFromItems(t,e){return i({...t,from:t.from?$e.cloneWithFroms(t.from,e):$e.create(e)})},cloneWithUpdates(t,e){return i({...t,updates:t.updates?i([...t.updates,...e]):e})},cloneWithLimit(t,e){return i({...t,limit:e})}});var wi=i({is(t){return t.kind==="UsingNode"},create(t){return i({kind:"UsingNode",tables:i(t)})},cloneWithTables(t,e){return i({...t,tables:i([...t.tables,...e])})}});var Be=i({is(t){return t.kind==="DeleteQueryNode"},create(t,e){return i({kind:"DeleteQueryNode",from:$e.create(t),...e&&{with:e}})},cloneWithOrderByItems:(t,e)=>u.cloneWithOrderByItems(t,e),cloneWithoutOrderBy:t=>u.cloneWithoutOrderBy(t),cloneWithLimit(t,e){return i({...t,limit:e})},cloneWithoutLimit(t){return i({...t,limit:void 0})},cloneWithUsing(t,e){return i({...t,using:t.using!==void 0?wi.cloneWithTables(t.using,e):wi.create(e)})}});var P=i({is(t){return t.kind==="WhereNode"},create(t){return i({kind:"WhereNode",where:t})},cloneWithOperation(t,e,r){return i({...t,where:e==="And"?G.create(t.where,r):ne.create(t.where,r)})}});var gi=i({is(t){return t.kind==="ReturningNode"},create(t){return i({kind:"ReturningNode",selections:i(t)})},cloneWithSelections(t,e){return i({...t,selections:t.selections?i([...t.selections,...e]):i(e)})}});var Co=i({is(t){return t.kind==="ExplainNode"},create(t,e){return i({kind:"ExplainNode",format:t,options:e})}});var ke=i({is(t){return t.kind==="WhenNode"},create(t){return i({kind:"WhenNode",condition:t})},cloneWithResult(t,e){return i({...t,result:e})}});var q=i({is(t){return t.kind==="MergeQueryNode"},create(t,e){return i({kind:"MergeQueryNode",into:t,...e&&{with:e}})},cloneWithUsing(t,e){return i({...t,using:e})},cloneWithWhen(t,e){return i({...t,whens:t.whens?i([...t.whens,e]):i([e])})},cloneWithThen(t,e){return i({...t,whens:t.whens?i([...t.whens.slice(0,-1),ke.cloneWithResult(t.whens[t.whens.length-1],e)]):void 0})}});var Oi=i({is(t){return t.kind==="OutputNode"},create(t){return i({kind:"OutputNode",selections:i(t)})},cloneWithSelections(t,e){return i({...t,selections:t.selections?i([...t.selections,...e]):i(e)})}});var u=i({is(t){return w.is(t)||T.is(t)||Ne.is(t)||Be.is(t)||q.is(t)},cloneWithEndModifier(t,e){return i({...t,endModifiers:t.endModifiers?i([...t.endModifiers,e]):i([e])})},cloneWithWhere(t,e){return i({...t,where:t.where?P.cloneWithOperation(t.where,"And",e):P.create(e)})},cloneWithJoin(t,e){return i({...t,joins:t.joins?i([...t.joins,e]):i([e])})},cloneWithReturning(t,e){return i({...t,returning:t.returning?gi.cloneWithSelections(t.returning,e):gi.create(e)})},cloneWithoutReturning(t){return i({...t,returning:void 0})},cloneWithoutWhere(t){return i({...t,where:void 0})},cloneWithExplain(t,e,r){return i({...t,explain:Co.create(e,r?.toOperationNode())})},cloneWithTop(t,e){return i({...t,top:e})},cloneWithOutput(t,e){return i({...t,output:t.output?Oi.cloneWithSelections(t.output,e):Oi.create(e)})},cloneWithOrderByItems(t,e){return i({...t,orderBy:t.orderBy?ve.cloneWithItems(t.orderBy,e):ve.create(e)})},cloneWithoutOrderBy(t){return i({...t,orderBy:void 0})}});var w=i({is(t){return t.kind==="SelectQueryNode"},create(t){return i({kind:"SelectQueryNode",...t&&{with:t}})},createFrom(t,e){return i({kind:"SelectQueryNode",from:$e.create(t),...e&&{with:e}})},cloneWithSelections(t,e){return i({...t,selections:t.selections?i([...t.selections,...e]):i(e)})},cloneWithDistinctOn(t,e){return i({...t,distinctOn:t.distinctOn?i([...t.distinctOn,...e]):i(e)})},cloneWithFrontModifier(t,e){return i({...t,frontModifiers:t.frontModifiers?i([...t.frontModifiers,e]):i([e])})},cloneWithOrderByItems:(t,e)=>u.cloneWithOrderByItems(t,e),cloneWithGroupByItems(t,e){return i({...t,groupBy:t.groupBy?yi.cloneWithItems(t.groupBy,e):yi.create(e)})},cloneWithLimit(t,e){return i({...t,limit:e})},cloneWithOffset(t,e){return i({...t,offset:e})},cloneWithFetch(t,e){return i({...t,fetch:e})},cloneWithHaving(t,e){return i({...t,having:t.having?xi.cloneWithOperation(t.having,"And",e):xi.create(e)})},cloneWithSetOperations(t,e){return i({...t,setOperations:t.setOperations?i([...t.setOperations,...e]):i([...e])})},cloneWithoutSelections(t){return i({...t,selections:[]})},cloneWithoutLimit(t){return i({...t,limit:void 0})},cloneWithoutOffset(t){return i({...t,offset:void 0})},cloneWithoutOrderBy:t=>u.cloneWithoutOrderBy(t),cloneWithoutGroupBy(t){return i({...t,groupBy:void 0})}});var or=class t{#e;constructor(e){this.#e=i(e)}on(...e){return new t({...this.#e,joinNode:Oe.cloneWithOn(this.#e.joinNode,O(e))})}onRef(e,r,o){return new t({...this.#e,joinNode:Oe.cloneWithOn(this.#e.joinNode,D(e,r,o))})}onTrue(){return new t({...this.#e,joinNode:Oe.cloneWithOn(this.#e.joinNode,k.createWithSql("true"))})}$call(e){return e(this)}toOperationNode(){return this.#e.joinNode}};var vo=i({is(t){return t.kind==="PartitionByItemNode"},create(t){return i({kind:"PartitionByItemNode",partitionBy:t})}});function ko(t){return Ce(t).map(vo.create)}var nr=class t{#e;constructor(e){this.#e=i(e)}orderBy(...e){return new t({overNode:Bt.cloneWithOrderByItems(this.#e.overNode,ee(e))})}clearOrderBy(){return new t({overNode:u.cloneWithoutOrderBy(this.#e.overNode)})}partitionBy(e){return new t({overNode:Bt.cloneWithPartitionByItems(this.#e.overNode,ko(e))})}$call(e){return e(this)}toOperationNode(){return this.#e.overNode}};var st=i({is(t){return t.kind==="SelectionNode"},create(t){return i({kind:"SelectionNode",selection:t})},createSelectAll(){return i({kind:"SelectionNode",selection:tt.create()})},createSelectAllFromTable(t){return i({kind:"SelectionNode",selection:rt.createSelectAll(t)})}});function R(t){return W(t)?R(t(U())):F(t)?t.map(e=>Wo(e)):[Wo(t)]}function Wo(t){return v(t)?st.create(wo(t)):Xt(t)?st.create(t.toOperationNode()):st.create(sr(t))}function B(t){return t?Array.isArray(t)?t.map(To):[To(t)]:[st.createSelectAll()]}function To(t){if(v(t))return st.createSelectAllFromTable(y(t));throw new Error(`invalid value selectAll expression: ${JSON.stringify(t)}`)}var So=i({is(t){return t.kind==="ValuesNode"},create(t){return i({kind:"ValuesNode",values:i(t)})}});var Ao=i({is(t){return t.kind==="DefaultInsertValueNode"},create(){return i({kind:"DefaultInsertValueNode"})}});function ar(t){let e=W(t)?t(U()):t,r=F(e)?e:i([e]);return Bn(r)}function Bn(t){let e=Qn(t);return[i([...e.keys()].map(l.create)),So.create(t.map(r=>Ln(r,e)))]}function Qn(t){let e=new Map;for(let r of t){let o=Object.keys(r);for(let n of o)!e.has(n)&&r[n]!==void 0&&e.set(n,e.size)}return e}function Ln(t,e){let r=Object.keys(t),o=Array.from({length:e.size}),n=!1,a=r.length;for(let c of r){let h=e.get(c);if(Y(h)){a--;continue}let m=t[c];(Y(m)||be(m))&&(n=!0),o[h]=m}if(a<e.size||n){let c=Ao.create();return le.create(o.map(h=>Y(h)?c:g(h)))}return er.create(o)}var bi=i({is(t){return t.kind==="ColumnUpdateNode"},create(t,e){return i({kind:"ColumnUpdateNode",column:t,value:e})}});function Eo(...t){return t.length===2?[bi.create(L(t[0]),g(t[1]))]:Qt(t[0])}function Qt(t){let e=W(t)?t(U()):t;return Object.entries(e).filter(([r,o])=>o!==void 0).map(([r,o])=>bi.create(l.create(r),g(o)))}var Ro=i({is(t){return t.kind==="OnDuplicateKeyNode"},create(t){return i({kind:"OnDuplicateKeyNode",updates:t})}});var ur=class{insertId;numInsertedOrUpdatedRows;constructor(e,r){this.insertId=e,this.numInsertedOrUpdatedRows=r}};var re=class extends Error{node;constructor(e){super("no result"),this.node=e}};function ye(t){return Object.prototype.hasOwnProperty.call(t,"prototype")}var J=i({is(t){return t.kind==="OnConflictNode"},create(){return i({kind:"OnConflictNode"})},cloneWith(t,e){return i({...t,...e})},cloneWithIndexWhere(t,e){return i({...t,indexWhere:t.indexWhere?P.cloneWithOperation(t.indexWhere,"And",e):P.create(e)})},cloneWithIndexOrWhere(t,e){return i({...t,indexWhere:t.indexWhere?P.cloneWithOperation(t.indexWhere,"Or",e):P.create(e)})},cloneWithUpdateWhere(t,e){return i({...t,updateWhere:t.updateWhere?P.cloneWithOperation(t.updateWhere,"And",e):P.create(e)})},cloneWithUpdateOrWhere(t,e){return i({...t,updateWhere:t.updateWhere?P.cloneWithOperation(t.updateWhere,"Or",e):P.create(e)})},cloneWithoutIndexWhere(t){return i({...t,indexWhere:void 0})},cloneWithoutUpdateWhere(t){return i({...t,updateWhere:void 0})}});var pr=class t{#e;constructor(e){this.#e=i(e)}column(e){let r=l.create(e);return new t({...this.#e,onConflictNode:J.cloneWith(this.#e.onConflictNode,{columns:this.#e.onConflictNode.columns?i([...this.#e.onConflictNode.columns,r]):i([r])})})}columns(e){let r=e.map(l.create);return new t({...this.#e,onConflictNode:J.cloneWith(this.#e.onConflictNode,{columns:this.#e.onConflictNode.columns?i([...this.#e.onConflictNode.columns,...r]):i(r)})})}constraint(e){return new t({...this.#e,onConflictNode:J.cloneWith(this.#e.onConflictNode,{constraint:d.create(e)})})}expression(e){return new t({...this.#e,onConflictNode:J.cloneWith(this.#e.onConflictNode,{indexExpression:e.toOperationNode()})})}where(...e){return new t({...this.#e,onConflictNode:J.cloneWithIndexWhere(this.#e.onConflictNode,O(e))})}whereRef(e,r,o){return new t({...this.#e,onConflictNode:J.cloneWithIndexWhere(this.#e.onConflictNode,D(e,r,o))})}clearWhere(){return new t({...this.#e,onConflictNode:J.cloneWithoutIndexWhere(this.#e.onConflictNode)})}doNothing(){return new Ci({...this.#e,onConflictNode:J.cloneWith(this.#e.onConflictNode,{doNothing:!0})})}doUpdateSet(e){return new vi({...this.#e,onConflictNode:J.cloneWith(this.#e.onConflictNode,{updates:Qt(e)})})}$call(e){return e(this)}},Ci=class{#e;constructor(e){this.#e=i(e)}toOperationNode(){return this.#e.onConflictNode}},vi=class t{#e;constructor(e){this.#e=i(e)}where(...e){return new t({...this.#e,onConflictNode:J.cloneWithUpdateWhere(this.#e.onConflictNode,O(e))})}whereRef(e,r,o){return new t({...this.#e,onConflictNode:J.cloneWithUpdateWhere(this.#e.onConflictNode,D(e,r,o))})}clearWhere(){return new t({...this.#e,onConflictNode:J.cloneWithoutUpdateWhere(this.#e.onConflictNode)})}$call(e){return e(this)}toOperationNode(){return this.#e.onConflictNode}};var Io=i({is(t){return t.kind==="TopNode"},create(t,e){return i({kind:"TopNode",expression:t,modifiers:e})}});function ae(t,e){if(!Ee(t)&&!et(t))throw new Error(`Invalid top expression: ${t}`);if(!Y(e)&&!Pn(e))throw new Error(`Invalid top modifiers: ${e}`);return Io.create(t,e)}function Pn(t){return t==="percent"||t==="with ties"||t==="percent with ties"}var Ge=i({is(t){return t.kind==="OrActionNode"},create(t){return i({kind:"OrActionNode",action:t})}});var Lt=class t{#e;constructor(e){this.#e=i(e)}values(e){let[r,o]=ar(e);return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{columns:r,values:o})})}columns(e){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{columns:i(e.map(l.create))})})}expression(e){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{values:j(e)})})}defaultValues(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{defaultValues:!0})})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}ignore(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{orAction:Ge.create("ignore")})})}orIgnore(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{orAction:Ge.create("ignore")})})}orAbort(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{orAction:Ge.create("abort")})})}orFail(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{orAction:Ge.create("fail")})})}orReplace(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{orAction:Ge.create("replace")})})}orRollback(){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{orAction:Ge.create("rollback")})})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ae(e,r))})}onConflict(e){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{onConflict:e(new pr({onConflictNode:J.create()})).toOperationNode()})})}onDuplicateKeyUpdate(e){return new t({...this.#e,queryNode:T.cloneWith(this.#e.queryNode,{onDuplicateKey:Ro.create(Qt(e))})})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,R(e))})}returningAll(){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,B())})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,R(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,B(e))})}clearReturning(){return new t({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:o}=this.#e.executor,n=e.query;return n.returning&&o.supportsReturning||n.output&&o.supportsOutput?r.rows:[new ur(r.insertId,r.numAffectedRows??BigInt(0))]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=re){let r=await this.executeTakeFirst();if(r===void 0)throw ye(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),o=this.#e.executor.stream(r,e,this.#e.queryId);for await(let n of o)yield*n.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};var dr=class{numDeletedRows;constructor(e){this.numDeletedRows=e}};var at=i({is(t){return t.kind==="LimitNode"},create(t){return i({kind:"LimitNode",limit:t})}});var cr=class t{#e;constructor(e){this.#e=i(e)}where(...e){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,O(e))})}whereRef(e,r,o){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,D(e,r,o))})}clearWhere(){return new t({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ae(e,r))})}using(e){return new t({...this.#e,queryNode:Be.cloneWithUsing(this.#e.queryNode,ue(e))})}innerJoin(...e){return this.#t("InnerJoin",e)}leftJoin(...e){return this.#t("LeftJoin",e)}rightJoin(...e){return this.#t("RightJoin",e)}fullJoin(...e){return this.#t("FullJoin",e)}#t(e,r){return new t({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Qe(e,r))})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,R(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,B(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,R(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,B(e))})}clearReturning(){return new t({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}clearLimit(){return new t({...this.#e,queryNode:Be.cloneWithoutLimit(this.#e.queryNode)})}orderBy(...e){return new t({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,ee(e))})}clearOrderBy(){return new t({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}limit(e){return new t({...this.#e,queryNode:Be.cloneWithLimit(this.#e.queryNode,at.create(g(e)))})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:o}=this.#e.executor,n=e.query;return n.returning&&o.supportsReturning||n.output&&o.supportsOutput?r.rows:[new dr(r.numAffectedRows??BigInt(0))]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=re){let r=await this.executeTakeFirst();if(r===void 0)throw ye(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),o=this.#e.executor.stream(r,e,this.#e.queryId);for await(let n of o)yield*n.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};var mr=class{numUpdatedRows;numChangedRows;constructor(e,r){this.numUpdatedRows=e,this.numChangedRows=r}};var ut=class t{#e;constructor(e){this.#e=i(e)}where(...e){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,O(e))})}whereRef(e,r,o){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,D(e,r,o))})}clearWhere(){return new t({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ae(e,r))})}from(e){return new t({...this.#e,queryNode:Ne.cloneWithFromItems(this.#e.queryNode,ue(e))})}innerJoin(...e){return this.#t("InnerJoin",e)}leftJoin(...e){return this.#t("LeftJoin",e)}rightJoin(...e){return this.#t("RightJoin",e)}fullJoin(...e){return this.#t("FullJoin",e)}#t(e,r){return new t({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Qe(e,r))})}orderBy(...e){return new t({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,ee(e))})}clearOrderBy(){return new t({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}limit(e){return new t({...this.#e,queryNode:Ne.cloneWithLimit(this.#e.queryNode,at.create(g(e)))})}set(...e){return new t({...this.#e,queryNode:Ne.cloneWithUpdates(this.#e.queryNode,Eo(...e))})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,R(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,B(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,R(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,B(e))})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}clearReturning(){return new t({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:o}=this.#e.executor,n=e.query;return n.returning&&o.supportsReturning||n.output&&o.supportsOutput?r.rows:[new mr(r.numAffectedRows??BigInt(0),r.numChangedRows)]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=re){let r=await this.executeTakeFirst();if(r===void 0)throw ye(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),o=this.#e.executor.stream(r,e,this.#e.queryId);for await(let n of o)yield*n.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};var ki=i({is(t){return t.kind==="CommonTableExpressionNameNode"},create(t,e){return i({kind:"CommonTableExpressionNameNode",table:X.create(t),columns:e?i(e.map(l.create)):void 0})}});var pt=i({is(t){return t.kind==="CommonTableExpressionNode"},create(t,e){return i({kind:"CommonTableExpressionNode",name:t,expression:e})},cloneWith(t,e){return i({...t,...e})}});var hr=class t{#e;constructor(e){this.#e=i(e)}materialized(){return new t({...this.#e,node:pt.cloneWith(this.#e.node,{materialized:!0})})}notMaterialized(){return new t({...this.#e,node:pt.cloneWith(this.#e.node,{materialized:!1})})}toOperationNode(){return this.#e.node}};function Wi(t,e){let r=e(qo()).toOperationNode();return W(t)?t(Fn(r)).toOperationNode():pt.create(Do(t),r)}function Fn(t){return e=>new hr({node:pt.create(Do(e),t)})}function Do(t){if(t.includes("(")){let e=t.split(/[\(\)]/),r=e[0],o=e[1].split(",").map(n=>n.trim());return ki.create(r,o)}else return ki.create(t)}var Pt=i({is(t){return t.kind==="WithNode"},create(t,e){return i({kind:"WithNode",expressions:i([t]),...e})},cloneWithExpression(t,e){return i({...t,expressions:i([...t.expressions,e])})}});var Bo=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"];function Qo(t){let e="";for(let r=0;r<t;++r)e+=Mn();return e}function Mn(){return Bo[~~(Math.random()*Bo.length)]}function f(){return new Ti}var Ti=class{#e;get queryId(){return this.#e===void 0&&(this.#e=Qo(8)),this.#e}};var Le=class{nodeStack=[];#e=i({AliasNode:this.transformAlias.bind(this),ColumnNode:this.transformColumn.bind(this),IdentifierNode:this.transformIdentifier.bind(this),SchemableIdentifierNode:this.transformSchemableIdentifier.bind(this),RawNode:this.transformRaw.bind(this),ReferenceNode:this.transformReference.bind(this),SelectQueryNode:this.transformSelectQuery.bind(this),SelectionNode:this.transformSelection.bind(this),TableNode:this.transformTable.bind(this),FromNode:this.transformFrom.bind(this),SelectAllNode:this.transformSelectAll.bind(this),AndNode:this.transformAnd.bind(this),OrNode:this.transformOr.bind(this),ValueNode:this.transformValue.bind(this),ValueListNode:this.transformValueList.bind(this),PrimitiveValueListNode:this.transformPrimitiveValueList.bind(this),ParensNode:this.transformParens.bind(this),JoinNode:this.transformJoin.bind(this),OperatorNode:this.transformOperator.bind(this),WhereNode:this.transformWhere.bind(this),InsertQueryNode:this.transformInsertQuery.bind(this),DeleteQueryNode:this.transformDeleteQuery.bind(this),ReturningNode:this.transformReturning.bind(this),CreateTableNode:this.transformCreateTable.bind(this),AddColumnNode:this.transformAddColumn.bind(this),ColumnDefinitionNode:this.transformColumnDefinition.bind(this),DropTableNode:this.transformDropTable.bind(this),DataTypeNode:this.transformDataType.bind(this),OrderByNode:this.transformOrderBy.bind(this),OrderByItemNode:this.transformOrderByItem.bind(this),GroupByNode:this.transformGroupBy.bind(this),GroupByItemNode:this.transformGroupByItem.bind(this),UpdateQueryNode:this.transformUpdateQuery.bind(this),ColumnUpdateNode:this.transformColumnUpdate.bind(this),LimitNode:this.transformLimit.bind(this),OffsetNode:this.transformOffset.bind(this),OnConflictNode:this.transformOnConflict.bind(this),OnDuplicateKeyNode:this.transformOnDuplicateKey.bind(this),CreateIndexNode:this.transformCreateIndex.bind(this),DropIndexNode:this.transformDropIndex.bind(this),ListNode:this.transformList.bind(this),PrimaryKeyConstraintNode:this.transformPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.transformUniqueConstraint.bind(this),ReferencesNode:this.transformReferences.bind(this),CheckConstraintNode:this.transformCheckConstraint.bind(this),WithNode:this.transformWith.bind(this),CommonTableExpressionNode:this.transformCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.transformCommonTableExpressionName.bind(this),HavingNode:this.transformHaving.bind(this),CreateSchemaNode:this.transformCreateSchema.bind(this),DropSchemaNode:this.transformDropSchema.bind(this),AlterTableNode:this.transformAlterTable.bind(this),DropColumnNode:this.transformDropColumn.bind(this),RenameColumnNode:this.transformRenameColumn.bind(this),AlterColumnNode:this.transformAlterColumn.bind(this),ModifyColumnNode:this.transformModifyColumn.bind(this),AddConstraintNode:this.transformAddConstraint.bind(this),DropConstraintNode:this.transformDropConstraint.bind(this),RenameConstraintNode:this.transformRenameConstraint.bind(this),ForeignKeyConstraintNode:this.transformForeignKeyConstraint.bind(this),CreateViewNode:this.transformCreateView.bind(this),RefreshMaterializedViewNode:this.transformRefreshMaterializedView.bind(this),DropViewNode:this.transformDropView.bind(this),GeneratedNode:this.transformGenerated.bind(this),DefaultValueNode:this.transformDefaultValue.bind(this),OnNode:this.transformOn.bind(this),ValuesNode:this.transformValues.bind(this),SelectModifierNode:this.transformSelectModifier.bind(this),CreateTypeNode:this.transformCreateType.bind(this),DropTypeNode:this.transformDropType.bind(this),ExplainNode:this.transformExplain.bind(this),DefaultInsertValueNode:this.transformDefaultInsertValue.bind(this),AggregateFunctionNode:this.transformAggregateFunction.bind(this),OverNode:this.transformOver.bind(this),PartitionByNode:this.transformPartitionBy.bind(this),PartitionByItemNode:this.transformPartitionByItem.bind(this),SetOperationNode:this.transformSetOperation.bind(this),BinaryOperationNode:this.transformBinaryOperation.bind(this),UnaryOperationNode:this.transformUnaryOperation.bind(this),UsingNode:this.transformUsing.bind(this),FunctionNode:this.transformFunction.bind(this),CaseNode:this.transformCase.bind(this),WhenNode:this.transformWhen.bind(this),JSONReferenceNode:this.transformJSONReference.bind(this),JSONPathNode:this.transformJSONPath.bind(this),JSONPathLegNode:this.transformJSONPathLeg.bind(this),JSONOperatorChainNode:this.transformJSONOperatorChain.bind(this),TupleNode:this.transformTuple.bind(this),MergeQueryNode:this.transformMergeQuery.bind(this),MatchedNode:this.transformMatched.bind(this),AddIndexNode:this.transformAddIndex.bind(this),CastNode:this.transformCast.bind(this),FetchNode:this.transformFetch.bind(this),TopNode:this.transformTop.bind(this),OutputNode:this.transformOutput.bind(this),OrActionNode:this.transformOrAction.bind(this),CollateNode:this.transformCollate.bind(this)});transformNode(e,r){if(!e)return e;this.nodeStack.push(e);let o=this.transformNodeImpl(e,r);return this.nodeStack.pop(),i(o)}transformNodeImpl(e,r){return this.#e[e.kind](e,r)}transformNodeList(e,r){return e&&i(e.map(o=>this.transformNode(o,r)))}transformSelectQuery(e,r){return{kind:"SelectQueryNode",from:this.transformNode(e.from,r),selections:this.transformNodeList(e.selections,r),distinctOn:this.transformNodeList(e.distinctOn,r),joins:this.transformNodeList(e.joins,r),groupBy:this.transformNode(e.groupBy,r),orderBy:this.transformNode(e.orderBy,r),where:this.transformNode(e.where,r),frontModifiers:this.transformNodeList(e.frontModifiers,r),endModifiers:this.transformNodeList(e.endModifiers,r),limit:this.transformNode(e.limit,r),offset:this.transformNode(e.offset,r),with:this.transformNode(e.with,r),having:this.transformNode(e.having,r),explain:this.transformNode(e.explain,r),setOperations:this.transformNodeList(e.setOperations,r),fetch:this.transformNode(e.fetch,r),top:this.transformNode(e.top,r)}}transformSelection(e,r){return{kind:"SelectionNode",selection:this.transformNode(e.selection,r)}}transformColumn(e,r){return{kind:"ColumnNode",column:this.transformNode(e.column,r)}}transformAlias(e,r){return{kind:"AliasNode",node:this.transformNode(e.node,r),alias:this.transformNode(e.alias,r)}}transformTable(e,r){return{kind:"TableNode",table:this.transformNode(e.table,r)}}transformFrom(e,r){return{kind:"FromNode",froms:this.transformNodeList(e.froms,r)}}transformReference(e,r){return{kind:"ReferenceNode",column:this.transformNode(e.column,r),table:this.transformNode(e.table,r)}}transformAnd(e,r){return{kind:"AndNode",left:this.transformNode(e.left,r),right:this.transformNode(e.right,r)}}transformOr(e,r){return{kind:"OrNode",left:this.transformNode(e.left,r),right:this.transformNode(e.right,r)}}transformValueList(e,r){return{kind:"ValueListNode",values:this.transformNodeList(e.values,r)}}transformParens(e,r){return{kind:"ParensNode",node:this.transformNode(e.node,r)}}transformJoin(e,r){return{kind:"JoinNode",joinType:e.joinType,table:this.transformNode(e.table,r),on:this.transformNode(e.on,r)}}transformRaw(e,r){return{kind:"RawNode",sqlFragments:i([...e.sqlFragments]),parameters:this.transformNodeList(e.parameters,r)}}transformWhere(e,r){return{kind:"WhereNode",where:this.transformNode(e.where,r)}}transformInsertQuery(e,r){return{kind:"InsertQueryNode",into:this.transformNode(e.into,r),columns:this.transformNodeList(e.columns,r),values:this.transformNode(e.values,r),returning:this.transformNode(e.returning,r),onConflict:this.transformNode(e.onConflict,r),onDuplicateKey:this.transformNode(e.onDuplicateKey,r),endModifiers:this.transformNodeList(e.endModifiers,r),with:this.transformNode(e.with,r),ignore:e.ignore,orAction:this.transformNode(e.orAction,r),replace:e.replace,explain:this.transformNode(e.explain,r),defaultValues:e.defaultValues,top:this.transformNode(e.top,r),output:this.transformNode(e.output,r)}}transformValues(e,r){return{kind:"ValuesNode",values:this.transformNodeList(e.values,r)}}transformDeleteQuery(e,r){return{kind:"DeleteQueryNode",from:this.transformNode(e.from,r),using:this.transformNode(e.using,r),joins:this.transformNodeList(e.joins,r),where:this.transformNode(e.where,r),returning:this.transformNode(e.returning,r),endModifiers:this.transformNodeList(e.endModifiers,r),with:this.transformNode(e.with,r),orderBy:this.transformNode(e.orderBy,r),limit:this.transformNode(e.limit,r),explain:this.transformNode(e.explain,r),top:this.transformNode(e.top,r),output:this.transformNode(e.output,r)}}transformReturning(e,r){return{kind:"ReturningNode",selections:this.transformNodeList(e.selections,r)}}transformCreateTable(e,r){return{kind:"CreateTableNode",table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r),constraints:this.transformNodeList(e.constraints,r),temporary:e.temporary,ifNotExists:e.ifNotExists,onCommit:e.onCommit,frontModifiers:this.transformNodeList(e.frontModifiers,r),endModifiers:this.transformNodeList(e.endModifiers,r),selectQuery:this.transformNode(e.selectQuery,r)}}transformColumnDefinition(e,r){return{kind:"ColumnDefinitionNode",column:this.transformNode(e.column,r),dataType:this.transformNode(e.dataType,r),references:this.transformNode(e.references,r),primaryKey:e.primaryKey,autoIncrement:e.autoIncrement,unique:e.unique,notNull:e.notNull,unsigned:e.unsigned,defaultTo:this.transformNode(e.defaultTo,r),check:this.transformNode(e.check,r),generated:this.transformNode(e.generated,r),frontModifiers:this.transformNodeList(e.frontModifiers,r),endModifiers:this.transformNodeList(e.endModifiers,r),nullsNotDistinct:e.nullsNotDistinct,identity:e.identity,ifNotExists:e.ifNotExists}}transformAddColumn(e,r){return{kind:"AddColumnNode",column:this.transformNode(e.column,r)}}transformDropTable(e,r){return{kind:"DropTableNode",table:this.transformNode(e.table,r),ifExists:e.ifExists,cascade:e.cascade}}transformOrderBy(e,r){return{kind:"OrderByNode",items:this.transformNodeList(e.items,r)}}transformOrderByItem(e,r){return{kind:"OrderByItemNode",orderBy:this.transformNode(e.orderBy,r),direction:this.transformNode(e.direction,r),collation:this.transformNode(e.collation,r),nulls:e.nulls}}transformGroupBy(e,r){return{kind:"GroupByNode",items:this.transformNodeList(e.items,r)}}transformGroupByItem(e,r){return{kind:"GroupByItemNode",groupBy:this.transformNode(e.groupBy,r)}}transformUpdateQuery(e,r){return{kind:"UpdateQueryNode",table:this.transformNode(e.table,r),from:this.transformNode(e.from,r),joins:this.transformNodeList(e.joins,r),where:this.transformNode(e.where,r),updates:this.transformNodeList(e.updates,r),returning:this.transformNode(e.returning,r),endModifiers:this.transformNodeList(e.endModifiers,r),with:this.transformNode(e.with,r),explain:this.transformNode(e.explain,r),limit:this.transformNode(e.limit,r),top:this.transformNode(e.top,r),output:this.transformNode(e.output,r),orderBy:this.transformNode(e.orderBy,r)}}transformColumnUpdate(e,r){return{kind:"ColumnUpdateNode",column:this.transformNode(e.column,r),value:this.transformNode(e.value,r)}}transformLimit(e,r){return{kind:"LimitNode",limit:this.transformNode(e.limit,r)}}transformOffset(e,r){return{kind:"OffsetNode",offset:this.transformNode(e.offset,r)}}transformOnConflict(e,r){return{kind:"OnConflictNode",columns:this.transformNodeList(e.columns,r),constraint:this.transformNode(e.constraint,r),indexExpression:this.transformNode(e.indexExpression,r),indexWhere:this.transformNode(e.indexWhere,r),updates:this.transformNodeList(e.updates,r),updateWhere:this.transformNode(e.updateWhere,r),doNothing:e.doNothing}}transformOnDuplicateKey(e,r){return{kind:"OnDuplicateKeyNode",updates:this.transformNodeList(e.updates,r)}}transformCreateIndex(e,r){return{kind:"CreateIndexNode",name:this.transformNode(e.name,r),table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r),unique:e.unique,using:this.transformNode(e.using,r),ifNotExists:e.ifNotExists,where:this.transformNode(e.where,r),nullsNotDistinct:e.nullsNotDistinct}}transformList(e,r){return{kind:"ListNode",items:this.transformNodeList(e.items,r)}}transformDropIndex(e,r){return{kind:"DropIndexNode",name:this.transformNode(e.name,r),table:this.transformNode(e.table,r),ifExists:e.ifExists,cascade:e.cascade}}transformPrimaryKeyConstraint(e,r){return{kind:"PrimaryKeyConstraintNode",columns:this.transformNodeList(e.columns,r),name:this.transformNode(e.name,r),deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformUniqueConstraint(e,r){return{kind:"UniqueConstraintNode",columns:this.transformNodeList(e.columns,r),name:this.transformNode(e.name,r),nullsNotDistinct:e.nullsNotDistinct,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformForeignKeyConstraint(e,r){return{kind:"ForeignKeyConstraintNode",columns:this.transformNodeList(e.columns,r),references:this.transformNode(e.references,r),name:this.transformNode(e.name,r),onDelete:e.onDelete,onUpdate:e.onUpdate,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformSetOperation(e,r){return{kind:"SetOperationNode",operator:e.operator,expression:this.transformNode(e.expression,r),all:e.all}}transformReferences(e,r){return{kind:"ReferencesNode",table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r),onDelete:e.onDelete,onUpdate:e.onUpdate}}transformCheckConstraint(e,r){return{kind:"CheckConstraintNode",expression:this.transformNode(e.expression,r),name:this.transformNode(e.name,r)}}transformWith(e,r){return{kind:"WithNode",expressions:this.transformNodeList(e.expressions,r),recursive:e.recursive}}transformCommonTableExpression(e,r){return{kind:"CommonTableExpressionNode",name:this.transformNode(e.name,r),materialized:e.materialized,expression:this.transformNode(e.expression,r)}}transformCommonTableExpressionName(e,r){return{kind:"CommonTableExpressionNameNode",table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r)}}transformHaving(e,r){return{kind:"HavingNode",having:this.transformNode(e.having,r)}}transformCreateSchema(e,r){return{kind:"CreateSchemaNode",schema:this.transformNode(e.schema,r),ifNotExists:e.ifNotExists}}transformDropSchema(e,r){return{kind:"DropSchemaNode",schema:this.transformNode(e.schema,r),ifExists:e.ifExists,cascade:e.cascade}}transformAlterTable(e,r){return{kind:"AlterTableNode",table:this.transformNode(e.table,r),renameTo:this.transformNode(e.renameTo,r),setSchema:this.transformNode(e.setSchema,r),columnAlterations:this.transformNodeList(e.columnAlterations,r),addConstraint:this.transformNode(e.addConstraint,r),dropConstraint:this.transformNode(e.dropConstraint,r),renameConstraint:this.transformNode(e.renameConstraint,r),addIndex:this.transformNode(e.addIndex,r),dropIndex:this.transformNode(e.dropIndex,r)}}transformDropColumn(e,r){return{kind:"DropColumnNode",column:this.transformNode(e.column,r)}}transformRenameColumn(e,r){return{kind:"RenameColumnNode",column:this.transformNode(e.column,r),renameTo:this.transformNode(e.renameTo,r)}}transformAlterColumn(e,r){return{kind:"AlterColumnNode",column:this.transformNode(e.column,r),dataType:this.transformNode(e.dataType,r),dataTypeExpression:this.transformNode(e.dataTypeExpression,r),setDefault:this.transformNode(e.setDefault,r),dropDefault:e.dropDefault,setNotNull:e.setNotNull,dropNotNull:e.dropNotNull}}transformModifyColumn(e,r){return{kind:"ModifyColumnNode",column:this.transformNode(e.column,r)}}transformAddConstraint(e,r){return{kind:"AddConstraintNode",constraint:this.transformNode(e.constraint,r)}}transformDropConstraint(e,r){return{kind:"DropConstraintNode",constraintName:this.transformNode(e.constraintName,r),ifExists:e.ifExists,modifier:e.modifier}}transformRenameConstraint(e,r){return{kind:"RenameConstraintNode",oldName:this.transformNode(e.oldName,r),newName:this.transformNode(e.newName,r)}}transformCreateView(e,r){return{kind:"CreateViewNode",name:this.transformNode(e.name,r),temporary:e.temporary,orReplace:e.orReplace,ifNotExists:e.ifNotExists,materialized:e.materialized,columns:this.transformNodeList(e.columns,r),as:this.transformNode(e.as,r)}}transformRefreshMaterializedView(e,r){return{kind:"RefreshMaterializedViewNode",name:this.transformNode(e.name,r),concurrently:e.concurrently,withNoData:e.withNoData}}transformDropView(e,r){return{kind:"DropViewNode",name:this.transformNode(e.name,r),ifExists:e.ifExists,materialized:e.materialized,cascade:e.cascade}}transformGenerated(e,r){return{kind:"GeneratedNode",byDefault:e.byDefault,always:e.always,identity:e.identity,stored:e.stored,expression:this.transformNode(e.expression,r)}}transformDefaultValue(e,r){return{kind:"DefaultValueNode",defaultValue:this.transformNode(e.defaultValue,r)}}transformOn(e,r){return{kind:"OnNode",on:this.transformNode(e.on,r)}}transformSelectModifier(e,r){return{kind:"SelectModifierNode",modifier:e.modifier,rawModifier:this.transformNode(e.rawModifier,r),of:this.transformNodeList(e.of,r)}}transformCreateType(e,r){return{kind:"CreateTypeNode",name:this.transformNode(e.name,r),enum:this.transformNode(e.enum,r)}}transformDropType(e,r){return{kind:"DropTypeNode",name:this.transformNode(e.name,r),ifExists:e.ifExists}}transformExplain(e,r){return{kind:"ExplainNode",format:e.format,options:this.transformNode(e.options,r)}}transformSchemableIdentifier(e,r){return{kind:"SchemableIdentifierNode",schema:this.transformNode(e.schema,r),identifier:this.transformNode(e.identifier,r)}}transformAggregateFunction(e,r){return{kind:"AggregateFunctionNode",func:e.func,aggregated:this.transformNodeList(e.aggregated,r),distinct:e.distinct,orderBy:this.transformNode(e.orderBy,r),withinGroup:this.transformNode(e.withinGroup,r),filter:this.transformNode(e.filter,r),over:this.transformNode(e.over,r)}}transformOver(e,r){return{kind:"OverNode",orderBy:this.transformNode(e.orderBy,r),partitionBy:this.transformNode(e.partitionBy,r)}}transformPartitionBy(e,r){return{kind:"PartitionByNode",items:this.transformNodeList(e.items,r)}}transformPartitionByItem(e,r){return{kind:"PartitionByItemNode",partitionBy:this.transformNode(e.partitionBy,r)}}transformBinaryOperation(e,r){return{kind:"BinaryOperationNode",leftOperand:this.transformNode(e.leftOperand,r),operator:this.transformNode(e.operator,r),rightOperand:this.transformNode(e.rightOperand,r)}}transformUnaryOperation(e,r){return{kind:"UnaryOperationNode",operator:this.transformNode(e.operator,r),operand:this.transformNode(e.operand,r)}}transformUsing(e,r){return{kind:"UsingNode",tables:this.transformNodeList(e.tables,r)}}transformFunction(e,r){return{kind:"FunctionNode",func:e.func,arguments:this.transformNodeList(e.arguments,r)}}transformCase(e,r){return{kind:"CaseNode",value:this.transformNode(e.value,r),when:this.transformNodeList(e.when,r),else:this.transformNode(e.else,r),isStatement:e.isStatement}}transformWhen(e,r){return{kind:"WhenNode",condition:this.transformNode(e.condition,r),result:this.transformNode(e.result,r)}}transformJSONReference(e,r){return{kind:"JSONReferenceNode",reference:this.transformNode(e.reference,r),traversal:this.transformNode(e.traversal,r)}}transformJSONPath(e,r){return{kind:"JSONPathNode",inOperator:this.transformNode(e.inOperator,r),pathLegs:this.transformNodeList(e.pathLegs,r)}}transformJSONPathLeg(e,r){return{kind:"JSONPathLegNode",type:e.type,value:e.value}}transformJSONOperatorChain(e,r){return{kind:"JSONOperatorChainNode",operator:this.transformNode(e.operator,r),values:this.transformNodeList(e.values,r)}}transformTuple(e,r){return{kind:"TupleNode",values:this.transformNodeList(e.values,r)}}transformMergeQuery(e,r){return{kind:"MergeQueryNode",into:this.transformNode(e.into,r),using:this.transformNode(e.using,r),whens:this.transformNodeList(e.whens,r),with:this.transformNode(e.with,r),top:this.transformNode(e.top,r),endModifiers:this.transformNodeList(e.endModifiers,r),output:this.transformNode(e.output,r),returning:this.transformNode(e.returning,r)}}transformMatched(e,r){return{kind:"MatchedNode",not:e.not,bySource:e.bySource}}transformAddIndex(e,r){return{kind:"AddIndexNode",name:this.transformNode(e.name,r),columns:this.transformNodeList(e.columns,r),unique:e.unique,using:this.transformNode(e.using,r),ifNotExists:e.ifNotExists}}transformCast(e,r){return{kind:"CastNode",expression:this.transformNode(e.expression,r),dataType:this.transformNode(e.dataType,r)}}transformFetch(e,r){return{kind:"FetchNode",rowCount:this.transformNode(e.rowCount,r),modifier:e.modifier}}transformTop(e,r){return{kind:"TopNode",expression:e.expression,modifiers:e.modifiers}}transformOutput(e,r){return{kind:"OutputNode",selections:this.transformNodeList(e.selections,r)}}transformDataType(e,r){return e}transformSelectAll(e,r){return e}transformIdentifier(e,r){return e}transformValue(e,r){return e}transformPrimitiveValueList(e,r){return e}transformOperator(e,r){return e}transformDefaultInsertValue(e,r){return e}transformOrAction(e,r){return e}transformCollate(e,r){return e}};var zn=i({AlterTableNode:!0,CreateIndexNode:!0,CreateSchemaNode:!0,CreateTableNode:!0,CreateTypeNode:!0,CreateViewNode:!0,RefreshMaterializedViewNode:!0,DeleteQueryNode:!0,DropIndexNode:!0,DropSchemaNode:!0,DropTableNode:!0,DropTypeNode:!0,DropViewNode:!0,InsertQueryNode:!0,RawNode:!0,SelectQueryNode:!0,UpdateQueryNode:!0,MergeQueryNode:!0}),Vn={json_agg:!0,to_json:!0},lr=class extends Le{#e;#t=new Set;#r=new Set;constructor(e){super(),this.#e=e}transformNodeImpl(e,r){if(!this.#o(e))return super.transformNodeImpl(e,r);let o=this.#p(e);for(let p of o)this.#r.add(p);let n=this.#a(e);for(let p of n)this.#t.add(p);let a=super.transformNodeImpl(e,r);for(let p of n)this.#t.delete(p);for(let p of o)this.#r.delete(p);return a}transformSchemableIdentifier(e,r){let o=super.transformSchemableIdentifier(e,r);return o.schema||!this.#t.has(e.identifier.name)?o:{...o,schema:d.create(this.#e)}}transformReferences(e,r){let o=super.transformReferences(e,r);return o.table.table.schema?o:{...o,table:X.createWithSchema(this.#e,o.table.table.identifier.name)}}transformAggregateFunction(e,r){return{...super.transformAggregateFunction({...e,aggregated:[]},r),aggregated:this.#i(e,r,"aggregated")}}transformFunction(e,r){return{...super.transformFunction({...e,arguments:[]},r),arguments:this.#i(e,r,"arguments")}}#i(e,r,o){return Vn[e.func]?e[o].map(n=>!X.is(n)||n.table.schema?this.transformNode(n,r):{...n,table:this.transformIdentifier(n.table.identifier,r)}):this.transformNodeList(e[o],r)}#o(e){return e.kind in zn}#a(e){let r=new Set;if("name"in e&&e.name&&z.is(e.name)&&this.#s(e.name,r),"from"in e&&e.from)for(let o of e.from.froms)this.#n(o,r);if("into"in e&&e.into&&this.#n(e.into,r),"table"in e&&e.table&&this.#n(e.table,r),"joins"in e&&e.joins)for(let o of e.joins)this.#n(o.table,r);return"using"in e&&e.using&&this.#n(e.using,r),r}#p(e){let r=new Set;return"with"in e&&e.with&&this.#u(e.with,r),r}#n(e,r){if(X.is(e))this.#s(e.table,r);else if(I.is(e)&&X.is(e.node))this.#s(e.node.table,r);else if(ir.is(e))for(let o of e.items)this.#n(o,r)}#s(e,r){let o=e.identifier.name;!this.#t.has(o)&&!this.#r.has(o)&&r.add(o)}#u(e,r){for(let o of e.expressions){let n=o.name.table.table.identifier.name;this.#r.has(n)||r.add(n)}}};var ie=class{#e;constructor(e){this.#e=new lr(e)}transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}async transformResult(e){return e.result}};var Lo=i({is(t){return t.kind==="MatchedNode"},create(t,e=!1){return i({kind:"MatchedNode",not:t,bySource:e})}});function Si(t,e,r){return ke.create(nt([Lo.create(!t.isMatched,t.bySource),...e&&e.length>0?[e.length===3&&r?D(e[0],e[1],e[2]):O(e)]:[]],"and",!1))}function dt(t){return v(t)?k.create([t],[]):b(t)?t.toOperationNode():t}var Ft=class{#e;#t;#r;constructor(){this.#e=new Promise((e,r)=>{this.#r=r,this.#t=e})}get promise(){return this.#e}resolve=e=>{this.#t&&this.#t(e)};reject=e=>{this.#r&&this.#r(e)}};async function fr(t){let e=new Ft,r=new Ft;return t.provideConnection(async o=>(e.resolve(o),await r.promise)).catch(o=>e.reject(o)),i({connection:await e.promise,release:r.resolve})}var Un=i([]),ct=class{#e;constructor(e=Un){this.#e=e}get plugins(){return this.#e}transformQuery(e,r){for(let o of this.#e){let n=o.transformQuery({node:e,queryId:r});if(n.kind===e.kind)e=n;else throw new Error(["KyselyPlugin.transformQuery must return a node","of the same kind that was given to it.",`The plugin was given a ${e.kind}`,`but it returned a ${n.kind}`].join(" "))}return e}async executeQuery(e,r){return await this.provideConnection(async o=>{let n=await o.executeQuery(e);return"numUpdatedOrDeletedRows"in n&&De("kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`."),await this.#t(n,r)})}async*stream(e,r,o){let{connection:n,release:a}=await fr(this);try{for await(let p of n.streamQuery(e,r))yield await this.#t(p,o)}finally{a()}}async#t(e,r){for(let o of this.#e)e=await o.transformResult({result:e,queryId:r});return e}};var Ai=class t extends ct{get adapter(){throw new Error("this query cannot be compiled to SQL")}compileQuery(){throw new Error("this query cannot be compiled to SQL")}provideConnection(){throw new Error("this query cannot be executed")}withConnectionProvider(){throw new Error("this query cannot have a connection provider")}withPlugin(e){return new t([...this.plugins,e])}withPlugins(e){return new t([...this.plugins,...e])}withPluginAtFront(e){return new t([e,...this.plugins])}withoutPlugins(){return new t([])}},Pe=new Ai;var Nr=class{numChangedRows;constructor(e){this.numChangedRows=e}};var yr=class t{#e;constructor(e){this.#e=i(e)}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ae(e,r))})}using(...e){return new Fe({...this.#e,queryNode:q.cloneWithUsing(this.#e.queryNode,Qe("Using",e))})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,R(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,B(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,R(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,B(e))})}},Fe=class t{#e;constructor(e){this.#e=i(e)}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ae(e,r))})}whenMatched(){return this.#t([])}whenMatchedAnd(...e){return this.#t(e)}whenMatchedAndRef(e,r,o){return this.#t([e,r,o],!0)}#t(e,r){return new xr({...this.#e,queryNode:q.cloneWithWhen(this.#e.queryNode,Si({isMatched:!0},e,r))})}whenNotMatched(){return this.#r([])}whenNotMatchedAnd(...e){return this.#r(e)}whenNotMatchedAndRef(e,r,o){return this.#r([e,r,o],!0)}whenNotMatchedBySource(){return this.#r([],!1,!0)}whenNotMatchedBySourceAnd(...e){return this.#r(e,!1,!0)}whenNotMatchedBySourceAndRef(e,r,o){return this.#r([e,r,o],!0,!0)}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,R(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,B(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,R(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,B(e))})}#r(e,r=!1,o=!1){let n={...this.#e,queryNode:q.cloneWithWhen(this.#e.queryNode,Si({isMatched:!1,bySource:o},e,r))},a=o?xr:Ei;return new a(n)}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:o}=this.#e.executor,n=e.query;return n.returning&&o.supportsReturning||n.output&&o.supportsOutput?r.rows:[new Nr(r.numAffectedRows)]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=re){let r=await this.executeTakeFirst();if(r===void 0)throw ye(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}},xr=class{#e;constructor(e){this.#e=i(e)}thenDelete(){return new Fe({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,dt("delete"))})}thenDoNothing(){return new Fe({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,dt("do nothing"))})}thenUpdate(e){return new Fe({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,dt(e(new ut({queryId:this.#e.queryId,executor:Pe,queryNode:Ne.createWithoutTable()}))))})}thenUpdateSet(...e){return this.thenUpdate(r=>r.set(...e))}},Ei=class{#e;constructor(e){this.#e=i(e)}thenDoNothing(){return new Fe({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,dt("do nothing"))})}thenInsertValues(e){let[r,o]=ar(e);return new Fe({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,dt(T.cloneWith(T.createWithoutInto(),{columns:r,values:o})))})}};var mt=class t{#e;constructor(e){this.#e=i(e)}selectFrom(e){return Mt({queryId:f(),executor:this.#e.executor,queryNode:w.createFrom(ue(e),this.#e.withNode)})}selectNoFrom(e){return Mt({queryId:f(),executor:this.#e.executor,queryNode:w.cloneWithSelections(w.create(this.#e.withNode),R(e))})}insertInto(e){return new Lt({queryId:f(),executor:this.#e.executor,queryNode:T.create(y(e),this.#e.withNode)})}replaceInto(e){return new Lt({queryId:f(),executor:this.#e.executor,queryNode:T.create(y(e),this.#e.withNode,!0)})}deleteFrom(e){return new cr({queryId:f(),executor:this.#e.executor,queryNode:Be.create(ue(e),this.#e.withNode)})}updateTable(e){return new ut({queryId:f(),executor:this.#e.executor,queryNode:Ne.create(ue(e),this.#e.withNode)})}mergeInto(e){return new yr({queryId:f(),executor:this.#e.executor,queryNode:q.create(Ri(e),this.#e.withNode)})}with(e,r){let o=Wi(e,r);return new t({...this.#e,withNode:this.#e.withNode?Pt.cloneWithExpression(this.#e.withNode,o):Pt.create(o)})}withRecursive(e,r){let o=Wi(e,r);return new t({...this.#e,withNode:this.#e.withNode?Pt.cloneWithExpression(this.#e.withNode,o):Pt.create(o,{recursive:!0})})}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new ie(e))})}};function qo(){return new mt({executor:Pe})}function Po(t,e){return new or({joinNode:Oe.create(t,je(e))})}function Fo(){return new nr({overNode:Bt.create()})}function Qe(t,e){if(e.length===3)return $n(t,e[0],e[1],e[2]);if(e.length===2)return Jn(t,e[0],e[1]);if(e.length===1)return Gn(t,e[0]);throw new Error("not implemented")}function Jn(t,e,r){return r(Po(t,e)).toOperationNode()}function $n(t,e,r,o){return Oe.createWithOn(t,je(e),D(r,"=",o))}function Gn(t,e){return Oe.create(t,je(e))}var Mo=i({is(t){return t.kind==="OffsetNode"},create(t){return i({kind:"OffsetNode",offset:t})}});var zo=i({is(t){return t.kind==="GroupByItemNode"},create(t){return i({kind:"GroupByItemNode",groupBy:t})}});function Vo(t){return t=W(t)?t(U()):t,Ce(t).map(zo.create)}var wr=i({is(t){return t.kind==="SetOperationNode"},create(t,e,r){return i({kind:"SetOperationNode",operator:t,expression:e,all:r})}});function Ke(t,e,r){return W(e)&&(e=e(gr())),F(e)||(e=[e]),e.map(o=>wr.create(t,j(o),r))}var x=class t{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new zt(this,e)}or(...e){return new Ii(ne.create(this.#e,O(e)))}and(...e){return new Di(G.create(this.#e,O(e)))}$castTo(){return new t(this.#e)}$notNull(){return new t(this.#e)}toOperationNode(){return this.#e}},zt=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}toOperationNode(){return I.create(this.#e.toOperationNode(),b(this.#t)?this.#t.toOperationNode():d.create(this.#t))}},Ii=class t{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new zt(this,e)}or(...e){return new t(ne.create(this.#e,O(e)))}$castTo(){return new t(this.#e)}toOperationNode(){return fe.create(this.#e)}},Di=class t{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new zt(this,e)}and(...e){return new t(G.create(this.#e,O(e)))}$castTo(){return new t(this.#e)}toOperationNode(){return fe.create(this.#e)}};var Uo={is(t){return t.kind==="FetchNode"},create(t,e){return{kind:"FetchNode",rowCount:S.create(t),modifier:e}}};function Jo(t,e){if(!Ee(t)&&!et(t))throw new Error(`Invalid fetch row count: ${t}`);if(!jn(e))throw new Error(`Invalid fetch modifier: ${e}`);return Uo.create(t,e)}function jn(t){return t==="only"||t==="with ties"}var qi=class t{#e;constructor(e){this.#e=i(e)}get expressionType(){}get isSelectQueryBuilder(){return!0}where(...e){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,O(e))})}whereRef(e,r,o){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,D(e,r,o))})}having(...e){return new t({...this.#e,queryNode:w.cloneWithHaving(this.#e.queryNode,O(e))})}havingRef(e,r,o){return new t({...this.#e,queryNode:w.cloneWithHaving(this.#e.queryNode,D(e,r,o))})}select(e){return new t({...this.#e,queryNode:w.cloneWithSelections(this.#e.queryNode,R(e))})}distinctOn(e){return new t({...this.#e,queryNode:w.cloneWithDistinctOn(this.#e.queryNode,Ce(e))})}modifyFront(e){return new t({...this.#e,queryNode:w.cloneWithFrontModifier(this.#e.queryNode,he.createWithExpression(e.toOperationNode()))})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.createWithExpression(e.toOperationNode()))})}distinct(){return new t({...this.#e,queryNode:w.cloneWithFrontModifier(this.#e.queryNode,he.create("Distinct"))})}forUpdate(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.create("ForUpdate",e?Rt(e).map(y):void 0))})}forShare(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.create("ForShare",e?Rt(e).map(y):void 0))})}forKeyShare(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.create("ForKeyShare",e?Rt(e).map(y):void 0))})}forNoKeyUpdate(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.create("ForNoKeyUpdate",e?Rt(e).map(y):void 0))})}skipLocked(){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.create("SkipLocked"))})}noWait(){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,he.create("NoWait"))})}selectAll(e){return new t({...this.#e,queryNode:w.cloneWithSelections(this.#e.queryNode,B(e))})}innerJoin(...e){return this.#t("InnerJoin",e)}leftJoin(...e){return this.#t("LeftJoin",e)}rightJoin(...e){return this.#t("RightJoin",e)}fullJoin(...e){return this.#t("FullJoin",e)}crossJoin(...e){return this.#t("CrossJoin",e)}innerJoinLateral(...e){return this.#t("LateralInnerJoin",e)}leftJoinLateral(...e){return this.#t("LateralLeftJoin",e)}crossJoinLateral(...e){return this.#t("LateralCrossJoin",e)}crossApply(...e){return this.#t("CrossApply",e)}outerApply(...e){return this.#t("OuterApply",e)}#t(e,r){return new t({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Qe(e,r))})}orderBy(...e){return new t({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,ee(e))})}groupBy(e){return new t({...this.#e,queryNode:w.cloneWithGroupByItems(this.#e.queryNode,Vo(e))})}limit(e){return new t({...this.#e,queryNode:w.cloneWithLimit(this.#e.queryNode,at.create(g(e)))})}offset(e){return new t({...this.#e,queryNode:w.cloneWithOffset(this.#e.queryNode,Mo.create(g(e)))})}fetch(e,r="only"){return new t({...this.#e,queryNode:w.cloneWithFetch(this.#e.queryNode,Jo(e,r))})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ae(e,r))})}union(e){return new t({...this.#e,queryNode:w.cloneWithSetOperations(this.#e.queryNode,Ke("union",e,!1))})}unionAll(e){return new t({...this.#e,queryNode:w.cloneWithSetOperations(this.#e.queryNode,Ke("union",e,!0))})}intersect(e){return new t({...this.#e,queryNode:w.cloneWithSetOperations(this.#e.queryNode,Ke("intersect",e,!1))})}intersectAll(e){return new t({...this.#e,queryNode:w.cloneWithSetOperations(this.#e.queryNode,Ke("intersect",e,!0))})}except(e){return new t({...this.#e,queryNode:w.cloneWithSetOperations(this.#e.queryNode,Ke("except",e,!1))})}exceptAll(e){return new t({...this.#e,queryNode:w.cloneWithSetOperations(this.#e.queryNode,Ke("except",e,!0))})}as(e){return new Bi(this,e)}clearSelect(){return new t({...this.#e,queryNode:w.cloneWithoutSelections(this.#e.queryNode)})}clearWhere(){return new t({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}clearLimit(){return new t({...this.#e,queryNode:w.cloneWithoutLimit(this.#e.queryNode)})}clearOffset(){return new t({...this.#e,queryNode:w.cloneWithoutOffset(this.#e.queryNode)})}clearOrderBy(){return new t({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}clearGroupBy(){return new t({...this.#e,queryNode:w.cloneWithoutGroupBy(this.#e.queryNode)})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}$asTuple(){return new x(this.toOperationNode())}$asScalar(){return new x(this.toOperationNode())}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile();return(await this.#e.executor.executeQuery(e,this.#e.queryId)).rows}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=re){let r=await this.executeTakeFirst();if(r===void 0)throw ye(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),o=this.#e.executor.stream(r,e,this.#e.queryId);for await(let n of o)yield*n.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};function Mt(t){return new qi(t)}var Bi=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}get isAliasedSelectQueryBuilder(){return!0}toOperationNode(){return I.create(this.#e.toOperationNode(),d.create(this.#t))}};var xe=i({is(t){return t.kind==="AggregateFunctionNode"},create(t,e=[]){return i({kind:"AggregateFunctionNode",func:t,aggregated:e})},cloneWithDistinct(t){return i({...t,distinct:!0})},cloneWithOrderBy(t,e,r=!1){let o=r?"withinGroup":"orderBy";return i({...t,[o]:t[o]?ve.cloneWithItems(t[o],e):ve.create(e)})},cloneWithFilter(t,e){return i({...t,filter:t.filter?P.cloneWithOperation(t.filter,"And",e):P.create(e)})},cloneWithOrFilter(t,e){return i({...t,filter:t.filter?P.cloneWithOperation(t.filter,"Or",e):P.create(e)})},cloneWithOver(t,e){return i({...t,over:e})}});var Qi=i({is(t){return t.kind==="FunctionNode"},create(t,e){return i({kind:"FunctionNode",func:t,arguments:e})}});var ht=class t{#e;constructor(e){this.#e=i(e)}get expressionType(){}as(e){return new Li(this,e)}distinct(){return new t({...this.#e,aggregateFunctionNode:xe.cloneWithDistinct(this.#e.aggregateFunctionNode)})}orderBy(...e){return new t({...this.#e,aggregateFunctionNode:u.cloneWithOrderByItems(this.#e.aggregateFunctionNode,ee(e))})}clearOrderBy(){return new t({...this.#e,aggregateFunctionNode:u.cloneWithoutOrderBy(this.#e.aggregateFunctionNode)})}withinGroupOrderBy(...e){return new t({...this.#e,aggregateFunctionNode:xe.cloneWithOrderBy(this.#e.aggregateFunctionNode,ee(e),!0)})}filterWhere(...e){return new t({...this.#e,aggregateFunctionNode:xe.cloneWithFilter(this.#e.aggregateFunctionNode,O(e))})}filterWhereRef(e,r,o){return new t({...this.#e,aggregateFunctionNode:xe.cloneWithFilter(this.#e.aggregateFunctionNode,D(e,r,o))})}over(e){let r=Fo();return new t({...this.#e,aggregateFunctionNode:xe.cloneWithOver(this.#e.aggregateFunctionNode,(e?e(r):r).toOperationNode())})}$call(e){return e(this)}$castTo(){return new t(this.#e)}$notNull(){return new t(this.#e)}toOperationNode(){return this.#e.aggregateFunctionNode}},Li=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}toOperationNode(){return I.create(this.#e.toOperationNode(),d.create(this.#t))}};function Or(){let t=(r,o)=>new x(Qi.create(r,Ce(o??[]))),e=(r,o)=>new ht({aggregateFunctionNode:xe.create(r,o?Ce(o):void 0)});return Object.assign(t,{agg:e,avg(r){return e("avg",[r])},coalesce(...r){return t("coalesce",r)},count(r){return e("count",[r])},countAll(r){return new ht({aggregateFunctionNode:xe.create("count",B(r))})},max(r){return e("max",[r])},min(r){return e("min",[r])},sum(r){return e("sum",[r])},any(r){return t("any",[r])},jsonAgg(r){return new ht({aggregateFunctionNode:xe.create("json_agg",[v(r)?y(r):r.toOperationNode()])})},toJson(r){return new x(Qi.create("to_json",[v(r)?y(r):r.toOperationNode()]))}})}var $o=i({is(t){return t.kind==="UnaryOperationNode"},create(t,e){return i({kind:"UnaryOperationNode",operator:t,operand:e})}});function Go(t,e){return $o.create(Z.create(t),L(e))}var te=i({is(t){return t.kind==="CaseNode"},create(t){return i({kind:"CaseNode",value:t})},cloneWithWhen(t,e){return i({...t,when:i(t.when?[...t.when,e]:[e])})},cloneWithThen(t,e){return i({...t,when:t.when?i([...t.when.slice(0,-1),ke.cloneWithResult(t.when[t.when.length-1],e)]):void 0})},cloneWith(t,e){return i({...t,...e})}});var lt=class{#e;constructor(e){this.#e=i(e)}when(...e){return new br({...this.#e,node:te.cloneWithWhen(this.#e.node,ke.create(O(e)))})}},br=class{#e;constructor(e){this.#e=i(e)}then(e){return new Pi({...this.#e,node:te.cloneWithThen(this.#e.node,tr(e)?qt(e):g(e))})}},Pi=class{#e;constructor(e){this.#e=i(e)}when(...e){return new br({...this.#e,node:te.cloneWithWhen(this.#e.node,ke.create(O(e)))})}else(e){return new Fi({...this.#e,node:te.cloneWith(this.#e.node,{else:tr(e)?qt(e):g(e)})})}end(){return new x(te.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new x(te.cloneWith(this.#e.node,{isStatement:!0}))}},Fi=class{#e;constructor(e){this.#e=i(e)}end(){return new x(te.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new x(te.cloneWith(this.#e.node,{isStatement:!0}))}};var Mi=i({is(t){return t.kind==="JSONPathLegNode"},create(t,e){return i({kind:"JSONPathLegNode",type:t,value:e})}});var ft=class{#e;constructor(e){this.#e=e}at(e){return this.#t("ArrayLocation",e)}key(e){return this.#t("Member",e)}#t(e,r){return it.is(this.#e)?new Cr(it.cloneWithTraversal(this.#e,qe.is(this.#e.traversal)?qe.cloneWithLeg(this.#e.traversal,Mi.create(e,r)):_t.cloneWithValue(this.#e.traversal,S.createImmediate(r)))):new Cr(qe.cloneWithLeg(this.#e,Mi.create(e,r)))}},Cr=class t extends ft{#e;constructor(e){super(e),this.#e=e}get expressionType(){}as(e){return new zi(this,e)}$castTo(){return new t(this.#e)}$notNull(){return new t(this.#e)}toOperationNode(){return this.#e}},zi=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}toOperationNode(){return I.create(this.#e.toOperationNode(),b(this.#t)?this.#t.toOperationNode():d.create(this.#t))}};var Vi=i({is(t){return t.kind==="TupleNode"},create(t){return i({kind:"TupleNode",values:i(t)})}});var Kn=["varchar","char","text","integer","int2","int4","int8","smallint","bigint","boolean","real","double precision","float4","float8","decimal","numeric","binary","bytea","date","datetime","time","timetz","timestamp","timestamptz","serial","bigserial","uuid","json","jsonb","blob","varbinary","int4range","int4multirange","int8range","int8multirange","numrange","nummultirange","tsrange","tsmultirange","tstzrange","tstzmultirange","daterange","datemultirange"],Hn=[/^varchar\(\d+\)$/,/^char\(\d+\)$/,/^decimal\(\d+, \d+\)$/,/^numeric\(\d+, \d+\)$/,/^binary\(\d+\)$/,/^datetime\(\d+\)$/,/^time\(\d+\)$/,/^timetz\(\d+\)$/,/^timestamp\(\d+\)$/,/^timestamptz\(\d+\)$/,/^varbinary\(\d+\)$/],jo=i({is(t){return t.kind==="DataTypeNode"},create(t){return i({kind:"DataTypeNode",dataType:t})}});function Ko(t){return!!(Kn.includes(t)||Hn.some(e=>e.test(t)))}function pe(t){if(b(t))return t.toOperationNode();if(Ko(t))return jo.create(t);throw new Error(`invalid column data type ${JSON.stringify(t)}`)}var Ho=i({is(t){return t.kind==="CastNode"},create(t,e){return i({kind:"CastNode",expression:t,dataType:e})}});function gr(t=Pe){function e(n,a,p){return new x(rr(n,a,p))}function r(n,a){return new x(Go(n,a))}let o=Object.assign(e,{fn:void 0,eb:void 0,selectFrom(n){return Mt({queryId:f(),executor:t,queryNode:w.createFrom(ue(n))})},case(n){return new lt({node:te.create(Y(n)?void 0:L(n))})},ref(n,a){return Y(a)?new x(_(n)):new ft(xo(n,a))},jsonPath(){return new ft(qe.create())},table(n){return new x(y(n))},val(n){return new x(g(n))},refTuple(...n){return new x(Vi.create(n.map(L)))},tuple(...n){return new x(Vi.create(n.map(g)))},lit(n){return new x(qt(n))},unary:r,not(n){return r("not",n)},exists(n){return r("exists",n)},neg(n){return r("-",n)},between(n,a,p){return new x(Ie.create(L(n),Z.create("between"),G.create(g(a),g(p))))},betweenSymmetric(n,a,p){return new x(Ie.create(L(n),Z.create("between symmetric"),G.create(g(a),g(p))))},and(n){return F(n)?new x(nt(n,"and")):new x(fi(n,"and"))},or(n){return F(n)?new x(nt(n,"or")):new x(fi(n,"or"))},parens(...n){let a=O(n);return fe.is(a)?new x(a):new x(fe.create(a))},cast(n,a){return new x(Ho.create(L(n),pe(a)))},withSchema(n){return gr(t.withPluginAtFront(new ie(n)))}});return o.fn=Or(),o.eb=o,o}function U(t){return gr()}function j(t){if(b(t))return t.toOperationNode();if(W(t))return t(U()).toOperationNode();throw new Error(`invalid expression: ${JSON.stringify(t)}`)}function sr(t){if(b(t))return t.toOperationNode();if(W(t))return t(U()).toOperationNode();throw new Error(`invalid aliased expression: ${JSON.stringify(t)}`)}function be(t){return Kt(t)||mo(t)||W(t)}var vr=class{#e;get table(){return this.#e}constructor(e){this.#e=e}as(e){return new Ui(this.#e,e)}},Ui=class{#e;#t;get table(){return this.#e}get alias(){return this.#t}constructor(e,r){this.#e=e,this.#t=r}toOperationNode(){return I.create(y(this.#e),d.create(this.#t))}};function Yo(t){return Q(t)&&b(t)&&v(t.table)&&v(t.alias)}function ue(t){return F(t)?t.map(e=>je(e)):[je(t)]}function je(t){return v(t)?Ri(t):Yo(t)?t.toOperationNode():sr(t)}function Ri(t){let e=" as ";if(t.includes(e)){let[r,o]=t.split(e).map(Xo);return I.create(y(r),d.create(o))}else return y(t)}function y(t){let e=".";if(t.includes(e)){let[r,o]=t.split(e).map(Xo);return X.createWithSchema(r,o)}else return X.create(t)}function Xo(t){return t.trim()}var Ji=i({is(t){return t.kind==="AddColumnNode"},create(t){return i({kind:"AddColumnNode",column:t})}});var C=i({is(t){return t.kind==="ColumnDefinitionNode"},create(t,e){return i({kind:"ColumnDefinitionNode",column:l.create(t),dataType:e})},cloneWithFrontModifier(t,e){return i({...t,frontModifiers:t.frontModifiers?i([...t.frontModifiers,e]):[e]})},cloneWithEndModifier(t,e){return i({...t,endModifiers:t.endModifiers?i([...t.endModifiers,e]):[e]})},cloneWith(t,e){return i({...t,...e})}});var $i=i({is(t){return t.kind==="DropColumnNode"},create(t){return i({kind:"DropColumnNode",column:l.create(t)})}});var Gi=i({is(t){return t.kind==="RenameColumnNode"},create(t,e){return i({kind:"RenameColumnNode",column:l.create(t),renameTo:l.create(e)})}});var Nt=i({is(t){return t.kind==="CheckConstraintNode"},create(t,e){return i({kind:"CheckConstraintNode",expression:t,name:e?d.create(e):void 0})}});var Zo=["no action","restrict","cascade","set null","set default"],yt=i({is(t){return t.kind==="ReferencesNode"},create(t,e){return i({kind:"ReferencesNode",table:t,columns:i([...e])})},cloneWithOnDelete(t,e){return i({...t,onDelete:e})},cloneWithOnUpdate(t,e){return i({...t,onUpdate:e})}});function kr(t){return b(t)?t.toOperationNode():S.createImmediate(t)}var Vt=i({is(t){return t.kind==="GeneratedNode"},create(t){return i({kind:"GeneratedNode",...t})},createWithExpression(t){return i({kind:"GeneratedNode",always:!0,expression:t})},cloneWith(t,e){return i({...t,...e})}});var _o=i({is(t){return t.kind==="DefaultValueNode"},create(t){return i({kind:"DefaultValueNode",defaultValue:t})}});function xt(t){if(Zo.includes(t))return t;throw new Error(`invalid OnModifyForeignAction ${t}`)}var We=class t{#e;constructor(e){this.#e=e}autoIncrement(){return new t(C.cloneWith(this.#e,{autoIncrement:!0}))}identity(){return new t(C.cloneWith(this.#e,{identity:!0}))}primaryKey(){return new t(C.cloneWith(this.#e,{primaryKey:!0}))}references(e){let r=_(e);if(!r.table||tt.is(r.column))throw new Error(`invalid call references('${e}'). The reference must have format table.column or schema.table.column`);return new t(C.cloneWith(this.#e,{references:yt.create(r.table,[r.column])}))}onDelete(e){if(!this.#e.references)throw new Error("on delete constraint can only be added for foreign keys");return new t(C.cloneWith(this.#e,{references:yt.cloneWithOnDelete(this.#e.references,xt(e))}))}onUpdate(e){if(!this.#e.references)throw new Error("on update constraint can only be added for foreign keys");return new t(C.cloneWith(this.#e,{references:yt.cloneWithOnUpdate(this.#e.references,xt(e))}))}unique(){return new t(C.cloneWith(this.#e,{unique:!0}))}notNull(){return new t(C.cloneWith(this.#e,{notNull:!0}))}unsigned(){return new t(C.cloneWith(this.#e,{unsigned:!0}))}defaultTo(e){return new t(C.cloneWith(this.#e,{defaultTo:_o.create(kr(e))}))}check(e){return new t(C.cloneWith(this.#e,{check:Nt.create(e.toOperationNode())}))}generatedAlwaysAs(e){return new t(C.cloneWith(this.#e,{generated:Vt.createWithExpression(e.toOperationNode())}))}generatedAlwaysAsIdentity(){return new t(C.cloneWith(this.#e,{generated:Vt.create({identity:!0,always:!0})}))}generatedByDefaultAsIdentity(){return new t(C.cloneWith(this.#e,{generated:Vt.create({identity:!0,byDefault:!0})}))}stored(){if(!this.#e.generated)throw new Error("stored() can only be called after generatedAlwaysAs");return new t(C.cloneWith(this.#e,{generated:Vt.cloneWith(this.#e.generated,{stored:!0})}))}modifyFront(e){return new t(C.cloneWithFrontModifier(this.#e,e.toOperationNode()))}nullsNotDistinct(){return new t(C.cloneWith(this.#e,{nullsNotDistinct:!0}))}ifNotExists(){return new t(C.cloneWith(this.#e,{ifNotExists:!0}))}modifyEnd(e){return new t(C.cloneWithEndModifier(this.#e,e.toOperationNode()))}$call(e){return e(this)}toOperationNode(){return this.#e}};var ji=i({is(t){return t.kind==="ModifyColumnNode"},create(t){return i({kind:"ModifyColumnNode",column:t})}});var de=i({is(t){return t.kind==="ForeignKeyConstraintNode"},create(t,e,r,o){return i({kind:"ForeignKeyConstraintNode",columns:t,references:yt.create(e,r),name:o?d.create(o):void 0})},cloneWith(t,e){return i({...t,...e})}});var wt=class t{#e;constructor(e){this.#e=e}onDelete(e){return new t(de.cloneWith(this.#e,{onDelete:xt(e)}))}onUpdate(e){return new t(de.cloneWith(this.#e,{onUpdate:xt(e)}))}deferrable(){return new t(de.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new t(de.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new t(de.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new t(de.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};var gt=i({is(t){return t.kind==="AddConstraintNode"},create(t){return i({kind:"AddConstraintNode",constraint:t})}});var we=i({is(t){return t.kind==="UniqueConstraintNode"},create(t,e,r){return i({kind:"UniqueConstraintNode",columns:i(t.map(l.create)),name:e?d.create(e):void 0,nullsNotDistinct:r})},cloneWith(t,e){return i({...t,...e})}});var Ot=i({is(t){return t.kind==="DropConstraintNode"},create(t){return i({kind:"DropConstraintNode",constraintName:d.create(t)})},cloneWith(t,e){return i({...t,...e})}});var bt=i({is(t){return t.kind==="AlterColumnNode"},create(t,e,r){return i({kind:"AlterColumnNode",column:l.create(t),[e]:r})}});var Ut=class{#e;constructor(e){this.#e=e}setDataType(e){return new He(bt.create(this.#e,"dataType",pe(e)))}setDefault(e){return new He(bt.create(this.#e,"setDefault",kr(e)))}dropDefault(){return new He(bt.create(this.#e,"dropDefault",!0))}setNotNull(){return new He(bt.create(this.#e,"setNotNull",!0))}dropNotNull(){return new He(bt.create(this.#e,"dropNotNull",!0))}$call(e){return e(this)}},He=class{#e;constructor(e){this.#e=e}toOperationNode(){return this.#e}};var Te=class{#e;constructor(e){this.#e=i(e)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Wr=class t{#e;constructor(e){this.#e=i(e)}onDelete(e){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.onDelete(e)})}onUpdate(e){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.onUpdate(e)})}deferrable(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.deferrable()})}notDeferrable(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.notDeferrable()})}initiallyDeferred(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.initiallyDeferred()})}initiallyImmediate(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.initiallyImmediate()})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(N.cloneWithTableProps(this.#e.node,{addConstraint:gt.create(this.#e.constraintBuilder.toOperationNode())}),this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Jt=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{dropConstraint:Ot.cloneWith(this.#e.node.dropConstraint,{ifExists:!0})})})}cascade(){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{dropConstraint:Ot.cloneWith(this.#e.node.dropConstraint,{modifier:"cascade"})})})}restrict(){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{dropConstraint:Ot.cloneWith(this.#e.node.dropConstraint,{modifier:"restrict"})})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Se=i({is(t){return t.kind==="PrimaryKeyConstraintNode"},create(t,e){return i({kind:"PrimaryKeyConstraintNode",columns:i(t.map(l.create)),name:e?d.create(e):void 0})},cloneWith(t,e){return i({...t,...e})}});var Me=i({is(t){return t.kind==="AddIndexNode"},create(t){return i({kind:"AddIndexNode",name:d.create(t)})},cloneWith(t,e){return i({...t,...e})},cloneWithColumns(t,e){return i({...t,columns:[...t.columns||[],...e]})}});var Tr=class t{#e;constructor(e){this.#e=i(e)}unique(){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addIndex:Me.cloneWith(this.#e.node.addIndex,{unique:!0})})})}column(e){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addIndex:Me.cloneWithColumns(this.#e.node.addIndex,[ot(e)])})})}columns(e){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addIndex:Me.cloneWithColumns(this.#e.node.addIndex,e.map(ot))})})}expression(e){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addIndex:Me.cloneWithColumns(this.#e.node.addIndex,[e.toOperationNode()])})})}using(e){return new t({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addIndex:Me.cloneWith(this.#e.node.addIndex,{using:k.createWithSql(e)})})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Ct=class t{#e;constructor(e){this.#e=e}nullsNotDistinct(){return new t(we.cloneWith(this.#e,{nullsNotDistinct:!0}))}deferrable(){return new t(we.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new t(we.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new t(we.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new t(we.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};var vt=class t{#e;constructor(e){this.#e=e}deferrable(){return new t(Se.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new t(Se.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new t(Se.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new t(Se.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};var kt=class{#e;constructor(e){this.#e=e}$call(e){return e(this)}toOperationNode(){return this.#e}};var en=i({is(t){return t.kind==="RenameConstraintNode"},create(t,e){return i({kind:"RenameConstraintNode",oldName:d.create(t),newName:d.create(e)})}});var Sr=class{#e;constructor(e){this.#e=i(e)}renameTo(e){return new Te({...this.#e,node:N.cloneWithTableProps(this.#e.node,{renameTo:y(e)})})}setSchema(e){return new Te({...this.#e,node:N.cloneWithTableProps(this.#e.node,{setSchema:d.create(e)})})}alterColumn(e,r){let o=r(new Ut(e));return new Ye({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,o.toOperationNode())})}dropColumn(e){return new Ye({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,$i.create(e))})}renameColumn(e,r){return new Ye({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,Gi.create(e,r))})}addColumn(e,r,o=V){let n=o(new We(C.create(e,pe(r))));return new Ye({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,Ji.create(n.toOperationNode()))})}modifyColumn(e,r,o=V){let n=o(new We(C.create(e,pe(r))));return new Ye({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,ji.create(n.toOperationNode()))})}addUniqueConstraint(e,r,o=V){let n=o(new Ct(we.create(r,e)));return new Te({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addConstraint:gt.create(n.toOperationNode())})})}addCheckConstraint(e,r,o=V){let n=o(new kt(Nt.create(r.toOperationNode(),e)));return new Te({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addConstraint:gt.create(n.toOperationNode())})})}addForeignKeyConstraint(e,r,o,n,a=V){let p=a(new wt(de.create(r.map(l.create),y(o),n.map(l.create),e)));return new Wr({...this.#e,constraintBuilder:p})}addPrimaryKeyConstraint(e,r,o=V){let n=o(new vt(Se.create(r,e)));return new Te({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addConstraint:gt.create(n.toOperationNode())})})}dropConstraint(e){return new Jt({...this.#e,node:N.cloneWithTableProps(this.#e.node,{dropConstraint:Ot.create(e)})})}renameConstraint(e,r){return new Jt({...this.#e,node:N.cloneWithTableProps(this.#e.node,{renameConstraint:en.create(e,r)})})}addIndex(e){return new Tr({...this.#e,node:N.cloneWithTableProps(this.#e.node,{addIndex:Me.create(e)})})}dropIndex(e){return new Te({...this.#e,node:N.cloneWithTableProps(this.#e.node,{dropIndex:Re.create(e)})})}$call(e){return e(this)}},Ye=class t{#e;constructor(e){this.#e=i(e)}alterColumn(e,r){let o=r(new Ut(e));return new t({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,o.toOperationNode())})}dropColumn(e){return new t({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,$i.create(e))})}renameColumn(e,r){return new t({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,Gi.create(e,r))})}addColumn(e,r,o=V){let n=o(new We(C.create(e,pe(r))));return new t({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,Ji.create(n.toOperationNode()))})}modifyColumn(e,r,o=V){let n=o(new We(C.create(e,pe(r))));return new t({...this.#e,node:N.cloneWithColumnAlteration(this.#e.node,ji.create(n.toOperationNode()))})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Wt=class extends Le{transformPrimitiveValueList(e){return le.create(e.values.map(S.createImmediate))}transformValue(e){return S.createImmediate(e.value)}};var Ar=class t{#e;constructor(e){this.#e=i(e)}ifNotExists(){return new t({...this.#e,node:oe.cloneWith(this.#e.node,{ifNotExists:!0})})}unique(){return new t({...this.#e,node:oe.cloneWith(this.#e.node,{unique:!0})})}nullsNotDistinct(){return new t({...this.#e,node:oe.cloneWith(this.#e.node,{nullsNotDistinct:!0})})}on(e){return new t({...this.#e,node:oe.cloneWith(this.#e.node,{table:y(e)})})}column(e){return new t({...this.#e,node:oe.cloneWithColumns(this.#e.node,[ot(e)])})}columns(e){return new t({...this.#e,node:oe.cloneWithColumns(this.#e.node,e.map(ot))})}expression(e){return new t({...this.#e,node:oe.cloneWithColumns(this.#e.node,[e.toOperationNode()])})}using(e){return new t({...this.#e,node:oe.cloneWith(this.#e.node,{using:k.createWithSql(e)})})}where(...e){let r=new Wt;return new t({...this.#e,node:u.cloneWithWhere(this.#e.node,r.transformNode(O(e),this.#e.queryId))})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Er=class t{#e;constructor(e){this.#e=i(e)}ifNotExists(){return new t({...this.#e,node:jt.cloneWith(this.#e.node,{ifNotExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};function tn(t){if(co.includes(t))return t;throw new Error(`invalid OnCommitAction ${t}`)}var Rr=class t{#e;constructor(e){this.#e=i(e)}temporary(){return new t({...this.#e,node:M.cloneWith(this.#e.node,{temporary:!0})})}onCommit(e){return new t({...this.#e,node:M.cloneWith(this.#e.node,{onCommit:tn(e)})})}ifNotExists(){return new t({...this.#e,node:M.cloneWith(this.#e.node,{ifNotExists:!0})})}addColumn(e,r,o=V){let n=o(new We(C.create(e,pe(r))));return new t({...this.#e,node:M.cloneWithColumn(this.#e.node,n.toOperationNode())})}addPrimaryKeyConstraint(e,r,o=V){let n=o(new vt(Se.create(r,e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,n.toOperationNode())})}addUniqueConstraint(e,r,o=V){let n=o(new Ct(we.create(r,e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,n.toOperationNode())})}addCheckConstraint(e,r,o=V){let n=o(new kt(Nt.create(r.toOperationNode(),e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,n.toOperationNode())})}addForeignKeyConstraint(e,r,o,n,a=V){let p=a(new wt(de.create(r.map(l.create),y(o),n.map(l.create),e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,p.toOperationNode())})}modifyFront(e){return new t({...this.#e,node:M.cloneWithFrontModifier(this.#e.node,e.toOperationNode())})}modifyEnd(e){return new t({...this.#e,node:M.cloneWithEndModifier(this.#e.node,e.toOperationNode())})}as(e){return new t({...this.#e,node:M.cloneWith(this.#e.node,{selectQuery:j(e)})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Ir=class t{#e;constructor(e){this.#e=i(e)}on(e){return new t({...this.#e,node:Re.cloneWith(this.#e.node,{table:y(e)})})}ifExists(){return new t({...this.#e,node:Re.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:Re.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Dr=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:It.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:It.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var qr=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:Dt.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:Dt.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var ce=i({is(t){return t.kind==="CreateViewNode"},create(t){return i({kind:"CreateViewNode",name:z.create(t)})},cloneWith(t,e){return i({...t,...e})}});var Br=class{#e=new Wt;transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}transformResult(e){return Promise.resolve(e.result)}};var Qr=class t{#e;constructor(e){this.#e=i(e)}temporary(){return new t({...this.#e,node:ce.cloneWith(this.#e.node,{temporary:!0})})}materialized(){return new t({...this.#e,node:ce.cloneWith(this.#e.node,{materialized:!0})})}ifNotExists(){return new t({...this.#e,node:ce.cloneWith(this.#e.node,{ifNotExists:!0})})}orReplace(){return new t({...this.#e,node:ce.cloneWith(this.#e.node,{orReplace:!0})})}columns(e){return new t({...this.#e,node:ce.cloneWith(this.#e.node,{columns:e.map(mi)})})}as(e){let r=e.withPlugin(new Br).toOperationNode();return new t({...this.#e,node:ce.cloneWith(this.#e.node,{as:r})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Tt=i({is(t){return t.kind==="DropViewNode"},create(t){return i({kind:"DropViewNode",name:z.create(t)})},cloneWith(t,e){return i({...t,...e})}});var Lr=class t{#e;constructor(e){this.#e=i(e)}materialized(){return new t({...this.#e,node:Tt.cloneWith(this.#e.node,{materialized:!0})})}ifExists(){return new t({...this.#e,node:Tt.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:Tt.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Pr=i({is(t){return t.kind==="CreateTypeNode"},create(t){return i({kind:"CreateTypeNode",name:t})},cloneWithEnum(t,e){return i({...t,enum:le.create(e.map(S.createImmediate))})}});var Fr=class t{#e;constructor(e){this.#e=i(e)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}asEnum(e){return new t({...this.#e,node:Pr.cloneWithEnum(this.#e.node,e)})}$call(e){return e(this)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Mr=i({is(t){return t.kind==="DropTypeNode"},create(t){return i({kind:"DropTypeNode",name:t})},cloneWith(t,e){return i({...t,...e})}});var zr=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:Mr.cloneWith(this.#e.node,{ifExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};function Ki(t){let e=".";if(t.includes(e)){let r=t.split(e).map(Yn);if(r.length===2)return z.createWithSchema(r[0],r[1]);throw new Error(`invalid schemable identifier ${t}`)}else return z.create(t)}function Yn(t){return t.trim()}var St=i({is(t){return t.kind==="RefreshMaterializedViewNode"},create(t){return i({kind:"RefreshMaterializedViewNode",name:z.create(t)})},cloneWith(t,e){return i({...t,...e})}});var Vr=class t{#e;constructor(e){this.#e=i(e)}concurrently(){return new t({...this.#e,node:St.cloneWith(this.#e.node,{concurrently:!0,withNoData:!1})})}withData(){return new t({...this.#e,node:St.cloneWith(this.#e.node,{withNoData:!1})})}withNoData(){return new t({...this.#e,node:St.cloneWith(this.#e.node,{withNoData:!0,concurrently:!1})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Ur=class t{#e;constructor(e){this.#e=e}createTable(e){return new Rr({queryId:f(),executor:this.#e,node:M.create(y(e))})}dropTable(e){return new qr({queryId:f(),executor:this.#e,node:Dt.create(y(e))})}createIndex(e){return new Ar({queryId:f(),executor:this.#e,node:oe.create(e)})}dropIndex(e){return new Ir({queryId:f(),executor:this.#e,node:Re.create(e)})}createSchema(e){return new Er({queryId:f(),executor:this.#e,node:jt.create(e)})}dropSchema(e){return new Dr({queryId:f(),executor:this.#e,node:It.create(e)})}alterTable(e){return new Sr({queryId:f(),executor:this.#e,node:N.create(y(e))})}createView(e){return new Qr({queryId:f(),executor:this.#e,node:ce.create(e)})}refreshMaterializedView(e){return new Vr({queryId:f(),executor:this.#e,node:St.create(e)})}dropView(e){return new Lr({queryId:f(),executor:this.#e,node:Tt.create(e)})}createType(e){return new Fr({queryId:f(),executor:this.#e,node:Pr.create(Ki(e))})}dropType(e){return new zr({queryId:f(),executor:this.#e,node:Mr.create(Ki(e))})}withPlugin(e){return new t(this.#e.withPlugin(e))}withoutPlugins(){return new t(this.#e.withoutPlugins())}withSchema(e){return new t(this.#e.withPluginAtFront(new ie(e)))}};var Jr=class{ref(e){return new Yt(e)}table(e){return new vr(e)}};var $r=class{#e;constructor(e){this.#e=e}async provideConnection(e){let r=await this.#e.acquireConnection();try{return await e(r)}finally{await this.#e.releaseConnection(r)}}};var Gr=class t extends ct{#e;#t;#r;constructor(e,r,o,n=[]){super(n),this.#e=e,this.#t=r,this.#r=o}get adapter(){return this.#t}compileQuery(e,r){return this.#e.compileQuery(e,r)}provideConnection(e){return this.#r.provideConnection(e)}withPlugins(e){return new t(this.#e,this.#t,this.#r,[...this.plugins,...e])}withPlugin(e){return new t(this.#e,this.#t,this.#r,[...this.plugins,e])}withPluginAtFront(e){return new t(this.#e,this.#t,this.#r,[e,...this.plugins])}withConnectionProvider(e){return new t(this.#e,this.#t,e,[...this.plugins])}withoutPlugins(){return new t(this.#e,this.#t,this.#r,[])}};function jr(){return typeof performance<"u"&&W(performance.now)?performance.now():Date.now()}var Kr=class{#e;#t;#r;#i;#o;#a=new WeakSet;constructor(e,r){this.#i=!1,this.#e=e,this.#t=r}async init(){if(this.#o)throw new Error("driver has already been destroyed");this.#r||(this.#r=this.#e.init().then(()=>{this.#i=!0}).catch(e=>(this.#r=void 0,Promise.reject(e)))),await this.#r}async acquireConnection(){if(this.#o)throw new Error("driver has already been destroyed");this.#i||await this.init();let e=await this.#e.acquireConnection();return this.#a.has(e)||(this.#p()&&this.#n(e),this.#a.add(e)),e}async releaseConnection(e){await this.#e.releaseConnection(e)}beginTransaction(e,r){return this.#e.beginTransaction(e,r)}commitTransaction(e){return this.#e.commitTransaction(e)}rollbackTransaction(e){return this.#e.rollbackTransaction(e)}savepoint(e,r,o){if(this.#e.savepoint)return this.#e.savepoint(e,r,o);throw new Error("The `savepoint` method is not supported by this driver")}rollbackToSavepoint(e,r,o){if(this.#e.rollbackToSavepoint)return this.#e.rollbackToSavepoint(e,r,o);throw new Error("The `rollbackToSavepoint` method is not supported by this driver")}releaseSavepoint(e,r,o){if(this.#e.releaseSavepoint)return this.#e.releaseSavepoint(e,r,o);throw new Error("The `releaseSavepoint` method is not supported by this driver")}async destroy(){this.#r&&(await this.#r,this.#o||(this.#o=this.#e.destroy().catch(e=>(this.#o=void 0,Promise.reject(e)))),await this.#o)}#p(){return this.#t.isLevelEnabled("query")||this.#t.isLevelEnabled("error")}#n(e){let r=e.executeQuery,o=e.streamQuery,n=this;e.executeQuery=async a=>{let p,c=jr();try{return await r.call(e,a)}catch(h){throw p=h,await n.#s(h,a,c),h}finally{p||await n.#u(a,c)}},e.streamQuery=async function*(a,p){let c,h=jr();try{for await(let m of o.call(e,a,p))yield m}catch(m){throw c=m,await n.#s(m,a,h),m}finally{c||await n.#u(a,h,!0)}}}async#s(e,r,o){await this.#t.error(()=>({level:"error",error:e,query:r,queryDurationMillis:this.#d(o)}))}async#u(e,r,o=!1){await this.#t.query(()=>({level:"query",isStream:o,query:e,queryDurationMillis:this.#d(r)}))}#d(e){return jr()-e}};var Xn=()=>{},At=class{#e;#t;constructor(e){this.#e=e}async provideConnection(e){for(;this.#t;)await this.#t.catch(Xn);return this.#t=this.#r(e).finally(()=>{this.#t=void 0}),this.#t}async#r(e){return await e(this.#e)}};var Zn=["read only","read write"],_n=["read uncommitted","read committed","repeatable read","serializable","snapshot"];function Hi(t){if(t.accessMode&&!Zn.includes(t.accessMode))throw new Error(`invalid transaction access mode ${t.accessMode}`);if(t.isolationLevel&&!_n.includes(t.isolationLevel))throw new Error(`invalid transaction isolation level ${t.isolationLevel}`)}var rk=i(["query","error"]),Hr=class{#e;#t;constructor(e){W(e)?(this.#t=e,this.#e=i({query:!0,error:!0})):(this.#t=es,this.#e=i({query:e.includes("query"),error:e.includes("error")}))}isLevelEnabled(e){return this.#e[e]}async query(e){this.#e.query&&await this.#t(e())}async error(e){this.#e.error&&await this.#t(e())}};function es(t){if(t.level==="query"){let e=`kysely:query:${t.isStream?"stream:":""}`;console.log(`${e} ${t.query.sql}`),console.log(`${e} duration: ${t.queryDurationMillis.toFixed(1)}ms`)}else t.level==="error"&&(t.error instanceof Error?console.error(`kysely:error: ${t.error.stack??t.error.message}`):console.error(`kysely:error: ${JSON.stringify({error:t.error,query:t.query.sql,queryDurationMillis:t.queryDurationMillis})}`))}function rn(t){return Q(t)&&W(t.compile)}Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");var Et=class t extends mt{#e;constructor(e){let r,o;if(ts(e))r={executor:e.executor},o={...e};else{let n=e.dialect,a=n.createDriver(),p=n.createQueryCompiler(),c=n.createAdapter(),h=new Hr(e.log??[]),m=new Kr(a,h),K=new $r(m),H=new Gr(p,c,K,e.plugins??[]);r={executor:H},o={config:e,executor:H,dialect:n,driver:m}}super(r),this.#e=i(o)}get schema(){return new Ur(this.#e.executor)}get dynamic(){return new Jr}get introspection(){return this.#e.dialect.createIntrospector(this.withoutPlugins())}case(e){return new lt({node:te.create(Y(e)?void 0:j(e))})}get fn(){return Or()}transaction(){return new Xi({...this.#e})}startTransaction(){return new Zi({...this.#e})}connection(){return new Yi({...this.#e})}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new ie(e))})}withTables(){return new t({...this.#e})}async destroy(){await this.#e.driver.destroy()}get isTransaction(){return!1}getExecutor(){return this.#e.executor}executeQuery(e,r=f()){let o=rn(e)?e.compile():e;return this.getExecutor().executeQuery(o,r)}async[Symbol.asyncDispose](){await this.destroy()}},Yr=class t extends Et{#e;constructor(e){super(e),this.#e=e}get isTransaction(){return!0}transaction(){throw new Error("calling the transaction method for a Transaction is not supported")}connection(){throw new Error("calling the connection method for a Transaction is not supported")}async destroy(){throw new Error("calling the destroy method for a Transaction is not supported")}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new ie(e))})}withTables(){return new t({...this.#e})}};function ts(t){return Q(t)&&Q(t.config)&&Q(t.driver)&&Q(t.executor)&&Q(t.dialect)}var Yi=class{#e;constructor(e){this.#e=i(e)}async execute(e){return this.#e.executor.provideConnection(async r=>{let o=this.#e.executor.withConnectionProvider(new At(r)),n=new Et({...this.#e,executor:o});return await e(n)})}},Xi=class t{#e;constructor(e){this.#e=i(e)}setAccessMode(e){return new t({...this.#e,accessMode:e})}setIsolationLevel(e){return new t({...this.#e,isolationLevel:e})}async execute(e){let{isolationLevel:r,accessMode:o,...n}=this.#e,a={isolationLevel:r,accessMode:o};return Hi(a),this.#e.executor.provideConnection(async p=>{let c=this.#e.executor.withConnectionProvider(new At(p)),h=new Yr({...n,executor:c});try{await this.#e.driver.beginTransaction(p,a);let m=await e(h);return await this.#e.driver.commitTransaction(p),m}catch(m){throw await this.#e.driver.rollbackTransaction(p),m}})}},Zi=class t{#e;constructor(e){this.#e=i(e)}setAccessMode(e){return new t({...this.#e,accessMode:e})}setIsolationLevel(e){return new t({...this.#e,isolationLevel:e})}async execute(){let{isolationLevel:e,accessMode:r,...o}=this.#e,n={isolationLevel:e,accessMode:r};Hi(n);let a=await fr(this.#e.executor);return await this.#e.driver.beginTransaction(a.connection,n),new _i({...o,connection:a,executor:this.#e.executor.withConnectionProvider(new At(a.connection))})}},_i=class t extends Yr{#e;#t;#r;constructor(e){let r={isCommitted:!1,isRolledBack:!1};e={...e,executor:new eo(e.executor,r)};let{connection:o,...n}=e;super(n),this.#e=i(e),this.#r=r;let a=f();this.#t=p=>e.executor.compileQuery(p,a)}get isCommitted(){return this.#r.isCommitted}get isRolledBack(){return this.#r.isRolledBack}commit(){return Ze(this.#r),new Xe(async()=>{await this.#e.driver.commitTransaction(this.#e.connection.connection),this.#r.isCommitted=!0,this.#e.connection.release()})}rollback(){return Ze(this.#r),new Xe(async()=>{await this.#e.driver.rollbackTransaction(this.#e.connection.connection),this.#r.isRolledBack=!0,this.#e.connection.release()})}savepoint(e){return Ze(this.#r),new Xe(async()=>(await this.#e.driver.savepoint?.(this.#e.connection.connection,e,this.#t),new t({...this.#e})))}rollbackToSavepoint(e){return Ze(this.#r),new Xe(async()=>(await this.#e.driver.rollbackToSavepoint?.(this.#e.connection.connection,e,this.#t),new t({...this.#e})))}releaseSavepoint(e){return Ze(this.#r),new Xe(async()=>(await this.#e.driver.releaseSavepoint?.(this.#e.connection.connection,e,this.#t),new t({...this.#e})))}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new ie(e))})}withTables(){return new t({...this.#e})}},Xe=class{#e;constructor(e){this.#e=e}async execute(){return await this.#e()}};function Ze(t){if(t.isCommitted)throw new Error("Transaction is already committed");if(t.isRolledBack)throw new Error("Transaction is already rolled back")}var eo=class t{#e;#t;constructor(e,r){e instanceof t?this.#e=e.#e:this.#e=e,this.#t=r}get adapter(){return this.#e.adapter}get plugins(){return this.#e.plugins}transformQuery(e,r){return this.#e.transformQuery(e,r)}compileQuery(e,r){return this.#e.compileQuery(e,r)}provideConnection(e){return this.#e.provideConnection(e)}executeQuery(e,r){return Ze(this.#t),this.#e.executeQuery(e,r)}stream(e,r,o){return Ze(this.#t),this.#e.stream(e,r,o)}withConnectionProvider(e){return new t(this.#e.withConnectionProvider(e),this.#t)}withPlugin(e){return new t(this.#e.withPlugin(e),this.#t)}withPlugins(e){return new t(this.#e.withPlugins(e),this.#t)}withPluginAtFront(e){return new t(this.#e.withPluginAtFront(e),this.#t)}withoutPlugins(){return new t(this.#e.withoutPlugins(),this.#t)}};var to=class t{#e;constructor(e){this.#e=i(e)}get expressionType(){}get isRawBuilder(){return!0}as(e){return new ro(this,e)}$castTo(){return new t({...this.#e})}$notNull(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,plugins:this.#e.plugins!==void 0?i([...this.#e.plugins,e]):i([e])})}toOperationNode(){return this.#r(this.#t())}compile(e){return this.#i(this.#t(e))}async execute(e){let r=this.#t(e);return r.executeQuery(this.#i(r),this.#e.queryId)}#t(e){let r=e!==void 0?e.getExecutor():Pe;return this.#e.plugins!==void 0?r.withPlugins(this.#e.plugins):r}#r(e){return e.transformQuery(this.#e.rawNode,this.#e.queryId)}#i(e){return e.compileQuery(this.#r(e),this.#e.queryId)}};function Ae(t){return new to(t)}var ro=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}get rawBuilder(){return this.#e}toOperationNode(){return I.create(this.#e.toOperationNode(),b(this.#t)?this.#t.toOperationNode():d.create(this.#t))}};var A=Object.assign((t,...e)=>Ae({queryId:f(),rawNode:k.create(t,e?.map(on)??[])}),{ref(t){return Ae({queryId:f(),rawNode:k.createWithChild(_(t))})},val(t){return Ae({queryId:f(),rawNode:k.createWithChild(g(t))})},value(t){return this.val(t)},table(t){return Ae({queryId:f(),rawNode:k.createWithChild(y(t))})},id(...t){let e=new Array(t.length+1).fill(".");return e[0]="",e[e.length-1]="",Ae({queryId:f(),rawNode:k.create(e,t.map(d.create))})},lit(t){return Ae({queryId:f(),rawNode:k.createWithChild(S.createImmediate(t))})},literal(t){return this.lit(t)},raw(t){return Ae({queryId:f(),rawNode:k.createWithSql(t)})},join(t,e=A`, `){let r=new Array(Math.max(2*t.length-1,0)),o=e.toOperationNode();for(let n=0;n<t.length;++n)r[2*n]=on(t[n]),n!==t.length-1&&(r[2*n+1]=o);return Ae({queryId:f(),rawNode:k.createWithChildren(r)})}});function on(t){return b(t)?t.toOperationNode():g(t)}var Xr=class{nodeStack=[];get parentNode(){return this.nodeStack[this.nodeStack.length-2]}#e=i({AliasNode:this.visitAlias.bind(this),ColumnNode:this.visitColumn.bind(this),IdentifierNode:this.visitIdentifier.bind(this),SchemableIdentifierNode:this.visitSchemableIdentifier.bind(this),RawNode:this.visitRaw.bind(this),ReferenceNode:this.visitReference.bind(this),SelectQueryNode:this.visitSelectQuery.bind(this),SelectionNode:this.visitSelection.bind(this),TableNode:this.visitTable.bind(this),FromNode:this.visitFrom.bind(this),SelectAllNode:this.visitSelectAll.bind(this),AndNode:this.visitAnd.bind(this),OrNode:this.visitOr.bind(this),ValueNode:this.visitValue.bind(this),ValueListNode:this.visitValueList.bind(this),PrimitiveValueListNode:this.visitPrimitiveValueList.bind(this),ParensNode:this.visitParens.bind(this),JoinNode:this.visitJoin.bind(this),OperatorNode:this.visitOperator.bind(this),WhereNode:this.visitWhere.bind(this),InsertQueryNode:this.visitInsertQuery.bind(this),DeleteQueryNode:this.visitDeleteQuery.bind(this),ReturningNode:this.visitReturning.bind(this),CreateTableNode:this.visitCreateTable.bind(this),AddColumnNode:this.visitAddColumn.bind(this),ColumnDefinitionNode:this.visitColumnDefinition.bind(this),DropTableNode:this.visitDropTable.bind(this),DataTypeNode:this.visitDataType.bind(this),OrderByNode:this.visitOrderBy.bind(this),OrderByItemNode:this.visitOrderByItem.bind(this),GroupByNode:this.visitGroupBy.bind(this),GroupByItemNode:this.visitGroupByItem.bind(this),UpdateQueryNode:this.visitUpdateQuery.bind(this),ColumnUpdateNode:this.visitColumnUpdate.bind(this),LimitNode:this.visitLimit.bind(this),OffsetNode:this.visitOffset.bind(this),OnConflictNode:this.visitOnConflict.bind(this),OnDuplicateKeyNode:this.visitOnDuplicateKey.bind(this),CreateIndexNode:this.visitCreateIndex.bind(this),DropIndexNode:this.visitDropIndex.bind(this),ListNode:this.visitList.bind(this),PrimaryKeyConstraintNode:this.visitPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.visitUniqueConstraint.bind(this),ReferencesNode:this.visitReferences.bind(this),CheckConstraintNode:this.visitCheckConstraint.bind(this),WithNode:this.visitWith.bind(this),CommonTableExpressionNode:this.visitCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.visitCommonTableExpressionName.bind(this),HavingNode:this.visitHaving.bind(this),CreateSchemaNode:this.visitCreateSchema.bind(this),DropSchemaNode:this.visitDropSchema.bind(this),AlterTableNode:this.visitAlterTable.bind(this),DropColumnNode:this.visitDropColumn.bind(this),RenameColumnNode:this.visitRenameColumn.bind(this),AlterColumnNode:this.visitAlterColumn.bind(this),ModifyColumnNode:this.visitModifyColumn.bind(this),AddConstraintNode:this.visitAddConstraint.bind(this),DropConstraintNode:this.visitDropConstraint.bind(this),RenameConstraintNode:this.visitRenameConstraint.bind(this),ForeignKeyConstraintNode:this.visitForeignKeyConstraint.bind(this),CreateViewNode:this.visitCreateView.bind(this),RefreshMaterializedViewNode:this.visitRefreshMaterializedView.bind(this),DropViewNode:this.visitDropView.bind(this),GeneratedNode:this.visitGenerated.bind(this),DefaultValueNode:this.visitDefaultValue.bind(this),OnNode:this.visitOn.bind(this),ValuesNode:this.visitValues.bind(this),SelectModifierNode:this.visitSelectModifier.bind(this),CreateTypeNode:this.visitCreateType.bind(this),DropTypeNode:this.visitDropType.bind(this),ExplainNode:this.visitExplain.bind(this),DefaultInsertValueNode:this.visitDefaultInsertValue.bind(this),AggregateFunctionNode:this.visitAggregateFunction.bind(this),OverNode:this.visitOver.bind(this),PartitionByNode:this.visitPartitionBy.bind(this),PartitionByItemNode:this.visitPartitionByItem.bind(this),SetOperationNode:this.visitSetOperation.bind(this),BinaryOperationNode:this.visitBinaryOperation.bind(this),UnaryOperationNode:this.visitUnaryOperation.bind(this),UsingNode:this.visitUsing.bind(this),FunctionNode:this.visitFunction.bind(this),CaseNode:this.visitCase.bind(this),WhenNode:this.visitWhen.bind(this),JSONReferenceNode:this.visitJSONReference.bind(this),JSONPathNode:this.visitJSONPath.bind(this),JSONPathLegNode:this.visitJSONPathLeg.bind(this),JSONOperatorChainNode:this.visitJSONOperatorChain.bind(this),TupleNode:this.visitTuple.bind(this),MergeQueryNode:this.visitMergeQuery.bind(this),MatchedNode:this.visitMatched.bind(this),AddIndexNode:this.visitAddIndex.bind(this),CastNode:this.visitCast.bind(this),FetchNode:this.visitFetch.bind(this),TopNode:this.visitTop.bind(this),OutputNode:this.visitOutput.bind(this),OrActionNode:this.visitOrAction.bind(this),CollateNode:this.visitCollate.bind(this)});visitNode=e=>{this.nodeStack.push(e),this.#e[e.kind](e),this.nodeStack.pop()}};var rs=/'/g,Zr=class extends Xr{#e="";#t=[];get numParameters(){return this.#t.length}compileQuery(e,r){return this.#e="",this.#t=[],this.nodeStack.splice(0,this.nodeStack.length),this.visitNode(e),i({query:e,queryId:r,sql:this.getSql(),parameters:[...this.#t]})}getSql(){return this.#e}visitSelectQuery(e){let r=this.parentNode!==void 0&&!fe.is(this.parentNode)&&!T.is(this.parentNode)&&!M.is(this.parentNode)&&!ce.is(this.parentNode)&&!wr.is(this.parentNode);this.parentNode===void 0&&e.explain&&(this.visitNode(e.explain),this.append(" ")),r&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("select"),e.distinctOn&&(this.append(" "),this.compileDistinctOn(e.distinctOn)),e.frontModifiers?.length&&(this.append(" "),this.compileList(e.frontModifiers," ")),e.top&&(this.append(" "),this.visitNode(e.top)),e.selections&&(this.append(" "),this.compileList(e.selections)),e.from&&(this.append(" "),this.visitNode(e.from)),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.groupBy&&(this.append(" "),this.visitNode(e.groupBy)),e.having&&(this.append(" "),this.visitNode(e.having)),e.setOperations&&(this.append(" "),this.compileList(e.setOperations," ")),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.offset&&(this.append(" "),this.visitNode(e.offset)),e.fetch&&(this.append(" "),this.visitNode(e.fetch)),e.endModifiers?.length&&(this.append(" "),this.compileList(this.sortSelectModifiers([...e.endModifiers])," ")),r&&this.append(")")}visitFrom(e){this.append("from "),this.compileList(e.froms)}visitSelection(e){this.visitNode(e.selection)}visitColumn(e){this.visitNode(e.column)}compileDistinctOn(e){this.append("distinct on ("),this.compileList(e),this.append(")")}compileList(e,r=", "){let o=e.length-1;for(let n=0;n<=o;n++)this.visitNode(e[n]),n<o&&this.append(r)}visitWhere(e){this.append("where "),this.visitNode(e.where)}visitHaving(e){this.append("having "),this.visitNode(e.having)}visitInsertQuery(e){let r=this.nodeStack.find(u.is),o=r!==e;!o&&e.explain&&(this.visitNode(e.explain),this.append(" ")),o&&!q.is(r)&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append(e.replace?"replace":"insert"),e.ignore&&(De("`InsertQueryNode.ignore` is deprecated. Use `InsertQueryNode.orAction` instead."),this.append(" ignore")),e.orAction&&(this.append(" "),this.visitNode(e.orAction)),e.top&&(this.append(" "),this.visitNode(e.top)),e.into&&(this.append(" into "),this.visitNode(e.into)),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.output&&(this.append(" "),this.visitNode(e.output)),e.values&&(this.append(" "),this.visitNode(e.values)),e.defaultValues&&(this.append(" "),this.append("default values")),e.onConflict&&(this.append(" "),this.visitNode(e.onConflict)),e.onDuplicateKey&&(this.append(" "),this.visitNode(e.onDuplicateKey)),e.returning&&(this.append(" "),this.visitNode(e.returning)),o&&!q.is(r)&&this.append(")"),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitValues(e){this.append("values "),this.compileList(e.values)}visitDeleteQuery(e){let r=this.nodeStack.find(u.is)!==e;!r&&e.explain&&(this.visitNode(e.explain),this.append(" ")),r&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("delete "),e.top&&(this.visitNode(e.top),this.append(" ")),this.visitNode(e.from),e.output&&(this.append(" "),this.visitNode(e.output)),e.using&&(this.append(" "),this.visitNode(e.using)),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.returning&&(this.append(" "),this.visitNode(e.returning)),r&&this.append(")"),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitReturning(e){this.append("returning "),this.compileList(e.selections)}visitAlias(e){this.visitNode(e.node),this.append(" as "),this.visitNode(e.alias)}visitReference(e){e.table&&(this.visitNode(e.table),this.append(".")),this.visitNode(e.column)}visitSelectAll(e){this.append("*")}visitIdentifier(e){this.append(this.getLeftIdentifierWrapper()),this.compileUnwrappedIdentifier(e),this.append(this.getRightIdentifierWrapper())}compileUnwrappedIdentifier(e){if(!v(e.name))throw new Error("a non-string identifier was passed to compileUnwrappedIdentifier.");this.append(this.sanitizeIdentifier(e.name))}visitAnd(e){this.visitNode(e.left),this.append(" and "),this.visitNode(e.right)}visitOr(e){this.visitNode(e.left),this.append(" or "),this.visitNode(e.right)}visitValue(e){e.immediate?this.appendImmediateValue(e.value):this.appendValue(e.value)}visitValueList(e){this.append("("),this.compileList(e.values),this.append(")")}visitTuple(e){this.append("("),this.compileList(e.values),this.append(")")}visitPrimitiveValueList(e){this.append("(");let{values:r}=e;for(let o=0;o<r.length;++o)this.appendValue(r[o]),o!==r.length-1&&this.append(", ");this.append(")")}visitParens(e){this.append("("),this.visitNode(e.node),this.append(")")}visitJoin(e){this.append(os[e.joinType]),this.append(" "),this.visitNode(e.table),e.on&&(this.append(" "),this.visitNode(e.on))}visitOn(e){this.append("on "),this.visitNode(e.on)}visitRaw(e){let{sqlFragments:r,parameters:o}=e;for(let n=0;n<r.length;++n)this.append(r[n]),o.length>n&&this.visitNode(o[n])}visitOperator(e){this.append(e.operator)}visitTable(e){this.visitNode(e.table)}visitSchemableIdentifier(e){e.schema&&(this.visitNode(e.schema),this.append(".")),this.visitNode(e.identifier)}visitCreateTable(e){this.append("create "),e.frontModifiers&&e.frontModifiers.length>0&&(this.compileList(e.frontModifiers," "),this.append(" ")),e.temporary&&this.append("temporary "),this.append("table "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.table),e.selectQuery?(this.append(" as "),this.visitNode(e.selectQuery)):(this.append(" ("),this.compileList([...e.columns,...e.constraints??[]]),this.append(")"),e.onCommit&&(this.append(" on commit "),this.append(e.onCommit)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," ")))}visitColumnDefinition(e){e.ifNotExists&&this.append("if not exists "),this.visitNode(e.column),this.append(" "),this.visitNode(e.dataType),e.unsigned&&this.append(" unsigned"),e.frontModifiers&&e.frontModifiers.length>0&&(this.append(" "),this.compileList(e.frontModifiers," ")),e.generated&&(this.append(" "),this.visitNode(e.generated)),e.identity&&this.append(" identity"),e.defaultTo&&(this.append(" "),this.visitNode(e.defaultTo)),e.notNull&&this.append(" not null"),e.unique&&this.append(" unique"),e.nullsNotDistinct&&this.append(" nulls not distinct"),e.primaryKey&&this.append(" primary key"),e.autoIncrement&&(this.append(" "),this.append(this.getAutoIncrement())),e.references&&(this.append(" "),this.visitNode(e.references)),e.check&&(this.append(" "),this.visitNode(e.check)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," "))}getAutoIncrement(){return"auto_increment"}visitReferences(e){this.append("references "),this.visitNode(e.table),this.append(" ("),this.compileList(e.columns),this.append(")"),e.onDelete&&(this.append(" on delete "),this.append(e.onDelete)),e.onUpdate&&(this.append(" on update "),this.append(e.onUpdate))}visitDropTable(e){this.append("drop table "),e.ifExists&&this.append("if exists "),this.visitNode(e.table),e.cascade&&this.append(" cascade")}visitDataType(e){this.append(e.dataType)}visitOrderBy(e){this.append("order by "),this.compileList(e.items)}visitOrderByItem(e){this.visitNode(e.orderBy),e.collation&&(this.append(" "),this.visitNode(e.collation)),e.direction&&(this.append(" "),this.visitNode(e.direction)),e.nulls&&(this.append(" nulls "),this.append(e.nulls))}visitGroupBy(e){this.append("group by "),this.compileList(e.items)}visitGroupByItem(e){this.visitNode(e.groupBy)}visitUpdateQuery(e){let r=this.nodeStack.find(u.is),o=r!==e;if(!o&&e.explain&&(this.visitNode(e.explain),this.append(" ")),o&&!q.is(r)&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("update "),e.top&&(this.visitNode(e.top),this.append(" ")),e.table&&(this.visitNode(e.table),this.append(" ")),this.append("set "),e.updates&&this.compileList(e.updates),e.output&&(this.append(" "),this.visitNode(e.output)),e.from&&(this.append(" "),this.visitNode(e.from)),e.joins){if(!e.from)throw new Error("Joins in an update query are only supported as a part of a PostgreSQL 'update set from join' query. If you want to create a MySQL 'update join set' query, see https://kysely.dev/docs/examples/update/my-sql-joins");this.append(" "),this.compileList(e.joins," ")}e.where&&(this.append(" "),this.visitNode(e.where)),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.returning&&(this.append(" "),this.visitNode(e.returning)),o&&!q.is(r)&&this.append(")"),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitColumnUpdate(e){this.visitNode(e.column),this.append(" = "),this.visitNode(e.value)}visitLimit(e){this.append("limit "),this.visitNode(e.limit)}visitOffset(e){this.append("offset "),this.visitNode(e.offset)}visitOnConflict(e){this.append("on conflict"),e.columns?(this.append(" ("),this.compileList(e.columns),this.append(")")):e.constraint?(this.append(" on constraint "),this.visitNode(e.constraint)):e.indexExpression&&(this.append(" ("),this.visitNode(e.indexExpression),this.append(")")),e.indexWhere&&(this.append(" "),this.visitNode(e.indexWhere)),e.doNothing===!0?this.append(" do nothing"):e.updates&&(this.append(" do update set "),this.compileList(e.updates),e.updateWhere&&(this.append(" "),this.visitNode(e.updateWhere)))}visitOnDuplicateKey(e){this.append("on duplicate key update "),this.compileList(e.updates)}visitCreateIndex(e){this.append("create "),e.unique&&this.append("unique "),this.append("index "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.name),e.table&&(this.append(" on "),this.visitNode(e.table)),e.using&&(this.append(" using "),this.visitNode(e.using)),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.nullsNotDistinct&&this.append(" nulls not distinct"),e.where&&(this.append(" "),this.visitNode(e.where))}visitDropIndex(e){this.append("drop index "),e.ifExists&&this.append("if exists "),this.visitNode(e.name),e.table&&(this.append(" on "),this.visitNode(e.table)),e.cascade&&this.append(" cascade")}visitCreateSchema(e){this.append("create schema "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.schema)}visitDropSchema(e){this.append("drop schema "),e.ifExists&&this.append("if exists "),this.visitNode(e.schema),e.cascade&&this.append(" cascade")}visitPrimaryKeyConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("primary key ("),this.compileList(e.columns),this.append(")"),this.buildDeferrable(e)}buildDeferrable(e){e.deferrable!==void 0&&(e.deferrable?this.append(" deferrable"):this.append(" not deferrable")),e.initiallyDeferred!==void 0&&(e.initiallyDeferred?this.append(" initially deferred"):this.append(" initially immediate"))}visitUniqueConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("unique"),e.nullsNotDistinct&&this.append(" nulls not distinct"),this.append(" ("),this.compileList(e.columns),this.append(")"),this.buildDeferrable(e)}visitCheckConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("check ("),this.visitNode(e.expression),this.append(")")}visitForeignKeyConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("foreign key ("),this.compileList(e.columns),this.append(") "),this.visitNode(e.references),e.onDelete&&(this.append(" on delete "),this.append(e.onDelete)),e.onUpdate&&(this.append(" on update "),this.append(e.onUpdate)),this.buildDeferrable(e)}visitList(e){this.compileList(e.items)}visitWith(e){this.append("with "),e.recursive&&this.append("recursive "),this.compileList(e.expressions)}visitCommonTableExpression(e){this.visitNode(e.name),this.append(" as "),Je(e.materialized)&&(e.materialized||this.append("not "),this.append("materialized ")),this.visitNode(e.expression)}visitCommonTableExpressionName(e){this.visitNode(e.table),e.columns&&(this.append("("),this.compileList(e.columns),this.append(")"))}visitAlterTable(e){this.append("alter table "),this.visitNode(e.table),this.append(" "),e.renameTo&&(this.append("rename to "),this.visitNode(e.renameTo)),e.setSchema&&(this.append("set schema "),this.visitNode(e.setSchema)),e.addConstraint&&this.visitNode(e.addConstraint),e.dropConstraint&&this.visitNode(e.dropConstraint),e.renameConstraint&&this.visitNode(e.renameConstraint),e.columnAlterations&&this.compileColumnAlterations(e.columnAlterations),e.addIndex&&this.visitNode(e.addIndex),e.dropIndex&&this.visitNode(e.dropIndex)}visitAddColumn(e){this.append("add column "),this.visitNode(e.column)}visitRenameColumn(e){this.append("rename column "),this.visitNode(e.column),this.append(" to "),this.visitNode(e.renameTo)}visitDropColumn(e){this.append("drop column "),this.visitNode(e.column)}visitAlterColumn(e){this.append("alter column "),this.visitNode(e.column),this.append(" "),e.dataType&&(this.announcesNewColumnDataType()&&this.append("type "),this.visitNode(e.dataType),e.dataTypeExpression&&(this.append("using "),this.visitNode(e.dataTypeExpression))),e.setDefault&&(this.append("set default "),this.visitNode(e.setDefault)),e.dropDefault&&this.append("drop default"),e.setNotNull&&this.append("set not null"),e.dropNotNull&&this.append("drop not null")}visitModifyColumn(e){this.append("modify column "),this.visitNode(e.column)}visitAddConstraint(e){this.append("add "),this.visitNode(e.constraint)}visitDropConstraint(e){this.append("drop constraint "),e.ifExists&&this.append("if exists "),this.visitNode(e.constraintName),e.modifier==="cascade"?this.append(" cascade"):e.modifier==="restrict"&&this.append(" restrict")}visitRenameConstraint(e){this.append("rename constraint "),this.visitNode(e.oldName),this.append(" to "),this.visitNode(e.newName)}visitSetOperation(e){this.append(e.operator),this.append(" "),e.all&&this.append("all "),this.visitNode(e.expression)}visitCreateView(e){this.append("create "),e.orReplace&&this.append("or replace "),e.materialized&&this.append("materialized "),e.temporary&&this.append("temporary "),this.append("view "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.name),this.append(" "),e.columns&&(this.append("("),this.compileList(e.columns),this.append(") ")),e.as&&(this.append("as "),this.visitNode(e.as))}visitRefreshMaterializedView(e){this.append("refresh materialized view "),e.concurrently&&this.append("concurrently "),this.visitNode(e.name),e.withNoData?this.append(" with no data"):this.append(" with data")}visitDropView(e){this.append("drop "),e.materialized&&this.append("materialized "),this.append("view "),e.ifExists&&this.append("if exists "),this.visitNode(e.name),e.cascade&&this.append(" cascade")}visitGenerated(e){this.append("generated "),e.always&&this.append("always "),e.byDefault&&this.append("by default "),this.append("as "),e.identity&&this.append("identity"),e.expression&&(this.append("("),this.visitNode(e.expression),this.append(")")),e.stored&&this.append(" stored")}visitDefaultValue(e){this.append("default "),this.visitNode(e.defaultValue)}visitSelectModifier(e){e.rawModifier?this.visitNode(e.rawModifier):this.append(is[e.modifier]),e.of&&(this.append(" of "),this.compileList(e.of,", "))}visitCreateType(e){this.append("create type "),this.visitNode(e.name),e.enum&&(this.append(" as enum "),this.visitNode(e.enum))}visitDropType(e){this.append("drop type "),e.ifExists&&this.append("if exists "),this.visitNode(e.name)}visitExplain(e){this.append("explain"),(e.options||e.format)&&(this.append(" "),this.append(this.getLeftExplainOptionsWrapper()),e.options&&(this.visitNode(e.options),e.format&&this.append(this.getExplainOptionsDelimiter())),e.format&&(this.append("format"),this.append(this.getExplainOptionAssignment()),this.append(e.format)),this.append(this.getRightExplainOptionsWrapper()))}visitDefaultInsertValue(e){this.append("default")}visitAggregateFunction(e){this.append(e.func),this.append("("),e.distinct&&this.append("distinct "),this.compileList(e.aggregated),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),this.append(")"),e.withinGroup&&(this.append(" within group ("),this.visitNode(e.withinGroup),this.append(")")),e.filter&&(this.append(" filter("),this.visitNode(e.filter),this.append(")")),e.over&&(this.append(" "),this.visitNode(e.over))}visitOver(e){this.append("over("),e.partitionBy&&(this.visitNode(e.partitionBy),e.orderBy&&this.append(" ")),e.orderBy&&this.visitNode(e.orderBy),this.append(")")}visitPartitionBy(e){this.append("partition by "),this.compileList(e.items)}visitPartitionByItem(e){this.visitNode(e.partitionBy)}visitBinaryOperation(e){this.visitNode(e.leftOperand),this.append(" "),this.visitNode(e.operator),this.append(" "),this.visitNode(e.rightOperand)}visitUnaryOperation(e){this.visitNode(e.operator),this.isMinusOperator(e.operator)||this.append(" "),this.visitNode(e.operand)}isMinusOperator(e){return Z.is(e)&&e.operator==="-"}visitUsing(e){this.append("using "),this.compileList(e.tables)}visitFunction(e){this.append(e.func),this.append("("),this.compileList(e.arguments),this.append(")")}visitCase(e){this.append("case"),e.value&&(this.append(" "),this.visitNode(e.value)),e.when&&(this.append(" "),this.compileList(e.when," ")),e.else&&(this.append(" else "),this.visitNode(e.else)),this.append(" end"),e.isStatement&&this.append(" case")}visitWhen(e){this.append("when "),this.visitNode(e.condition),e.result&&(this.append(" then "),this.visitNode(e.result))}visitJSONReference(e){this.visitNode(e.reference),this.visitNode(e.traversal)}visitJSONPath(e){e.inOperator&&this.visitNode(e.inOperator),this.append("'$");for(let r of e.pathLegs)this.visitNode(r);this.append("'")}visitJSONPathLeg(e){let r=e.type==="ArrayLocation";this.append(r?"[":"."),this.append(String(e.value)),r&&this.append("]")}visitJSONOperatorChain(e){for(let r=0,o=e.values.length;r<o;r++)r===o-1?this.visitNode(e.operator):this.append("->"),this.visitNode(e.values[r])}visitMergeQuery(e){e.with&&(this.visitNode(e.with),this.append(" ")),this.append("merge "),e.top&&(this.visitNode(e.top),this.append(" ")),this.append("into "),this.visitNode(e.into),e.using&&(this.append(" "),this.visitNode(e.using)),e.whens&&(this.append(" "),this.compileList(e.whens," ")),e.returning&&(this.append(" "),this.visitNode(e.returning)),e.output&&(this.append(" "),this.visitNode(e.output)),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitMatched(e){e.not&&this.append("not "),this.append("matched"),e.bySource&&this.append(" by source")}visitAddIndex(e){this.append("add "),e.unique&&this.append("unique "),this.append("index "),this.visitNode(e.name),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.using&&(this.append(" using "),this.visitNode(e.using))}visitCast(e){this.append("cast("),this.visitNode(e.expression),this.append(" as "),this.visitNode(e.dataType),this.append(")")}visitFetch(e){this.append("fetch next "),this.visitNode(e.rowCount),this.append(` rows ${e.modifier}`)}visitOutput(e){this.append("output "),this.compileList(e.selections)}visitTop(e){this.append(`top(${e.expression})`),e.modifiers&&this.append(` ${e.modifiers}`)}visitOrAction(e){this.append(e.action)}visitCollate(e){this.append("collate "),this.visitNode(e.collation)}append(e){this.#e+=e}appendValue(e){this.addParameter(e),this.append(this.getCurrentParameterPlaceholder())}getLeftIdentifierWrapper(){return'"'}getRightIdentifierWrapper(){return'"'}getCurrentParameterPlaceholder(){return"$"+this.numParameters}getLeftExplainOptionsWrapper(){return"("}getExplainOptionAssignment(){return" "}getExplainOptionsDelimiter(){return", "}getRightExplainOptionsWrapper(){return")"}sanitizeIdentifier(e){let r=this.getLeftIdentifierWrapper(),o=this.getRightIdentifierWrapper(),n="";for(let a of e)n+=a,a===r?n+=r:a===o&&(n+=o);return n}sanitizeStringLiteral(e){return e.replace(rs,"''")}addParameter(e){this.#t.push(e)}appendImmediateValue(e){if(v(e))this.appendStringLiteral(e);else if(Ee(e)||Je(e))this.append(e.toString());else if(_e(e))this.append("null");else if(po(e))this.appendImmediateValue(e.toISOString());else if(et(e))this.appendImmediateValue(e.toString());else throw new Error(`invalid immediate value ${e}`)}appendStringLiteral(e){this.append("'"),this.append(this.sanitizeStringLiteral(e)),this.append("'")}sortSelectModifiers(e){return e.sort((r,o)=>r.modifier&&o.modifier?nn[r.modifier]-nn[o.modifier]:1),i(e)}compileColumnAlterations(e){this.compileList(e)}announcesNewColumnDataType(){return!0}},is=i({ForKeyShare:"for key share",ForNoKeyUpdate:"for no key update",ForUpdate:"for update",ForShare:"for share",NoWait:"nowait",SkipLocked:"skip locked",Distinct:"distinct"}),nn=i({ForKeyShare:1,ForNoKeyUpdate:1,ForUpdate:1,ForShare:1,NoWait:2,SkipLocked:2,Distinct:0}),os=i({InnerJoin:"inner join",LeftJoin:"left join",RightJoin:"right join",FullJoin:"full join",CrossJoin:"cross join",LateralInnerJoin:"inner join lateral",LateralLeftJoin:"left join lateral",LateralCrossJoin:"cross join lateral",OuterApply:"outer apply",CrossApply:"cross apply",Using:"using"});var _r=class{async init(){}async acquireConnection(){return new io}async beginTransaction(){}async commitTransaction(){}async rollbackTransaction(){}async releaseConnection(){}async destroy(){}async releaseSavepoint(){}async rollbackToSavepoint(){}async savepoint(){}},io=class{async executeQuery(){return{rows:[]}}async*streamQuery(){}};var ei=class{get supportsCreateIfNotExists(){return!0}get supportsTransactionalDdl(){return!1}get supportsReturning(){return!1}get supportsOutput(){return!1}};var ns=/"/g,ti=class extends Zr{sanitizeIdentifier(e){return e.replace(ns,'""')}};var ss=BigInt("3853314791062309107"),ri=class extends ei{get supportsTransactionalDdl(){return!0}get supportsReturning(){return!0}async acquireMigrationLock(e,r){await A`select pg_advisory_xact_lock(${A.lit(ss)})`.execute(e)}async releaseMigrationLock(e,r){}};function un(t){return new Et({dialect:{createAdapter:()=>new t.Adapter,createDriver:()=>new _r,createIntrospector:()=>null,createQueryCompiler:()=>new t.QueryCompiler},plugins:[...t.noParameters?[new oo]:[]]})}var oo=class{#e=new no;transformQuery(e){return this.#e.transformNode(e.node)}transformResult(e){return Promise.resolve(e.result)}},no=class extends Le{transformPrimitiveValueList(e){return le.create(e.values.map(S.createImmediate))}transformValue(e){return{...super.transformValue(e),immediate:!0}}};function ze(t){let e=t.compile();return{parameters:e.parameters,sql:e.sql}}function so(t,e){let r=as(t,e);return o=>o.where(n=>n.or(r.map(a=>n.and(a.map(([p,c])=>n(p,c===null?"is":Array.isArray(c)?"in":"=",c))))))}function as(t,e){let r=[],o=[],n=U();for(let c of t){let h=[];for(let m of Object.values(e)){let{isInPrimaryKey:K,name:H}=m;K&&(c===t.at(0)&&r.push(n.ref(H)),h.push(ii(c[H]??null,m)))}o.push(r.length===1?h.at(0):sn(h))}let a=r.length===1?r.at(0):sn(r),p=o.length===1?o.at(0):o;return[[[a,p]]]}function sn(t){return A`(${A.join(t,A`, `)})`}function ao(t,e,r){return()=>Array.isArray(e)?e.map(o=>an(o,r)):an(e,r)}function an(t,e){return Object.keys(t).length===0?{[Object.keys(e).at(0)]:A`default`}:Object.entries(t).reduce((r,[o,n])=>({...r,[o]:ii(n,e[o])}),{})}function ii(t,e){let{datatype:r}=e,o=U();return t===null?o.lit(null):r.isNative?o.val(t):o.cast(o.val(t),A.id(r.schema,r.name))}function Ve(t){return un({...t,Adapter:ri,QueryCompiler:ti})}function pn(t,e){let{table:r,rows:o}=t,{name:n,schema:a,columns:p}=r,c=Ve(e),h=Object.keys(p);return ze(c.withSchema(a).insertInto(n).values(ao("insert",o,p)).returning(h).returning(m=>m.cast("ctid","text").as("ctid")))}function dn(t,e){let{pageIndex:r,pageSize:o,sortOrder:n,table:{name:a,schema:p,columns:c},filter:h={kind:"FilterGroup",after:"and",filters:[]}}=t,m=Ve(e),K=Object.keys(c),H=cn(h.filters,c),me=m.withSchema(p).selectFrom(a).where(H).select(E=>E.cast(E.fn.coalesce(E.fn.countAll(),A.lit(0)),"text").as("oid"));return ze(m.with("count",()=>me).withSchema(p).selectFrom([a,"count"]).select(A.ref("count.oid").$castTo().as("oid")).select(E=>E.cast("ctid","text").as("ctid")).select(K).$call(E=>n.reduce((ge,Ue)=>ge.orderBy(Ue.column,Ue.direction),E)).where(H).limit(o).offset(A.lit(BigInt(r)*BigInt(o))))}function us(t,e){return t.kind==="ColumnFilter"?r=>{let{column:o,operator:n,value:a}=t,p=e[o];return r(p.datatype.group==="raw"?r.cast(o,"text"):o,n,ii(a,p))}:cn(t.filters,e)}function cn(t,e){if(t.length===0)return n=>n.lit(!0);let r=[],o=[];for(let n=0;n<t.length;n++)o.push(us(t[n],e)),(n===t.length-1||t[n].after==="or")&&(r.push(o),o=[]);return n=>{let a=r.map(p=>n.and(p.map(c=>c(n))));return n.or(a)}}function mn(t,e){let{changes:r,row:o,table:{columns:n,name:a,schema:p}}=t,c=Ve(e),h=Object.keys(n);return ze(c.withSchema(p).updateTable(a).set(ao("update",r,n)).$call(so([o],n)).returning(h).returning(m=>[m.cast("ctid","text").as("ctid"),m.cast(m.fn("floor",[m(m.fn("extract",[A`epoch from now()`]),"*",1e6)]),"text").as("__ps_updated_at__")]))}function hn(t,e){let{rows:r,table:{columns:o,name:n,schema:a}}=t,p=Ve(e);return ze(p.withSchema(a).deleteFrom(n).$call(so(r,o)))}function ln(t){return A`(select coalesce(json_agg(agg), '[]') from ${t} as agg)`}var ps="r",ds="v",cs=[ps,ds];function fn(t){return ze(Ve(t).selectFrom("pg_catalog.pg_class as cls").innerJoin("pg_catalog.pg_namespace as ns","cls.relnamespace","ns.oid").$call(ms).where("cls.relkind","in",cs).select(e=>["ns.nspname as schema","cls.relname as name",ln(e.selectFrom("pg_catalog.pg_attribute as att").innerJoin("pg_catalog.pg_type as typ","typ.oid","att.atttypid").innerJoin("pg_catalog.pg_namespace as tns","tns.oid","typ.typnamespace").leftJoin("pg_catalog.pg_constraint as pk_con",r=>r.on("pk_con.contype","=","p").onRef("pk_con.conrelid","=","cls.oid").on(o=>o("att.attnum","=",o.fn.any("pk_con.conkey")))).leftJoin("pg_catalog.pg_constraint as fk_con",r=>r.on("fk_con.contype","=","f").onRef("fk_con.conrelid","=","cls.oid").on(o=>o("att.attnum","=",o.fn.any("fk_con.conkey")))).leftJoin("pg_catalog.pg_class as fk_cls","fk_cls.oid","fk_con.confrelid").leftJoin("pg_catalog.pg_namespace as fk_ns","fk_ns.oid","fk_cls.relnamespace").leftJoin("pg_catalog.pg_attribute as fk_att",r=>r.onRef("fk_att.attrelid","=","fk_cls.oid").on(o=>o("fk_att.attnum","=",o.fn.any("fk_con.confkey")))).whereRef("att.attrelid","=","cls.oid").where("att.attnum",">=",0).where("att.attisdropped","!=",!0).select(["att.attname as name","typ.typname as datatype","tns.nspname as datatype_schema","fk_ns.nspname as foreign_key_schema","fk_cls.relname as foreign_key_table","fk_att.attname as foreign_key_column"]).select(r=>[r("pk_con.conkey","is not",null).$castTo().as("pk"),r("att.attgenerated","!=","").$castTo().as("computed"),r("att.attnotnull","!=",!0).$castTo().as("nullable"),r.fn.coalesce(r.selectFrom("pg_catalog.pg_enum as enm").whereRef("enm.enumtypid","=","typ.oid").select(o=>o.fn.jsonAgg(o.ref("enm.enumlabel")).as("o")),A`'[]'`).as("options")])).as("columns")]))}function Nn(){let t=Ve();return ze(t.selectNoFrom(t.fn("current_setting",[A.lit("timezone")]).as("timezone")))}function ms(t){return t.where("ns.nspname","!~","^pg_").where("ns.nspname","!=","information_schema")}function yn(t){let{executor:e,...r}=t;return{defaultSchema:"public",async introspect(o){try{let n=fn(r),a=Nn(),[[p,c],[h,m]]=await Promise.all([e.execute(n,o),e.execute(a,o)]);if(p)return $({error:p,query:n});if(h)return $({error:h,query:a});let K=m[0]?.timezone;return K?[null,hs({tables:c,timezone:K,query:n})]:$({error:new Error("Timezone not found"),query:a})}catch(n){return $({error:n})}},async query(o,n){try{let a=dn(o,r),[p,c]=await e.execute(a,n);return p?$({error:p,query:a}):[null,{filteredRowCount:c[0]?.oid||"0",rows:c,query:a}]}catch(a){return $({error:a})}},async insert(o,n){try{let a=pn(o,r),[p,c]=await e.execute(a,n);return p?$({error:p,query:a}):[null,{rows:c,query:a}]}catch(a){return $({error:a})}},async update(o,n){try{let a=mn(o,r),[p,c]=await e.execute(a,n);if(p)return $({error:p,query:a});let[h]=c;return h?[null,{row:h,query:a}]:$({error:new Error("Update failed"),query:a})}catch(a){return $({error:a})}},async delete(o,n){try{let a=hn(o,r),[p]=await e.execute(a,n);return p?$({error:p,query:a}):[null,{...o,query:a}]}catch(a){return $({error:a})}}}}function hs(t){let{tables:e,timezone:r,query:o}=t;return e.reduce((n,a)=>{let{schemas:p}=n,{columns:c,name:h,schema:m}=a,K=c.reduce((H,me)=>{let{datatype:E,datatype_schema:ge,name:Ue,options:$t,nullable:oi}=me,ni=E.startsWith("_"),si=ni?E.slice(1):E;return{...H,[Ue]:{datatype:{...uo[si]||{group:$t.length>0?"enum":"raw"},isArray:ni,isNative:ge==="pg_catalog",name:ni?`${si}[]`:si,options:$t,schema:ge},isComputed:me.computed,isInPrimaryKey:me.pk,name:Ue,nullable:oi,schema:m,table:h,fkSchema:me.foreign_key_schema,fkTable:me.foreign_key_table,fkColumn:me.foreign_key_column}}},{});return p[m]===void 0&&(p[m]={name:m,tables:{}}),p[m].tables[h]={columns:K,name:h,schema:m},n},{schemas:{public:{tables:{},name:"public"}},timezone:r,filterOperators:ls,query:o})}var ls=["=","!=",">",">=","<","<=","is","is not","like","not like","ilike","not ilike"];function xn(t,e){let{addDelay:r=0,logging:o=!1}=e??{};return{execute:async(n,a)=>{let{abortSignal:p}=a||{},c,h=new Promise((E,ge)=>c=ge);function m(){c(new Gt)}p?.addEventListener("abort",m);let K=typeof r=="function"?r(n):r,H=()=>t.query(n.sql,n.parameters,{rowMode:"object"}),me=K>0?()=>new Promise(E=>setTimeout(E,K)).then(()=>H()):H;try{let E=typeof o=="function"?o(n):o,ge;E&&console.log("PGLiteExecutor: Executing query:",ge=JSON.stringify(n,null,2));let Ue=Date.now(),$t=await Promise.race([me(),h]),oi=Date.now()-Ue;return E&&console.log("PGLiteExecutor: Query executed in",oi,"ms:",ge),[null,$t.rows]}catch(E){return[E]}finally{p?.removeEventListener("abort",m)}}}}function fs(t,e){return yn({executor:xn(t,e)})}
//# sourceMappingURL=data:application/json;base64,