import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{a as y}from"../../chunk-HJIBV67J.js";import{j as m}from"../../chunk-DHZCM7MU.js";import"../../chunk-AQXRIQHE.js";import{e as d}from"../../chunk-GDQBQ7MK.js";d();function G(r,n){let{addDelay:i=0,logging:a=!1}=n??{};return{execute:async(t,P)=>{let{abortSignal:s}=P||{},c,f=new Promise((e,o)=>c=o);function u(){c(new y)}s?.addEventListener("abort",u);let l=typeof i=="function"?i(t):i,p=()=>r.query(t.sql,t.parameters,{rowMode:"object"}),g=l>0?()=>new Promise(e=>setTimeout(e,l)).then(()=>p()):p;try{let e=typeof a=="function"?a(t):a,o;e&&console.log("PGLiteExecutor: Executing query:",o=JSON.stringify(t,null,2));let x=Date.now(),L=await Promise.race([g(),f]),b=Date.now()-x;return e&&console.log("PGLiteExecutor: Query executed in",b,"ms:",o),[null,L.rows]}catch(e){return[e]}finally{s?.removeEventListener("abort",u)}}}}function A(r,n){return m({executor:G(r,n)})}export{A as createPGLiteAdapter,G as createPGLiteExecutor};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vZGF0YS9wZ2xpdGUvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgUEdsaXRlIH0gZnJvbSBcIkBlbGVjdHJpYy1zcWwvcGdsaXRlXCI7XG5cbmltcG9ydCB0eXBlIHsgQWRhcHRlciB9IGZyb20gXCIuLi9hZGFwdGVyXCI7XG5pbXBvcnQgeyBBYm9ydEVycm9yLCB0eXBlIEV4ZWN1dG9yIH0gZnJvbSBcIi4uL2V4ZWN1dG9yXCI7XG5pbXBvcnQgeyBjcmVhdGVQb3N0Z3Jlc0FkYXB0ZXIgfSBmcm9tIFwiLi4vcG9zdGdyZXMtY29yZVwiO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tIFwiLi4vcXVlcnlcIjtcblxuZXhwb3J0IGludGVyZmFjZSBQR0xpdGVFeGVjdXRvck9wdGlvbnMge1xuICAvKipcbiAgICogRGVsYXkgaW4gbWlsbGlzZWNvbmRzIHRvIGFkZCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBxdWVyeS5cbiAgICogVGhpcyBjYW4gYmUgYSBzdGF0aWMgbnVtYmVyIG9yIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgcXVlcnkgYXMgYW4gYXJndW1lbnQgYW5kIHJldHVybnMgYSBudW1iZXIuXG4gICAqXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBzaW11bGF0aW5nIG5ldHdvcmsgbGF0ZW5jeSBvciBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgKi9cbiAgYWRkRGVsYXk/OiBudW1iZXIgfCAoKHF1ZXJ5OiBRdWVyeSkgPT4gbnVtYmVyKTtcblxuICAvKipcbiAgICogV2hldGhlciB0byBsb2cgdGhlIHF1ZXJ5IGFuZCBpdHMgcGFyYW1ldGVycy5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICovXG4gIGxvZ2dpbmc/OiBib29sZWFuIHwgKChxdWVyeTogUXVlcnkpID0+IGJvb2xlYW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUEdMaXRlRXhlY3V0b3IocGdsaXRlOiBQR2xpdGUsIG9wdGlvbnM/OiBQR0xpdGVFeGVjdXRvck9wdGlvbnMpOiBFeGVjdXRvciB7XG4gIGNvbnN0IHsgYWRkRGVsYXkgPSAwLCBsb2dnaW5nID0gZmFsc2UgfSA9IG9wdGlvbnMgPz8ge307XG5cbiAgcmV0dXJuIHtcbiAgICBleGVjdXRlOiBhc3luYyAocXVlcnksIG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHsgYWJvcnRTaWduYWwgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIGxldCBhYm9ydDogKHJlYXNvbj86IHVua25vd24pID0+IHZvaWQ7XG4gICAgICBjb25zdCBhYm9ydGlvblByb21pc2UgPSBuZXcgUHJvbWlzZTxuZXZlcj4oKF8sIHJlamVjdCkgPT4gKGFib3J0ID0gcmVqZWN0KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0TGlzdGVuZXIoKTogdm9pZCB7XG4gICAgICAgIGFib3J0KG5ldyBBYm9ydEVycm9yKCkpO1xuICAgICAgfVxuXG4gICAgICBhYm9ydFNpZ25hbD8uYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0TGlzdGVuZXIpO1xuXG4gICAgICBjb25zdCBhZGRlZERlbGF5ID0gdHlwZW9mIGFkZERlbGF5ID09PSBcImZ1bmN0aW9uXCIgPyBhZGREZWxheShxdWVyeSkgOiBhZGREZWxheTtcblxuICAgICAgY29uc3QgcXVlcnlQR0xpdGUgPSAoKSA9PiBwZ2xpdGUucXVlcnkocXVlcnkuc3FsLCBxdWVyeS5wYXJhbWV0ZXJzIGFzIG5ldmVyW10sIHsgcm93TW9kZTogXCJvYmplY3RcIiB9KTtcblxuICAgICAgY29uc3QgcXVlcnlQR0xpdGVQb3NzaWJseURlbGF5ZWQgPVxuICAgICAgICBhZGRlZERlbGF5ID4gMFxuICAgICAgICAgID8gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgYWRkZWREZWxheSkpLnRoZW4oKCkgPT4gcXVlcnlQR0xpdGUoKSlcbiAgICAgICAgICA6IHF1ZXJ5UEdMaXRlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzaG91bGRMb2cgPSB0eXBlb2YgbG9nZ2luZyA9PT0gXCJmdW5jdGlvblwiID8gbG9nZ2luZyhxdWVyeSkgOiBsb2dnaW5nO1xuXG4gICAgICAgIGxldCBsb2dnYWJsZVF1ZXJ5OiBzdHJpbmc7XG4gICAgICAgIGlmIChzaG91bGRMb2cpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlBHTGl0ZUV4ZWN1dG9yOiBFeGVjdXRpbmcgcXVlcnk6XCIsIChsb2dnYWJsZVF1ZXJ5ID0gSlNPTi5zdHJpbmdpZnkocXVlcnksIG51bGwsIDIpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UucmFjZShbcXVlcnlQR0xpdGVQb3NzaWJseURlbGF5ZWQoKSwgYWJvcnRpb25Qcm9taXNlXSk7XG5cbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gbm93O1xuXG4gICAgICAgIGlmIChzaG91bGRMb2cpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlBHTGl0ZUV4ZWN1dG9yOiBRdWVyeSBleGVjdXRlZCBpblwiLCBkdXJhdGlvbiwgXCJtczpcIiwgbG9nZ2FibGVRdWVyeSEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtudWxsLCByZXN1bHQucm93cyBhcyBuZXZlcl07XG4gICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICByZXR1cm4gW2Vycm9yIGFzIEVycm9yXTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGFib3J0U2lnbmFsPy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1vYmplY3QtdHlwZVxuZXhwb3J0IGludGVyZmFjZSBQR0xpdGVBZGFwdGVyT3B0aW9ucyBleHRlbmRzIFBHTGl0ZUV4ZWN1dG9yT3B0aW9ucyB7fVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUEdMaXRlQWRhcHRlcihwZ2xpdGU6IFBHbGl0ZSwgb3B0aW9ucz86IFBHTGl0ZUFkYXB0ZXJPcHRpb25zKTogQWRhcHRlciB7XG4gIHJldHVybiBjcmVhdGVQb3N0Z3Jlc0FkYXB0ZXIoe1xuICAgIGV4ZWN1dG9yOiBjcmVhdGVQR0xpdGVFeGVjdXRvcihwZ2xpdGUsIG9wdGlvbnMpLFxuICB9KTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7O29LQUFBQSxJQXdCTyxTQUFTQyxFQUFxQkMsRUFBZ0JDLEVBQTJDLENBQzlGLEdBQU0sQ0FBRSxTQUFBQyxFQUFXLEVBQUcsUUFBQUMsRUFBVSxFQUFNLEVBQUlGLEdBQVcsQ0FBQyxFQUV0RCxNQUFPLENBQ0wsUUFBUyxNQUFPRyxFQUFPSCxJQUFZLENBQ2pDLEdBQU0sQ0FBRSxZQUFBSSxDQUFZLEVBQUlKLEdBQVcsQ0FBQyxFQUVoQ0ssRUFDRUMsRUFBa0IsSUFBSSxRQUFlLENBQUNDLEVBQUdDLElBQVlILEVBQVFHLENBQU8sRUFFMUUsU0FBU0MsR0FBc0IsQ0FDN0JKLEVBQU0sSUFBSUssQ0FBWSxDQUN4QixDQUVBTixHQUFhLGlCQUFpQixRQUFTSyxDQUFhLEVBRXBELElBQU1FLEVBQWEsT0FBT1YsR0FBYSxXQUFhQSxFQUFTRSxDQUFLLEVBQUlGLEVBRWhFVyxFQUFjLElBQU1iLEVBQU8sTUFBTUksRUFBTSxJQUFLQSxFQUFNLFdBQXVCLENBQUUsUUFBUyxRQUFTLENBQUMsRUFFOUZVLEVBQ0pGLEVBQWEsRUFDVCxJQUFNLElBQUksUUFBU0csR0FBWSxXQUFXQSxFQUFTSCxDQUFVLENBQUMsRUFBRSxLQUFLLElBQU1DLEVBQVksQ0FBQyxFQUN4RkEsRUFFTixHQUFJLENBQ0YsSUFBTUcsRUFBWSxPQUFPYixHQUFZLFdBQWFBLEVBQVFDLENBQUssRUFBSUQsRUFFL0RjLEVBQ0FELEdBQ0YsUUFBUSxJQUFJLG1DQUFxQ0MsRUFBZ0IsS0FBSyxVQUFVYixFQUFPLEtBQU0sQ0FBQyxDQUFFLEVBR2xHLElBQU1jLEVBQU0sS0FBSyxJQUFJLEVBRWZDLEVBQVMsTUFBTSxRQUFRLEtBQUssQ0FBQ0wsRUFBMkIsRUFBR1AsQ0FBZSxDQUFDLEVBRTNFYSxFQUFXLEtBQUssSUFBSSxFQUFJRixFQUU5QixPQUFJRixHQUNGLFFBQVEsSUFBSSxvQ0FBcUNJLEVBQVUsTUFBT0gsQ0FBYyxFQUczRSxDQUFDLEtBQU1FLEVBQU8sSUFBYSxDQUNwQyxPQUFTRSxFQUFnQixDQUN2QixNQUFPLENBQUNBLENBQWMsQ0FDeEIsUUFBRSxDQUNBaEIsR0FBYSxvQkFBb0IsUUFBU0ssQ0FBYSxDQUN6RCxDQUNGLENBQ0YsQ0FDRixDQUtPLFNBQVNZLEVBQW9CdEIsRUFBZ0JDLEVBQXlDLENBQzNGLE9BQU9zQixFQUFzQixDQUMzQixTQUFVeEIsRUFBcUJDLEVBQVFDLENBQU8sQ0FDaEQsQ0FBQyxDQUNIIiwKICAibmFtZXMiOiBbImluaXRfZGVmaW5lX0FDQ0VMRVJBVEVfU0NIRU1BX0JZX1BST1ZJREVSIiwgImNyZWF0ZVBHTGl0ZUV4ZWN1dG9yIiwgInBnbGl0ZSIsICJvcHRpb25zIiwgImFkZERlbGF5IiwgImxvZ2dpbmciLCAicXVlcnkiLCAiYWJvcnRTaWduYWwiLCAiYWJvcnQiLCAiYWJvcnRpb25Qcm9taXNlIiwgIl8iLCAicmVqZWN0IiwgImFib3J0TGlzdGVuZXIiLCAiQWJvcnRFcnJvciIsICJhZGRlZERlbGF5IiwgInF1ZXJ5UEdMaXRlIiwgInF1ZXJ5UEdMaXRlUG9zc2libHlEZWxheWVkIiwgInJlc29sdmUiLCAic2hvdWxkTG9nIiwgImxvZ2dhYmxlUXVlcnkiLCAibm93IiwgInJlc3VsdCIsICJkdXJhdGlvbiIsICJlcnJvciIsICJjcmVhdGVQR0xpdGVBZGFwdGVyIiwgImNyZWF0ZVBvc3RncmVzQWRhcHRlciJdCn0K