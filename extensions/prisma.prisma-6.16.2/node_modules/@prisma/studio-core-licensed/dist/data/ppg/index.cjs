"use strict";var d=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var C=(e,t)=>{for(var r in t)d(e,r,{get:t[r],enumerable:!0})},S=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of A(t))!x.call(e,s)&&s!==r&&d(e,s,{get:()=>t[s],enumerable:!(n=w(t,s))||n.enumerable});return e};var H=e=>S(d({},"__esModule",{value:!0}),e);var D={};C(D,{createPrismaPostgresHttpClient:()=>v,deserializeRawResult:()=>y});module.exports=H(D);var p={postgres:{encoded:"ZGF0YXNvdXJjZSBkYiB7CiAgICBwcm92aWRlciA9ICJwb3N0Z3JlcyIKICAgIHVybCAgICAgID0gZW52KCJEQVRBQkFTRV9VUkwiKQp9CiAgICAKZ2VuZXJhdG9yIGNsaWVudCB7CiAgICBwcm92aWRlciA9ICJwcmlzbWEtY2xpZW50LWpzIgp9",hash:"54195896aeafa3318ca33f5a8bb44c6b4d89c368cb15288f3bd5ace35a3f9227"},postgresql:{encoded:"ZGF0YXNvdXJjZSBkYiB7CiAgICBwcm92aWRlciA9ICJwb3N0Z3Jlc3FsIgogICAgdXJsICAgICAgPSBlbnYoIkRBVEFCQVNFX1VSTCIpCn0KICAgIApnZW5lcmF0b3IgY2xpZW50IHsKICAgIHByb3ZpZGVyID0gInByaXNtYS1jbGllbnQtanMiCn0=",hash:"d2898eb0d71a62767c6497d5c37718cf28c13e6144b1c97f6849ff0f76e958fb"}};function y(e,t=q){let{columns:r,rows:n,types:s}=e,o=[],c=b(r);for(let a=0,R=n.length;a<R;a++){let u=n[a],i={...c};for(let l=0,P=u.length;l<P;l++){let m=r[l];i[m]=t(u[l],s[l],m)}o.push(i)}return o}function q(e,t,r){return e}function b(e){let t={};for(let r=0,n=e.length;r<n;r++)t[e[r]]=null;return t}var I=["postgres","postgresql"],g="accelerate.prisma-data.net",h=p;function f(e){let{provider:t}=e;if(t!=="postgresql"&&!I.includes(t))throw new Error(`Invalid provider: ${t}`);let r=T(e);return{execute:k(e,r)}}function T(e){let{host:t,engineHash:r,clientVersion:n,provider:s,apiKey:o}=e,a=`${t===g?"https":"http"}://${t||g}/${n}/${E(s).hash}`,R=e.fetch||fetch,u={Authorization:`Bearer ${o}`,"Prisma-Engine-Hash":r};return i=>R(`${a}/${i.path}`,{body:i.body,headers:u,method:i.method,signal:i.signal})}async function O(e,t,r){let n=await r({body:E(e.provider).encoded,method:"PUT",path:"schema",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to upload schema to query engine: ${n.statusText}`)}}function E(e){return e==="postgresql"?h.postgres:h[e]}async function Q(e,t,r){let n=await r({body:JSON.stringify(e),method:"POST",path:"graphql",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to execute query: ${n.statusText}`)}return await n.json()}function k(e,t){let{resultDeserializerFn:r=y}=e,n=null;return async(s,o)=>{try{await(n||=O(e,o,t));let{data:c,errors:a}=await Q({action:"queryRaw",query:{arguments:{parameters:s.parameters,query:s.sql},selection:{}}},o,t);return a?[new AggregateError(a,"Errors occurred while executing the query")]:[null,r(c.queryRaw)]}catch(c){return[c]}}}function v(e){let{url:t,fetch:r,resultDeserializerFn:n}=e,{host:s,searchParams:o}=new URL(t);return f({apiKey:o.get("api_key")??"<missing_api_key>",clientVersion:"6.5.0",engineHash:"173f8d54f8d52e692c7e27e72a88314ec7aeff60",fetch:r,host:s,provider:"postgres",resultDeserializerFn:n})}
//# sourceMappingURL=data:application/json;base64,