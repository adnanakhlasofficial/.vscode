import { Q as Query, E as Either, a as QueryResult } from '../query-DTHJwENg.cjs';
export { A as Adapter, h as AdapterBaseOptions, f as AdapterDeleteDetails, m as AdapterDeleteOptions, w as AdapterDeleteResult, b as AdapterError, c as AdapterInsertDetails, k as AdapterInsertOptions, u as AdapterInsertResult, i as AdapterIntrospectOptions, n as AdapterIntrospectResult, d as AdapterQueryDetails, j as AdapterQueryOptions, t as AdapterQueryResult, e as AdapterUpdateDetails, l as AdapterUpdateOptions, v as AdapterUpdateResult, y as BigIntString, C as Column, p as ColumnFilter, D as DataType, o as DataTypeGroup, q as FilterGroup, F as FilterOperator, N as NumericString, S as Schema, s as SortDirection, r as SortOrderItem, T as Table, g as applyInferredRowFilters, x as createAdapterError } from '../query-DTHJwENg.cjs';
import 'kysely';

interface Executor {
    execute<Q extends Query>(query: Q, options?: ExecuteOptions): Promise<Either<Error, QueryResult<Q>>>;
}
interface ExecuteOptions {
    abortSignal?: AbortSignal;
}
declare class AbortError extends Error {
    constructor();
}
declare function getAbortResult(): [AbortError];

export { AbortError, Either, type ExecuteOptions, type Executor, Query, QueryResult, getAbortResult };
