import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{b as a}from"../../chunk-HJIBV67J.js";import{j as y,l as m,m as P}from"../../chunk-DHZCM7MU.js";import"../../chunk-AQXRIQHE.js";import{e as g}from"../../chunk-GDQBQ7MK.js";g();function q(r,t){let{logging:e=!1}=t??{};return{execute:async(o,S)=>{let{abortSignal:n}=S||{},u,i;try{let s=typeof e=="function"?e(o):e,l;if(s&&console.log("PostgresJSExecutor: Executing query:",l=JSON.stringify(o,null,2)),n?.aborted)return a();let x=Date.now(),d,v=new Promise(c=>d=c);if(n){if(i=await r.reserve(),n.aborted)return a();let c=await E(i);if(n.aborted)return a();c!=null&&n.addEventListener("abort",u=()=>d(c))}let f=await Promise.race([(i||r).unsafe(o.sql,o.parameters),v]),p=Date.now()-x;return typeof f!="object"?(b(r,f),s&&console.log("PostgresJSExecutor: Query cancelled after",p,"ms:",l),a()):(s&&console.log("PostgresJSExecutor: Query executed in",p,"ms:",l),[null,f])}catch(s){return[s]}finally{u&&n?.removeEventListener("abort",u),i?.release()}}}}function O(r,t){return y({executor:q(r,t)})}async function b(r,t){let e=P(t);try{await r.unsafe(e.sql,e.parameters)}catch(o){console.error("Failed to cancel query:",o)}}async function E(r){let t=m();try{let[e]=await r.unsafe(t.sql,t.parameters);return e?.pid}catch(e){console.error("Failed to get connection PID:",e);return}}export{O as createPostgresJSAdapter,q as createPostgresJSExecutor};
//# sourceMappingURL=data:application/json;base64,