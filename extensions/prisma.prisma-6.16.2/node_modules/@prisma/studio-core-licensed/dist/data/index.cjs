"use strict";var Ie=Object.defineProperty;var yt=Object.getOwnPropertyDescriptor;var Ot=Object.getOwnPropertyNames;var wt=Object.prototype.hasOwnProperty;var gt=(r,e)=>{for(var t in e)Ie(r,t,{get:e[t],enumerable:!0})},bt=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of Ot(e))!wt.call(r,s)&&s!==t&&Ie(r,s,{get:()=>e[s],enumerable:!(n=yt(e,s))||n.enumerable});return r};var kt=r=>bt(Ie({},"__esModule",{value:!0}),r);var Xt={};gt(Xt,{applyInferredRowFilters:()=>Nt});module.exports=kt(Xt);function j(r){return typeof r>"u"||r===void 0}function c(r){return typeof r=="string"}function ee(r){return typeof r=="number"}function he(r){return typeof r=="boolean"}function Ne(r){return r===null}function xe(r){return typeof r=="bigint"}function S(r){return typeof r=="function"}function v(r){return typeof r=="object"&&r!==null}function o(r){return Object.freeze(r)}function me(r){return g(r)?r:[r]}function g(r){return Array.isArray(r)}var u=o({is(r){return r.kind==="IdentifierNode"},create(r){return o({kind:"IdentifierNode",name:r})}});var fe=o({is(r){return r.kind==="SchemableIdentifierNode"},create(r){return o({kind:"SchemableIdentifierNode",identifier:u.create(r)})},createWithSchema(r,e){return o({kind:"SchemableIdentifierNode",schema:u.create(r),identifier:u.create(e)})}});var y=o({is(r){return r.kind==="AliasNode"},create(r,e){return o({kind:"AliasNode",node:r,alias:e})}});var W=o({is(r){return r.kind==="TableNode"},create(r){return o({kind:"TableNode",table:fe.create(r)})},createWithSchema(r,e){return o({kind:"TableNode",table:fe.createWithSchema(r,e)})}});function p(r){return v(r)&&S(r.toOperationNode)}function ye(r){return v(r)&&"expressionType"in r&&p(r)}function wr(r){return v(r)&&"expression"in r&&c(r.alias)&&p(r)}var F=o({is(r){return r.kind==="SelectModifierNode"},create(r,e){return o({kind:"SelectModifierNode",modifier:r,of:e})},createWithExpression(r){return o({kind:"SelectModifierNode",rawModifier:r})}});var b=o({is(r){return r.kind==="AndNode"},create(r,e){return o({kind:"AndNode",left:r,right:e})}});var R=o({is(r){return r.kind==="OrNode"},create(r,e){return o({kind:"OrNode",left:r,right:e})}});var Oe=o({is(r){return r.kind==="OnNode"},create(r){return o({kind:"OnNode",on:r})},cloneWithOperation(r,e,t){return o({...r,on:e==="And"?b.create(r.on,t):R.create(r.on,t)})}});var P=o({is(r){return r.kind==="JoinNode"},create(r,e){return o({kind:"JoinNode",joinType:r,table:e,on:void 0})},createWithOn(r,e,t){return o({kind:"JoinNode",joinType:r,table:e,on:Oe.create(t)})},cloneWithOn(r,e){return o({...r,on:r.on?Oe.cloneWithOperation(r.on,"And",e):Oe.create(e)})}});var J=o({is(r){return r.kind==="BinaryOperationNode"},create(r,e,t){return o({kind:"BinaryOperationNode",leftOperand:r,operator:e,rightOperand:t})}});var St=["=","==","!=","<>",">",">=","<","<=","in","not in","is","is not","like","not like","match","ilike","not ilike","@>","<@","^@","&&","?","?&","?|","!<","!>","<=>","!~","~","~*","!~*","@@","@@@","!!","<->","regexp","is distinct from","is not distinct from"],Wt=["+","-","*","/","%","^","&","|","#","<<",">>"],gr=["->","->>"],Rt=[...St,...Wt,"&&","||"],Ct=["exists","not exists"],Bt=["not","-",...Ct],br=[...Rt,...gr,...Bt,"between","between symmetric"],C=o({is(r){return r.kind==="OperatorNode"},create(r){return o({kind:"OperatorNode",operator:r})}});function $e(r){return c(r)&&gr.includes(r)}var we=o({is(r){return r.kind==="ColumnNode"},create(r){return o({kind:"ColumnNode",column:u.create(r)})}});var ge=o({is(r){return r.kind==="SelectAllNode"},create(){return o({kind:"SelectAllNode"})}});var re=o({is(r){return r.kind==="ReferenceNode"},create(r,e){return o({kind:"ReferenceNode",table:e,column:r})},createSelectAll(r){return o({kind:"ReferenceNode",table:r,column:ge.create()})}});function be(r){return v(r)&&p(r)&&c(r.dynamicReference)}var B=o({is(r){return r.kind==="OrderByItemNode"},create(r,e){return o({kind:"OrderByItemNode",orderBy:r,direction:e})},cloneWith(r,e){return o({...r,...e})}});var N=o({is(r){return r.kind==="RawNode"},create(r,e){return o({kind:"RawNode",sqlFragments:o(r),parameters:o(e)})},createWithSql(r){return N.create([r],[])},createWithChild(r){return N.create(["",""],[r])},createWithChildren(r){return N.create(new Array(r.length+1).fill(""),r)}});var kr={is(r){return r.kind==="CollateNode"},create(r){return o({kind:"CollateNode",collation:u.create(r)})}};var ke=class r{#e;constructor(e){this.#e=o(e)}desc(){return new r({node:B.cloneWith(this.#e.node,{direction:N.createWithSql("desc")})})}asc(){return new r({node:B.cloneWith(this.#e.node,{direction:N.createWithSql("asc")})})}nullsLast(){return new r({node:B.cloneWith(this.#e.node,{nulls:"last"})})}nullsFirst(){return new r({node:B.cloneWith(this.#e.node,{nulls:"first"})})}collate(e){return new r({node:B.cloneWith(this.#e.node,{collation:kr.create(e)})})}toOperationNode(){return this.#e.node}};var Sr=new Set;function te(r){Sr.has(r)||(Sr.add(r),console.log(r))}function At(r){return r==="asc"||r==="desc"}function K(r){if(r.length===2)return[Ge(r[0],r[1])];if(r.length===1){let[e]=r;return Array.isArray(e)?(te("orderBy(array) is deprecated, use multiple orderBy calls instead."),e.map(t=>Ge(t))):[Ge(e)]}throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${r.length}`)}function Ge(r,e){let t=Et(r);if(B.is(t)){if(e)throw new Error("Cannot specify direction twice!");return t}return Wr(t,e)}function Et(r){if(H(r))return U(r);if(be(r))return r.toOperationNode();let[e,t]=r.split(" ");return t?(te("`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead."),Wr(A(e),t)):A(r)}function Wr(r,e){if(typeof e=="string"){if(!At(e))throw new Error(`Invalid order by direction: ${e}`);return B.create(r,N.createWithSql(e))}if(ye(e))return te("`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead."),B.create(r,e.toOperationNode());let t=B.create(r);return e?e(new ke({node:t})).toOperationNode():t}var oe=o({is(r){return r.kind==="JSONReferenceNode"},create(r,e){return o({kind:"JSONReferenceNode",reference:r,traversal:e})},cloneWithTraversal(r,e){return o({...r,traversal:e})}});var Se=o({is(r){return r.kind==="JSONOperatorChainNode"},create(r){return o({kind:"JSONOperatorChainNode",operator:r,values:o([])})},cloneWithValue(r,e){return o({...r,values:o([...r.values,e])})}});var I=o({is(r){return r.kind==="JSONPathNode"},create(r){return o({kind:"JSONPathNode",inOperator:r,pathLegs:o([])})},cloneWithLeg(r,e){return o({...r,pathLegs:o([...r.pathLegs,e])})}});function Tt(r){return c(r)?A(r):r.toOperationNode()}function Q(r){return g(r)?r.map(e=>w(e)):[w(r)]}function w(r){return H(r)?U(r):Tt(r)}function Rr(r,e){let t=A(r);if($e(e))return oe.create(t,Se.create(C.create(e)));let n=e.slice(0,-1);if($e(n))return oe.create(t,I.create(C.create(n)));throw new Error(`Invalid JSON operator: ${e}`)}function A(r){let e=".";if(!r.includes(e))return re.create(we.create(r));let t=r.split(e).map(Br);if(t.length===3)return Lt(t);if(t.length===2)return Ft(t);throw new Error(`invalid column reference ${r}`)}function Cr(r){let e=" as ";if(r.includes(e)){let[t,n]=r.split(e).map(Br);return y.create(A(t),u.create(n))}else return A(r)}function Lt(r){let[e,t,n]=r;return re.create(we.create(n),W.createWithSchema(e,t))}function Ft(r){let[e,t]=r;return re.create(we.create(t),W.create(e))}function Br(r){return r.trim()}var Ar=o({is(r){return r.kind==="PrimitiveValueListNode"},create(r){return o({kind:"PrimitiveValueListNode",values:o([...r])})}});var je=o({is(r){return r.kind==="ValueListNode"},create(r){return o({kind:"ValueListNode",values:o(r)})}});var k=o({is(r){return r.kind==="ValueNode"},create(r){return o({kind:"ValueNode",value:r})},createImmediate(r){return o({kind:"ValueNode",value:r,immediate:!0})}});function Er(r){return g(r)?Dt(r):l(r)}function l(r){return H(r)?U(r):k.create(r)}function We(r){return ee(r)||he(r)||Ne(r)}function ue(r){if(!We(r))throw new Error(`unsafe immediate value ${JSON.stringify(r)}`);return k.createImmediate(r)}function Dt(r){return r.some(H)?je.create(r.map(e=>l(e))):Ar.create(r)}var $=o({is(r){return r.kind==="ParensNode"},create(r){return o({kind:"ParensNode",node:r})}});function x(r){if(r.length===3)return Re(r[0],r[1],r[2]);if(r.length===1)return l(r[0]);throw new Error(`invalid arguments: ${JSON.stringify(r)}`)}function Re(r,e,t){return vt(e)&&Lr(t)?J.create(w(r),Ke(e),k.createImmediate(t)):J.create(w(r),Ke(e),Er(t))}function V(r,e,t){return J.create(w(r),Ke(e),w(t))}function He(r,e){return Ce(Object.entries(r).filter(([,t])=>!j(t)).map(([t,n])=>Re(t,Lr(n)?"is":"=",n)),e)}function Ce(r,e,t=!0){let n=e==="and"?b.create:R.create;if(r.length===0)return J.create(k.createImmediate(1),C.create("="),k.createImmediate(e==="and"?1:0));let s=Tr(r[0]);for(let m=1;m<r.length;++m)s=n(s,Tr(r[m]));return r.length>1&&t?$.create(s):s}function vt(r){return r==="is"||r==="is not"}function Lr(r){return Ne(r)||he(r)}function Ke(r){if(c(r)&&br.includes(r))return C.create(r);if(p(r))return r.toOperationNode();throw new Error(`invalid operator ${JSON.stringify(r)}`)}function Tr(r){return p(r)?r.toOperationNode():r}var M=o({is(r){return r.kind==="OrderByNode"},create(r){return o({kind:"OrderByNode",items:o([...r])})},cloneWithItems(r,e){return o({...r,items:o([...r.items,...e])})}});var Ye=o({is(r){return r.kind==="PartitionByNode"},create(r){return o({kind:"PartitionByNode",items:o(r)})},cloneWithItems(r,e){return o({...r,items:o([...r.items,...e])})}});var de=o({is(r){return r.kind==="OverNode"},create(){return o({kind:"OverNode"})},cloneWithOrderByItems(r,e){return o({...r,orderBy:r.orderBy?M.cloneWithItems(r.orderBy,e):M.create(e)})},cloneWithPartitionByItems(r,e){return o({...r,partitionBy:r.partitionBy?Ye.cloneWithItems(r.partitionBy,e):Ye.create(e)})}});var Y=o({is(r){return r.kind==="FromNode"},create(r){return o({kind:"FromNode",froms:o(r)})},cloneWithFroms(r,e){return o({...r,froms:o([...r.froms,...e])})}});var Xe=o({is(r){return r.kind==="GroupByNode"},create(r){return o({kind:"GroupByNode",items:o(r)})},cloneWithItems(r,e){return o({...r,items:o([...r.items,...e])})}});var qe=o({is(r){return r.kind==="HavingNode"},create(r){return o({kind:"HavingNode",having:r})},cloneWithOperation(r,e,t){return o({...r,having:e==="And"?b.create(r.having,t):R.create(r.having,t)})}});var Fr=o({is(r){return r.kind==="InsertQueryNode"},create(r,e,t){return o({kind:"InsertQueryNode",into:r,...e&&{with:e},replace:t})},createWithoutInto(){return o({kind:"InsertQueryNode"})},cloneWith(r,e){return o({...r,...e})}});var Be=o({is(r){return r.kind==="ListNode"},create(r){return o({kind:"ListNode",items:o(r)})}});var Dr=o({is(r){return r.kind==="UpdateQueryNode"},create(r,e){return o({kind:"UpdateQueryNode",table:r.length===1?r[0]:Be.create(r),...e&&{with:e}})},createWithoutTable(){return o({kind:"UpdateQueryNode"})},cloneWithFromItems(r,e){return o({...r,from:r.from?Y.cloneWithFroms(r.from,e):Y.create(e)})},cloneWithUpdates(r,e){return o({...r,updates:r.updates?o([...r.updates,...e]):e})},cloneWithLimit(r,e){return o({...r,limit:e})}});var Ze=o({is(r){return r.kind==="UsingNode"},create(r){return o({kind:"UsingNode",tables:o(r)})},cloneWithTables(r,e){return o({...r,tables:o([...r.tables,...e])})}});var vr=o({is(r){return r.kind==="DeleteQueryNode"},create(r,e){return o({kind:"DeleteQueryNode",from:Y.create(r),...e&&{with:e}})},cloneWithOrderByItems:(r,e)=>f.cloneWithOrderByItems(r,e),cloneWithoutOrderBy:r=>f.cloneWithoutOrderBy(r),cloneWithLimit(r,e){return o({...r,limit:e})},cloneWithoutLimit(r){return o({...r,limit:void 0})},cloneWithUsing(r,e){return o({...r,using:r.using!==void 0?Ze.cloneWithTables(r.using,e):Ze.create(e)})}});var G=o({is(r){return r.kind==="WhereNode"},create(r){return o({kind:"WhereNode",where:r})},cloneWithOperation(r,e,t){return o({...r,where:e==="And"?b.create(r.where,t):R.create(r.where,t)})}});var _e=o({is(r){return r.kind==="ReturningNode"},create(r){return o({kind:"ReturningNode",selections:o(r)})},cloneWithSelections(r,e){return o({...r,selections:r.selections?o([...r.selections,...e]):o(e)})}});var Pr=o({is(r){return r.kind==="ExplainNode"},create(r,e){return o({kind:"ExplainNode",format:r,options:e})}});var X=o({is(r){return r.kind==="WhenNode"},create(r){return o({kind:"WhenNode",condition:r})},cloneWithResult(r,e){return o({...r,result:e})}});var Qr=o({is(r){return r.kind==="MergeQueryNode"},create(r,e){return o({kind:"MergeQueryNode",into:r,...e&&{with:e}})},cloneWithUsing(r,e){return o({...r,using:e})},cloneWithWhen(r,e){return o({...r,whens:r.whens?o([...r.whens,e]):o([e])})},cloneWithThen(r,e){return o({...r,whens:r.whens?o([...r.whens.slice(0,-1),X.cloneWithResult(r.whens[r.whens.length-1],e)]):void 0})}});var er=o({is(r){return r.kind==="OutputNode"},create(r){return o({kind:"OutputNode",selections:o(r)})},cloneWithSelections(r,e){return o({...r,selections:r.selections?o([...r.selections,...e]):o(e)})}});var f=o({is(r){return d.is(r)||Fr.is(r)||Dr.is(r)||vr.is(r)||Qr.is(r)},cloneWithEndModifier(r,e){return o({...r,endModifiers:r.endModifiers?o([...r.endModifiers,e]):o([e])})},cloneWithWhere(r,e){return o({...r,where:r.where?G.cloneWithOperation(r.where,"And",e):G.create(e)})},cloneWithJoin(r,e){return o({...r,joins:r.joins?o([...r.joins,e]):o([e])})},cloneWithReturning(r,e){return o({...r,returning:r.returning?_e.cloneWithSelections(r.returning,e):_e.create(e)})},cloneWithoutReturning(r){return o({...r,returning:void 0})},cloneWithoutWhere(r){return o({...r,where:void 0})},cloneWithExplain(r,e,t){return o({...r,explain:Pr.create(e,t?.toOperationNode())})},cloneWithTop(r,e){return o({...r,top:e})},cloneWithOutput(r,e){return o({...r,output:r.output?er.cloneWithSelections(r.output,e):er.create(e)})},cloneWithOrderByItems(r,e){return o({...r,orderBy:r.orderBy?M.cloneWithItems(r.orderBy,e):M.create(e)})},cloneWithoutOrderBy(r){return o({...r,orderBy:void 0})}});var d=o({is(r){return r.kind==="SelectQueryNode"},create(r){return o({kind:"SelectQueryNode",...r&&{with:r}})},createFrom(r,e){return o({kind:"SelectQueryNode",from:Y.create(r),...e&&{with:e}})},cloneWithSelections(r,e){return o({...r,selections:r.selections?o([...r.selections,...e]):o(e)})},cloneWithDistinctOn(r,e){return o({...r,distinctOn:r.distinctOn?o([...r.distinctOn,...e]):o(e)})},cloneWithFrontModifier(r,e){return o({...r,frontModifiers:r.frontModifiers?o([...r.frontModifiers,e]):o([e])})},cloneWithOrderByItems:(r,e)=>f.cloneWithOrderByItems(r,e),cloneWithGroupByItems(r,e){return o({...r,groupBy:r.groupBy?Xe.cloneWithItems(r.groupBy,e):Xe.create(e)})},cloneWithLimit(r,e){return o({...r,limit:e})},cloneWithOffset(r,e){return o({...r,offset:e})},cloneWithFetch(r,e){return o({...r,fetch:e})},cloneWithHaving(r,e){return o({...r,having:r.having?qe.cloneWithOperation(r.having,"And",e):qe.create(e)})},cloneWithSetOperations(r,e){return o({...r,setOperations:r.setOperations?o([...r.setOperations,...e]):o([...e])})},cloneWithoutSelections(r){return o({...r,selections:[]})},cloneWithoutLimit(r){return o({...r,limit:void 0})},cloneWithoutOffset(r){return o({...r,offset:void 0})},cloneWithoutOrderBy:r=>f.cloneWithoutOrderBy(r),cloneWithoutGroupBy(r){return o({...r,groupBy:void 0})}});var Ae=class r{#e;constructor(e){this.#e=o(e)}on(...e){return new r({...this.#e,joinNode:P.cloneWithOn(this.#e.joinNode,x(e))})}onRef(e,t,n){return new r({...this.#e,joinNode:P.cloneWithOn(this.#e.joinNode,V(e,t,n))})}onTrue(){return new r({...this.#e,joinNode:P.cloneWithOn(this.#e.joinNode,N.createWithSql("true"))})}$call(e){return e(this)}toOperationNode(){return this.#e.joinNode}};var Vr=o({is(r){return r.kind==="PartitionByItemNode"},create(r){return o({kind:"PartitionByItemNode",partitionBy:r})}});function Mr(r){return Q(r).map(Vr.create)}var Ee=class r{#e;constructor(e){this.#e=o(e)}orderBy(...e){return new r({overNode:de.cloneWithOrderByItems(this.#e.overNode,K(e))})}clearOrderBy(){return new r({overNode:f.cloneWithoutOrderBy(this.#e.overNode)})}partitionBy(e){return new r({overNode:de.cloneWithPartitionByItems(this.#e.overNode,Mr(e))})}$call(e){return e(this)}toOperationNode(){return this.#e.overNode}};var ne=o({is(r){return r.kind==="SelectionNode"},create(r){return o({kind:"SelectionNode",selection:r})},createSelectAll(){return o({kind:"SelectionNode",selection:ge.create()})},createSelectAllFromTable(r){return o({kind:"SelectionNode",selection:re.createSelectAll(r)})}});function rr(r){return S(r)?rr(r(E())):g(r)?r.map(e=>zr(e)):[zr(r)]}function zr(r){return c(r)?ne.create(Cr(r)):be(r)?ne.create(r.toOperationNode()):ne.create(Le(r))}function Te(r){return r?Array.isArray(r)?r.map(Jr):[Jr(r)]:[ne.createSelectAll()]}function Jr(r){if(c(r))return ne.createSelectAllFromTable(O(r));throw new Error(`invalid value selectAll expression: ${JSON.stringify(r)}`)}var Fe=class extends Error{node;constructor(e){super("no result"),this.node=e}};function Ur(r){return Object.prototype.hasOwnProperty.call(r,"prototype")}var Ir=o({is(r){return r.kind==="TopNode"},create(r,e){return o({kind:"TopNode",expression:r,modifiers:e})}});function $r(r,e){if(!ee(r)&&!xe(r))throw new Error(`Invalid top expression: ${r}`);if(!j(e)&&!Pt(e))throw new Error(`Invalid top modifiers: ${e}`);return Ir.create(r,e)}function Pt(r){return r==="percent"||r==="with ties"||r==="percent with ties"}var Gr=o({is(r){return r.kind==="LimitNode"},create(r){return o({kind:"LimitNode",limit:r})}});var jr=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"];function Kr(r){let e="";for(let t=0;t<r;++t)e+=Qt();return e}function Qt(){return jr[~~(Math.random()*jr.length)]}function T(){return new tr}var tr=class{#e;get queryId(){return this.#e===void 0&&(this.#e=Kr(8)),this.#e}};var pe=class{nodeStack=[];#e=o({AliasNode:this.transformAlias.bind(this),ColumnNode:this.transformColumn.bind(this),IdentifierNode:this.transformIdentifier.bind(this),SchemableIdentifierNode:this.transformSchemableIdentifier.bind(this),RawNode:this.transformRaw.bind(this),ReferenceNode:this.transformReference.bind(this),SelectQueryNode:this.transformSelectQuery.bind(this),SelectionNode:this.transformSelection.bind(this),TableNode:this.transformTable.bind(this),FromNode:this.transformFrom.bind(this),SelectAllNode:this.transformSelectAll.bind(this),AndNode:this.transformAnd.bind(this),OrNode:this.transformOr.bind(this),ValueNode:this.transformValue.bind(this),ValueListNode:this.transformValueList.bind(this),PrimitiveValueListNode:this.transformPrimitiveValueList.bind(this),ParensNode:this.transformParens.bind(this),JoinNode:this.transformJoin.bind(this),OperatorNode:this.transformOperator.bind(this),WhereNode:this.transformWhere.bind(this),InsertQueryNode:this.transformInsertQuery.bind(this),DeleteQueryNode:this.transformDeleteQuery.bind(this),ReturningNode:this.transformReturning.bind(this),CreateTableNode:this.transformCreateTable.bind(this),AddColumnNode:this.transformAddColumn.bind(this),ColumnDefinitionNode:this.transformColumnDefinition.bind(this),DropTableNode:this.transformDropTable.bind(this),DataTypeNode:this.transformDataType.bind(this),OrderByNode:this.transformOrderBy.bind(this),OrderByItemNode:this.transformOrderByItem.bind(this),GroupByNode:this.transformGroupBy.bind(this),GroupByItemNode:this.transformGroupByItem.bind(this),UpdateQueryNode:this.transformUpdateQuery.bind(this),ColumnUpdateNode:this.transformColumnUpdate.bind(this),LimitNode:this.transformLimit.bind(this),OffsetNode:this.transformOffset.bind(this),OnConflictNode:this.transformOnConflict.bind(this),OnDuplicateKeyNode:this.transformOnDuplicateKey.bind(this),CreateIndexNode:this.transformCreateIndex.bind(this),DropIndexNode:this.transformDropIndex.bind(this),ListNode:this.transformList.bind(this),PrimaryKeyConstraintNode:this.transformPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.transformUniqueConstraint.bind(this),ReferencesNode:this.transformReferences.bind(this),CheckConstraintNode:this.transformCheckConstraint.bind(this),WithNode:this.transformWith.bind(this),CommonTableExpressionNode:this.transformCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.transformCommonTableExpressionName.bind(this),HavingNode:this.transformHaving.bind(this),CreateSchemaNode:this.transformCreateSchema.bind(this),DropSchemaNode:this.transformDropSchema.bind(this),AlterTableNode:this.transformAlterTable.bind(this),DropColumnNode:this.transformDropColumn.bind(this),RenameColumnNode:this.transformRenameColumn.bind(this),AlterColumnNode:this.transformAlterColumn.bind(this),ModifyColumnNode:this.transformModifyColumn.bind(this),AddConstraintNode:this.transformAddConstraint.bind(this),DropConstraintNode:this.transformDropConstraint.bind(this),RenameConstraintNode:this.transformRenameConstraint.bind(this),ForeignKeyConstraintNode:this.transformForeignKeyConstraint.bind(this),CreateViewNode:this.transformCreateView.bind(this),RefreshMaterializedViewNode:this.transformRefreshMaterializedView.bind(this),DropViewNode:this.transformDropView.bind(this),GeneratedNode:this.transformGenerated.bind(this),DefaultValueNode:this.transformDefaultValue.bind(this),OnNode:this.transformOn.bind(this),ValuesNode:this.transformValues.bind(this),SelectModifierNode:this.transformSelectModifier.bind(this),CreateTypeNode:this.transformCreateType.bind(this),DropTypeNode:this.transformDropType.bind(this),ExplainNode:this.transformExplain.bind(this),DefaultInsertValueNode:this.transformDefaultInsertValue.bind(this),AggregateFunctionNode:this.transformAggregateFunction.bind(this),OverNode:this.transformOver.bind(this),PartitionByNode:this.transformPartitionBy.bind(this),PartitionByItemNode:this.transformPartitionByItem.bind(this),SetOperationNode:this.transformSetOperation.bind(this),BinaryOperationNode:this.transformBinaryOperation.bind(this),UnaryOperationNode:this.transformUnaryOperation.bind(this),UsingNode:this.transformUsing.bind(this),FunctionNode:this.transformFunction.bind(this),CaseNode:this.transformCase.bind(this),WhenNode:this.transformWhen.bind(this),JSONReferenceNode:this.transformJSONReference.bind(this),JSONPathNode:this.transformJSONPath.bind(this),JSONPathLegNode:this.transformJSONPathLeg.bind(this),JSONOperatorChainNode:this.transformJSONOperatorChain.bind(this),TupleNode:this.transformTuple.bind(this),MergeQueryNode:this.transformMergeQuery.bind(this),MatchedNode:this.transformMatched.bind(this),AddIndexNode:this.transformAddIndex.bind(this),CastNode:this.transformCast.bind(this),FetchNode:this.transformFetch.bind(this),TopNode:this.transformTop.bind(this),OutputNode:this.transformOutput.bind(this),OrActionNode:this.transformOrAction.bind(this),CollateNode:this.transformCollate.bind(this)});transformNode(e,t){if(!e)return e;this.nodeStack.push(e);let n=this.transformNodeImpl(e,t);return this.nodeStack.pop(),o(n)}transformNodeImpl(e,t){return this.#e[e.kind](e,t)}transformNodeList(e,t){return e&&o(e.map(n=>this.transformNode(n,t)))}transformSelectQuery(e,t){return{kind:"SelectQueryNode",from:this.transformNode(e.from,t),selections:this.transformNodeList(e.selections,t),distinctOn:this.transformNodeList(e.distinctOn,t),joins:this.transformNodeList(e.joins,t),groupBy:this.transformNode(e.groupBy,t),orderBy:this.transformNode(e.orderBy,t),where:this.transformNode(e.where,t),frontModifiers:this.transformNodeList(e.frontModifiers,t),endModifiers:this.transformNodeList(e.endModifiers,t),limit:this.transformNode(e.limit,t),offset:this.transformNode(e.offset,t),with:this.transformNode(e.with,t),having:this.transformNode(e.having,t),explain:this.transformNode(e.explain,t),setOperations:this.transformNodeList(e.setOperations,t),fetch:this.transformNode(e.fetch,t),top:this.transformNode(e.top,t)}}transformSelection(e,t){return{kind:"SelectionNode",selection:this.transformNode(e.selection,t)}}transformColumn(e,t){return{kind:"ColumnNode",column:this.transformNode(e.column,t)}}transformAlias(e,t){return{kind:"AliasNode",node:this.transformNode(e.node,t),alias:this.transformNode(e.alias,t)}}transformTable(e,t){return{kind:"TableNode",table:this.transformNode(e.table,t)}}transformFrom(e,t){return{kind:"FromNode",froms:this.transformNodeList(e.froms,t)}}transformReference(e,t){return{kind:"ReferenceNode",column:this.transformNode(e.column,t),table:this.transformNode(e.table,t)}}transformAnd(e,t){return{kind:"AndNode",left:this.transformNode(e.left,t),right:this.transformNode(e.right,t)}}transformOr(e,t){return{kind:"OrNode",left:this.transformNode(e.left,t),right:this.transformNode(e.right,t)}}transformValueList(e,t){return{kind:"ValueListNode",values:this.transformNodeList(e.values,t)}}transformParens(e,t){return{kind:"ParensNode",node:this.transformNode(e.node,t)}}transformJoin(e,t){return{kind:"JoinNode",joinType:e.joinType,table:this.transformNode(e.table,t),on:this.transformNode(e.on,t)}}transformRaw(e,t){return{kind:"RawNode",sqlFragments:o([...e.sqlFragments]),parameters:this.transformNodeList(e.parameters,t)}}transformWhere(e,t){return{kind:"WhereNode",where:this.transformNode(e.where,t)}}transformInsertQuery(e,t){return{kind:"InsertQueryNode",into:this.transformNode(e.into,t),columns:this.transformNodeList(e.columns,t),values:this.transformNode(e.values,t),returning:this.transformNode(e.returning,t),onConflict:this.transformNode(e.onConflict,t),onDuplicateKey:this.transformNode(e.onDuplicateKey,t),endModifiers:this.transformNodeList(e.endModifiers,t),with:this.transformNode(e.with,t),ignore:e.ignore,orAction:this.transformNode(e.orAction,t),replace:e.replace,explain:this.transformNode(e.explain,t),defaultValues:e.defaultValues,top:this.transformNode(e.top,t),output:this.transformNode(e.output,t)}}transformValues(e,t){return{kind:"ValuesNode",values:this.transformNodeList(e.values,t)}}transformDeleteQuery(e,t){return{kind:"DeleteQueryNode",from:this.transformNode(e.from,t),using:this.transformNode(e.using,t),joins:this.transformNodeList(e.joins,t),where:this.transformNode(e.where,t),returning:this.transformNode(e.returning,t),endModifiers:this.transformNodeList(e.endModifiers,t),with:this.transformNode(e.with,t),orderBy:this.transformNode(e.orderBy,t),limit:this.transformNode(e.limit,t),explain:this.transformNode(e.explain,t),top:this.transformNode(e.top,t),output:this.transformNode(e.output,t)}}transformReturning(e,t){return{kind:"ReturningNode",selections:this.transformNodeList(e.selections,t)}}transformCreateTable(e,t){return{kind:"CreateTableNode",table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t),constraints:this.transformNodeList(e.constraints,t),temporary:e.temporary,ifNotExists:e.ifNotExists,onCommit:e.onCommit,frontModifiers:this.transformNodeList(e.frontModifiers,t),endModifiers:this.transformNodeList(e.endModifiers,t),selectQuery:this.transformNode(e.selectQuery,t)}}transformColumnDefinition(e,t){return{kind:"ColumnDefinitionNode",column:this.transformNode(e.column,t),dataType:this.transformNode(e.dataType,t),references:this.transformNode(e.references,t),primaryKey:e.primaryKey,autoIncrement:e.autoIncrement,unique:e.unique,notNull:e.notNull,unsigned:e.unsigned,defaultTo:this.transformNode(e.defaultTo,t),check:this.transformNode(e.check,t),generated:this.transformNode(e.generated,t),frontModifiers:this.transformNodeList(e.frontModifiers,t),endModifiers:this.transformNodeList(e.endModifiers,t),nullsNotDistinct:e.nullsNotDistinct,identity:e.identity,ifNotExists:e.ifNotExists}}transformAddColumn(e,t){return{kind:"AddColumnNode",column:this.transformNode(e.column,t)}}transformDropTable(e,t){return{kind:"DropTableNode",table:this.transformNode(e.table,t),ifExists:e.ifExists,cascade:e.cascade}}transformOrderBy(e,t){return{kind:"OrderByNode",items:this.transformNodeList(e.items,t)}}transformOrderByItem(e,t){return{kind:"OrderByItemNode",orderBy:this.transformNode(e.orderBy,t),direction:this.transformNode(e.direction,t),collation:this.transformNode(e.collation,t),nulls:e.nulls}}transformGroupBy(e,t){return{kind:"GroupByNode",items:this.transformNodeList(e.items,t)}}transformGroupByItem(e,t){return{kind:"GroupByItemNode",groupBy:this.transformNode(e.groupBy,t)}}transformUpdateQuery(e,t){return{kind:"UpdateQueryNode",table:this.transformNode(e.table,t),from:this.transformNode(e.from,t),joins:this.transformNodeList(e.joins,t),where:this.transformNode(e.where,t),updates:this.transformNodeList(e.updates,t),returning:this.transformNode(e.returning,t),endModifiers:this.transformNodeList(e.endModifiers,t),with:this.transformNode(e.with,t),explain:this.transformNode(e.explain,t),limit:this.transformNode(e.limit,t),top:this.transformNode(e.top,t),output:this.transformNode(e.output,t),orderBy:this.transformNode(e.orderBy,t)}}transformColumnUpdate(e,t){return{kind:"ColumnUpdateNode",column:this.transformNode(e.column,t),value:this.transformNode(e.value,t)}}transformLimit(e,t){return{kind:"LimitNode",limit:this.transformNode(e.limit,t)}}transformOffset(e,t){return{kind:"OffsetNode",offset:this.transformNode(e.offset,t)}}transformOnConflict(e,t){return{kind:"OnConflictNode",columns:this.transformNodeList(e.columns,t),constraint:this.transformNode(e.constraint,t),indexExpression:this.transformNode(e.indexExpression,t),indexWhere:this.transformNode(e.indexWhere,t),updates:this.transformNodeList(e.updates,t),updateWhere:this.transformNode(e.updateWhere,t),doNothing:e.doNothing}}transformOnDuplicateKey(e,t){return{kind:"OnDuplicateKeyNode",updates:this.transformNodeList(e.updates,t)}}transformCreateIndex(e,t){return{kind:"CreateIndexNode",name:this.transformNode(e.name,t),table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t),unique:e.unique,using:this.transformNode(e.using,t),ifNotExists:e.ifNotExists,where:this.transformNode(e.where,t),nullsNotDistinct:e.nullsNotDistinct}}transformList(e,t){return{kind:"ListNode",items:this.transformNodeList(e.items,t)}}transformDropIndex(e,t){return{kind:"DropIndexNode",name:this.transformNode(e.name,t),table:this.transformNode(e.table,t),ifExists:e.ifExists,cascade:e.cascade}}transformPrimaryKeyConstraint(e,t){return{kind:"PrimaryKeyConstraintNode",columns:this.transformNodeList(e.columns,t),name:this.transformNode(e.name,t),deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformUniqueConstraint(e,t){return{kind:"UniqueConstraintNode",columns:this.transformNodeList(e.columns,t),name:this.transformNode(e.name,t),nullsNotDistinct:e.nullsNotDistinct,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformForeignKeyConstraint(e,t){return{kind:"ForeignKeyConstraintNode",columns:this.transformNodeList(e.columns,t),references:this.transformNode(e.references,t),name:this.transformNode(e.name,t),onDelete:e.onDelete,onUpdate:e.onUpdate,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformSetOperation(e,t){return{kind:"SetOperationNode",operator:e.operator,expression:this.transformNode(e.expression,t),all:e.all}}transformReferences(e,t){return{kind:"ReferencesNode",table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t),onDelete:e.onDelete,onUpdate:e.onUpdate}}transformCheckConstraint(e,t){return{kind:"CheckConstraintNode",expression:this.transformNode(e.expression,t),name:this.transformNode(e.name,t)}}transformWith(e,t){return{kind:"WithNode",expressions:this.transformNodeList(e.expressions,t),recursive:e.recursive}}transformCommonTableExpression(e,t){return{kind:"CommonTableExpressionNode",name:this.transformNode(e.name,t),materialized:e.materialized,expression:this.transformNode(e.expression,t)}}transformCommonTableExpressionName(e,t){return{kind:"CommonTableExpressionNameNode",table:this.transformNode(e.table,t),columns:this.transformNodeList(e.columns,t)}}transformHaving(e,t){return{kind:"HavingNode",having:this.transformNode(e.having,t)}}transformCreateSchema(e,t){return{kind:"CreateSchemaNode",schema:this.transformNode(e.schema,t),ifNotExists:e.ifNotExists}}transformDropSchema(e,t){return{kind:"DropSchemaNode",schema:this.transformNode(e.schema,t),ifExists:e.ifExists,cascade:e.cascade}}transformAlterTable(e,t){return{kind:"AlterTableNode",table:this.transformNode(e.table,t),renameTo:this.transformNode(e.renameTo,t),setSchema:this.transformNode(e.setSchema,t),columnAlterations:this.transformNodeList(e.columnAlterations,t),addConstraint:this.transformNode(e.addConstraint,t),dropConstraint:this.transformNode(e.dropConstraint,t),renameConstraint:this.transformNode(e.renameConstraint,t),addIndex:this.transformNode(e.addIndex,t),dropIndex:this.transformNode(e.dropIndex,t)}}transformDropColumn(e,t){return{kind:"DropColumnNode",column:this.transformNode(e.column,t)}}transformRenameColumn(e,t){return{kind:"RenameColumnNode",column:this.transformNode(e.column,t),renameTo:this.transformNode(e.renameTo,t)}}transformAlterColumn(e,t){return{kind:"AlterColumnNode",column:this.transformNode(e.column,t),dataType:this.transformNode(e.dataType,t),dataTypeExpression:this.transformNode(e.dataTypeExpression,t),setDefault:this.transformNode(e.setDefault,t),dropDefault:e.dropDefault,setNotNull:e.setNotNull,dropNotNull:e.dropNotNull}}transformModifyColumn(e,t){return{kind:"ModifyColumnNode",column:this.transformNode(e.column,t)}}transformAddConstraint(e,t){return{kind:"AddConstraintNode",constraint:this.transformNode(e.constraint,t)}}transformDropConstraint(e,t){return{kind:"DropConstraintNode",constraintName:this.transformNode(e.constraintName,t),ifExists:e.ifExists,modifier:e.modifier}}transformRenameConstraint(e,t){return{kind:"RenameConstraintNode",oldName:this.transformNode(e.oldName,t),newName:this.transformNode(e.newName,t)}}transformCreateView(e,t){return{kind:"CreateViewNode",name:this.transformNode(e.name,t),temporary:e.temporary,orReplace:e.orReplace,ifNotExists:e.ifNotExists,materialized:e.materialized,columns:this.transformNodeList(e.columns,t),as:this.transformNode(e.as,t)}}transformRefreshMaterializedView(e,t){return{kind:"RefreshMaterializedViewNode",name:this.transformNode(e.name,t),concurrently:e.concurrently,withNoData:e.withNoData}}transformDropView(e,t){return{kind:"DropViewNode",name:this.transformNode(e.name,t),ifExists:e.ifExists,materialized:e.materialized,cascade:e.cascade}}transformGenerated(e,t){return{kind:"GeneratedNode",byDefault:e.byDefault,always:e.always,identity:e.identity,stored:e.stored,expression:this.transformNode(e.expression,t)}}transformDefaultValue(e,t){return{kind:"DefaultValueNode",defaultValue:this.transformNode(e.defaultValue,t)}}transformOn(e,t){return{kind:"OnNode",on:this.transformNode(e.on,t)}}transformSelectModifier(e,t){return{kind:"SelectModifierNode",modifier:e.modifier,rawModifier:this.transformNode(e.rawModifier,t),of:this.transformNodeList(e.of,t)}}transformCreateType(e,t){return{kind:"CreateTypeNode",name:this.transformNode(e.name,t),enum:this.transformNode(e.enum,t)}}transformDropType(e,t){return{kind:"DropTypeNode",name:this.transformNode(e.name,t),ifExists:e.ifExists}}transformExplain(e,t){return{kind:"ExplainNode",format:e.format,options:this.transformNode(e.options,t)}}transformSchemableIdentifier(e,t){return{kind:"SchemableIdentifierNode",schema:this.transformNode(e.schema,t),identifier:this.transformNode(e.identifier,t)}}transformAggregateFunction(e,t){return{kind:"AggregateFunctionNode",func:e.func,aggregated:this.transformNodeList(e.aggregated,t),distinct:e.distinct,orderBy:this.transformNode(e.orderBy,t),withinGroup:this.transformNode(e.withinGroup,t),filter:this.transformNode(e.filter,t),over:this.transformNode(e.over,t)}}transformOver(e,t){return{kind:"OverNode",orderBy:this.transformNode(e.orderBy,t),partitionBy:this.transformNode(e.partitionBy,t)}}transformPartitionBy(e,t){return{kind:"PartitionByNode",items:this.transformNodeList(e.items,t)}}transformPartitionByItem(e,t){return{kind:"PartitionByItemNode",partitionBy:this.transformNode(e.partitionBy,t)}}transformBinaryOperation(e,t){return{kind:"BinaryOperationNode",leftOperand:this.transformNode(e.leftOperand,t),operator:this.transformNode(e.operator,t),rightOperand:this.transformNode(e.rightOperand,t)}}transformUnaryOperation(e,t){return{kind:"UnaryOperationNode",operator:this.transformNode(e.operator,t),operand:this.transformNode(e.operand,t)}}transformUsing(e,t){return{kind:"UsingNode",tables:this.transformNodeList(e.tables,t)}}transformFunction(e,t){return{kind:"FunctionNode",func:e.func,arguments:this.transformNodeList(e.arguments,t)}}transformCase(e,t){return{kind:"CaseNode",value:this.transformNode(e.value,t),when:this.transformNodeList(e.when,t),else:this.transformNode(e.else,t),isStatement:e.isStatement}}transformWhen(e,t){return{kind:"WhenNode",condition:this.transformNode(e.condition,t),result:this.transformNode(e.result,t)}}transformJSONReference(e,t){return{kind:"JSONReferenceNode",reference:this.transformNode(e.reference,t),traversal:this.transformNode(e.traversal,t)}}transformJSONPath(e,t){return{kind:"JSONPathNode",inOperator:this.transformNode(e.inOperator,t),pathLegs:this.transformNodeList(e.pathLegs,t)}}transformJSONPathLeg(e,t){return{kind:"JSONPathLegNode",type:e.type,value:e.value}}transformJSONOperatorChain(e,t){return{kind:"JSONOperatorChainNode",operator:this.transformNode(e.operator,t),values:this.transformNodeList(e.values,t)}}transformTuple(e,t){return{kind:"TupleNode",values:this.transformNodeList(e.values,t)}}transformMergeQuery(e,t){return{kind:"MergeQueryNode",into:this.transformNode(e.into,t),using:this.transformNode(e.using,t),whens:this.transformNodeList(e.whens,t),with:this.transformNode(e.with,t),top:this.transformNode(e.top,t),endModifiers:this.transformNodeList(e.endModifiers,t),output:this.transformNode(e.output,t),returning:this.transformNode(e.returning,t)}}transformMatched(e,t){return{kind:"MatchedNode",not:e.not,bySource:e.bySource}}transformAddIndex(e,t){return{kind:"AddIndexNode",name:this.transformNode(e.name,t),columns:this.transformNodeList(e.columns,t),unique:e.unique,using:this.transformNode(e.using,t),ifNotExists:e.ifNotExists}}transformCast(e,t){return{kind:"CastNode",expression:this.transformNode(e.expression,t),dataType:this.transformNode(e.dataType,t)}}transformFetch(e,t){return{kind:"FetchNode",rowCount:this.transformNode(e.rowCount,t),modifier:e.modifier}}transformTop(e,t){return{kind:"TopNode",expression:e.expression,modifiers:e.modifiers}}transformOutput(e,t){return{kind:"OutputNode",selections:this.transformNodeList(e.selections,t)}}transformDataType(e,t){return e}transformSelectAll(e,t){return e}transformIdentifier(e,t){return e}transformValue(e,t){return e}transformPrimitiveValueList(e,t){return e}transformOperator(e,t){return e}transformDefaultInsertValue(e,t){return e}transformOrAction(e,t){return e}transformCollate(e,t){return e}};var Vt=o({AlterTableNode:!0,CreateIndexNode:!0,CreateSchemaNode:!0,CreateTableNode:!0,CreateTypeNode:!0,CreateViewNode:!0,RefreshMaterializedViewNode:!0,DeleteQueryNode:!0,DropIndexNode:!0,DropSchemaNode:!0,DropTableNode:!0,DropTypeNode:!0,DropViewNode:!0,InsertQueryNode:!0,RawNode:!0,SelectQueryNode:!0,UpdateQueryNode:!0,MergeQueryNode:!0}),Mt={json_agg:!0,to_json:!0},De=class extends pe{#e;#r=new Set;#t=new Set;constructor(e){super(),this.#e=e}transformNodeImpl(e,t){if(!this.#s(e))return super.transformNodeImpl(e,t);let n=this.#m(e);for(let h of n)this.#t.add(h);let s=this.#a(e);for(let h of s)this.#r.add(h);let m=super.transformNodeImpl(e,t);for(let h of s)this.#r.delete(h);for(let h of n)this.#t.delete(h);return m}transformSchemableIdentifier(e,t){let n=super.transformSchemableIdentifier(e,t);return n.schema||!this.#r.has(e.identifier.name)?n:{...n,schema:u.create(this.#e)}}transformReferences(e,t){let n=super.transformReferences(e,t);return n.table.table.schema?n:{...n,table:W.createWithSchema(this.#e,n.table.table.identifier.name)}}transformAggregateFunction(e,t){return{...super.transformAggregateFunction({...e,aggregated:[]},t),aggregated:this.#n(e,t,"aggregated")}}transformFunction(e,t){return{...super.transformFunction({...e,arguments:[]},t),arguments:this.#n(e,t,"arguments")}}#n(e,t,n){return Mt[e.func]?e[n].map(s=>!W.is(s)||s.table.schema?this.transformNode(s,t):{...s,table:this.transformIdentifier(s.table.identifier,t)}):this.transformNodeList(e[n],t)}#s(e){return e.kind in Vt}#a(e){let t=new Set;if("name"in e&&e.name&&fe.is(e.name)&&this.#i(e.name,t),"from"in e&&e.from)for(let n of e.from.froms)this.#o(n,t);if("into"in e&&e.into&&this.#o(e.into,t),"table"in e&&e.table&&this.#o(e.table,t),"joins"in e&&e.joins)for(let n of e.joins)this.#o(n.table,t);return"using"in e&&e.using&&this.#o(e.using,t),t}#m(e){let t=new Set;return"with"in e&&e.with&&this.#f(e.with,t),t}#o(e,t){if(W.is(e))this.#i(e.table,t);else if(y.is(e)&&W.is(e.node))this.#i(e.node.table,t);else if(Be.is(e))for(let n of e.items)this.#o(n,t)}#i(e,t){let n=e.identifier.name;!this.#r.has(n)&&!this.#t.has(n)&&t.add(n)}#f(e,t){for(let n of e.expressions){let s=n.name.table.table.identifier.name;this.#t.has(s)||t.add(s)}}};var ve=class{#e;constructor(e){this.#e=new De(e)}transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}async transformResult(e){return e.result}};var ce=class{#e;#r;#t;constructor(){this.#e=new Promise((e,t)=>{this.#t=t,this.#r=e})}get promise(){return this.#e}resolve=e=>{this.#r&&this.#r(e)};reject=e=>{this.#t&&this.#t(e)}};async function Hr(r){let e=new ce,t=new ce;return r.provideConnection(async n=>(e.resolve(n),await t.promise)).catch(n=>e.reject(n)),o({connection:await e.promise,release:t.resolve})}var zt=o([]),Pe=class{#e;constructor(e=zt){this.#e=e}get plugins(){return this.#e}transformQuery(e,t){for(let n of this.#e){let s=n.transformQuery({node:e,queryId:t});if(s.kind===e.kind)e=s;else throw new Error(["KyselyPlugin.transformQuery must return a node","of the same kind that was given to it.",`The plugin was given a ${e.kind}`,`but it returned a ${s.kind}`].join(" "))}return e}async executeQuery(e,t){return await this.provideConnection(async n=>{let s=await n.executeQuery(e);return"numUpdatedOrDeletedRows"in s&&te("kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`."),await this.#r(s,t)})}async*stream(e,t,n){let{connection:s,release:m}=await Hr(this);try{for await(let h of s.streamQuery(e,t))yield await this.#r(h,n)}finally{m()}}async#r(e,t){for(let n of this.#e)e=await n.transformResult({result:e,queryId:t});return e}};var or=class r extends Pe{get adapter(){throw new Error("this query cannot be compiled to SQL")}compileQuery(){throw new Error("this query cannot be compiled to SQL")}provideConnection(){throw new Error("this query cannot be executed")}withConnectionProvider(){throw new Error("this query cannot have a connection provider")}withPlugin(e){return new r([...this.plugins,e])}withPlugins(e){return new r([...this.plugins,...e])}withPluginAtFront(e){return new r([e,...this.plugins])}withoutPlugins(){return new r([])}},Qe=new or;function Yr(r,e){return new Ae({joinNode:P.create(r,q(e))})}function Xr(){return new Ee({overNode:de.create()})}function qr(r,e){if(e.length===3)return Ut(r,e[0],e[1],e[2]);if(e.length===2)return Jt(r,e[0],e[1]);if(e.length===1)return It(r,e[0]);throw new Error("not implemented")}function Jt(r,e,t){return t(Yr(r,e)).toOperationNode()}function Ut(r,e,t,n){return P.createWithOn(r,q(e),V(t,"=",n))}function It(r,e){return P.create(r,q(e))}var Zr=o({is(r){return r.kind==="OffsetNode"},create(r){return o({kind:"OffsetNode",offset:r})}});var _r=o({is(r){return r.kind==="GroupByItemNode"},create(r){return o({kind:"GroupByItemNode",groupBy:r})}});function et(r){return r=S(r)?r(E()):r,Q(r).map(_r.create)}var rt=o({is(r){return r.kind==="SetOperationNode"},create(r,e,t){return o({kind:"SetOperationNode",operator:r,expression:e,all:t})}});function Z(r,e,t){return S(e)&&(e=e(Ve())),g(e)||(e=[e]),e.map(n=>rt.create(r,U(n),t))}var a=class r{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new le(this,e)}or(...e){return new ir(R.create(this.#e,x(e)))}and(...e){return new sr(b.create(this.#e,x(e)))}$castTo(){return new r(this.#e)}$notNull(){return new r(this.#e)}toOperationNode(){return this.#e}},le=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}toOperationNode(){return y.create(this.#e.toOperationNode(),p(this.#r)?this.#r.toOperationNode():u.create(this.#r))}},ir=class r{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new le(this,e)}or(...e){return new r(R.create(this.#e,x(e)))}$castTo(){return new r(this.#e)}toOperationNode(){return $.create(this.#e)}},sr=class r{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new le(this,e)}and(...e){return new r(b.create(this.#e,x(e)))}$castTo(){return new r(this.#e)}toOperationNode(){return $.create(this.#e)}};var tt={is(r){return r.kind==="FetchNode"},create(r,e){return{kind:"FetchNode",rowCount:k.create(r),modifier:e}}};function ot(r,e){if(!ee(r)&&!xe(r))throw new Error(`Invalid fetch row count: ${r}`);if(!$t(e))throw new Error(`Invalid fetch modifier: ${e}`);return tt.create(r,e)}function $t(r){return r==="only"||r==="with ties"}var ar=class r{#e;constructor(e){this.#e=o(e)}get expressionType(){}get isSelectQueryBuilder(){return!0}where(...e){return new r({...this.#e,queryNode:f.cloneWithWhere(this.#e.queryNode,x(e))})}whereRef(e,t,n){return new r({...this.#e,queryNode:f.cloneWithWhere(this.#e.queryNode,V(e,t,n))})}having(...e){return new r({...this.#e,queryNode:d.cloneWithHaving(this.#e.queryNode,x(e))})}havingRef(e,t,n){return new r({...this.#e,queryNode:d.cloneWithHaving(this.#e.queryNode,V(e,t,n))})}select(e){return new r({...this.#e,queryNode:d.cloneWithSelections(this.#e.queryNode,rr(e))})}distinctOn(e){return new r({...this.#e,queryNode:d.cloneWithDistinctOn(this.#e.queryNode,Q(e))})}modifyFront(e){return new r({...this.#e,queryNode:d.cloneWithFrontModifier(this.#e.queryNode,F.createWithExpression(e.toOperationNode()))})}modifyEnd(e){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.createWithExpression(e.toOperationNode()))})}distinct(){return new r({...this.#e,queryNode:d.cloneWithFrontModifier(this.#e.queryNode,F.create("Distinct"))})}forUpdate(e){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.create("ForUpdate",e?me(e).map(O):void 0))})}forShare(e){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.create("ForShare",e?me(e).map(O):void 0))})}forKeyShare(e){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.create("ForKeyShare",e?me(e).map(O):void 0))})}forNoKeyUpdate(e){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.create("ForNoKeyUpdate",e?me(e).map(O):void 0))})}skipLocked(){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.create("SkipLocked"))})}noWait(){return new r({...this.#e,queryNode:f.cloneWithEndModifier(this.#e.queryNode,F.create("NoWait"))})}selectAll(e){return new r({...this.#e,queryNode:d.cloneWithSelections(this.#e.queryNode,Te(e))})}innerJoin(...e){return this.#r("InnerJoin",e)}leftJoin(...e){return this.#r("LeftJoin",e)}rightJoin(...e){return this.#r("RightJoin",e)}fullJoin(...e){return this.#r("FullJoin",e)}crossJoin(...e){return this.#r("CrossJoin",e)}innerJoinLateral(...e){return this.#r("LateralInnerJoin",e)}leftJoinLateral(...e){return this.#r("LateralLeftJoin",e)}crossJoinLateral(...e){return this.#r("LateralCrossJoin",e)}crossApply(...e){return this.#r("CrossApply",e)}outerApply(...e){return this.#r("OuterApply",e)}#r(e,t){return new r({...this.#e,queryNode:f.cloneWithJoin(this.#e.queryNode,qr(e,t))})}orderBy(...e){return new r({...this.#e,queryNode:f.cloneWithOrderByItems(this.#e.queryNode,K(e))})}groupBy(e){return new r({...this.#e,queryNode:d.cloneWithGroupByItems(this.#e.queryNode,et(e))})}limit(e){return new r({...this.#e,queryNode:d.cloneWithLimit(this.#e.queryNode,Gr.create(l(e)))})}offset(e){return new r({...this.#e,queryNode:d.cloneWithOffset(this.#e.queryNode,Zr.create(l(e)))})}fetch(e,t="only"){return new r({...this.#e,queryNode:d.cloneWithFetch(this.#e.queryNode,ot(e,t))})}top(e,t){return new r({...this.#e,queryNode:f.cloneWithTop(this.#e.queryNode,$r(e,t))})}union(e){return new r({...this.#e,queryNode:d.cloneWithSetOperations(this.#e.queryNode,Z("union",e,!1))})}unionAll(e){return new r({...this.#e,queryNode:d.cloneWithSetOperations(this.#e.queryNode,Z("union",e,!0))})}intersect(e){return new r({...this.#e,queryNode:d.cloneWithSetOperations(this.#e.queryNode,Z("intersect",e,!1))})}intersectAll(e){return new r({...this.#e,queryNode:d.cloneWithSetOperations(this.#e.queryNode,Z("intersect",e,!0))})}except(e){return new r({...this.#e,queryNode:d.cloneWithSetOperations(this.#e.queryNode,Z("except",e,!1))})}exceptAll(e){return new r({...this.#e,queryNode:d.cloneWithSetOperations(this.#e.queryNode,Z("except",e,!0))})}as(e){return new mr(this,e)}clearSelect(){return new r({...this.#e,queryNode:d.cloneWithoutSelections(this.#e.queryNode)})}clearWhere(){return new r({...this.#e,queryNode:f.cloneWithoutWhere(this.#e.queryNode)})}clearLimit(){return new r({...this.#e,queryNode:d.cloneWithoutLimit(this.#e.queryNode)})}clearOffset(){return new r({...this.#e,queryNode:d.cloneWithoutOffset(this.#e.queryNode)})}clearOrderBy(){return new r({...this.#e,queryNode:f.cloneWithoutOrderBy(this.#e.queryNode)})}clearGroupBy(){return new r({...this.#e,queryNode:d.cloneWithoutGroupBy(this.#e.queryNode)})}$call(e){return e(this)}$if(e,t){return e?t(this):new r({...this.#e})}$castTo(){return new r(this.#e)}$narrowType(){return new r(this.#e)}$assertType(){return new r(this.#e)}$asTuple(){return new a(this.toOperationNode())}$asScalar(){return new a(this.toOperationNode())}withPlugin(e){return new r({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile();return(await this.#e.executor.executeQuery(e,this.#e.queryId)).rows}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=Fe){let t=await this.executeTakeFirst();if(t===void 0)throw Ur(e)?new e(this.toOperationNode()):e(this.toOperationNode());return t}async*stream(e=100){let t=this.compile(),n=this.#e.executor.stream(t,e,this.#e.queryId);for await(let s of n)yield*s.rows}async explain(e,t){return await new r({...this.#e,queryNode:f.cloneWithExplain(this.#e.queryNode,e,t)}).execute()}};function nt(r){return new ar(r)}var mr=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}get isAliasedSelectQueryBuilder(){return!0}toOperationNode(){return y.create(this.#e.toOperationNode(),u.create(this.#r))}};var D=o({is(r){return r.kind==="AggregateFunctionNode"},create(r,e=[]){return o({kind:"AggregateFunctionNode",func:r,aggregated:e})},cloneWithDistinct(r){return o({...r,distinct:!0})},cloneWithOrderBy(r,e,t=!1){let n=t?"withinGroup":"orderBy";return o({...r,[n]:r[n]?M.cloneWithItems(r[n],e):M.create(e)})},cloneWithFilter(r,e){return o({...r,filter:r.filter?G.cloneWithOperation(r.filter,"And",e):G.create(e)})},cloneWithOrFilter(r,e){return o({...r,filter:r.filter?G.cloneWithOperation(r.filter,"Or",e):G.create(e)})},cloneWithOver(r,e){return o({...r,over:e})}});var fr=o({is(r){return r.kind==="FunctionNode"},create(r,e){return o({kind:"FunctionNode",func:r,arguments:e})}});var ie=class r{#e;constructor(e){this.#e=o(e)}get expressionType(){}as(e){return new ur(this,e)}distinct(){return new r({...this.#e,aggregateFunctionNode:D.cloneWithDistinct(this.#e.aggregateFunctionNode)})}orderBy(...e){return new r({...this.#e,aggregateFunctionNode:f.cloneWithOrderByItems(this.#e.aggregateFunctionNode,K(e))})}clearOrderBy(){return new r({...this.#e,aggregateFunctionNode:f.cloneWithoutOrderBy(this.#e.aggregateFunctionNode)})}withinGroupOrderBy(...e){return new r({...this.#e,aggregateFunctionNode:D.cloneWithOrderBy(this.#e.aggregateFunctionNode,K(e),!0)})}filterWhere(...e){return new r({...this.#e,aggregateFunctionNode:D.cloneWithFilter(this.#e.aggregateFunctionNode,x(e))})}filterWhereRef(e,t,n){return new r({...this.#e,aggregateFunctionNode:D.cloneWithFilter(this.#e.aggregateFunctionNode,V(e,t,n))})}over(e){let t=Xr();return new r({...this.#e,aggregateFunctionNode:D.cloneWithOver(this.#e.aggregateFunctionNode,(e?e(t):t).toOperationNode())})}$call(e){return e(this)}$castTo(){return new r(this.#e)}$notNull(){return new r(this.#e)}toOperationNode(){return this.#e.aggregateFunctionNode}},ur=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}toOperationNode(){return y.create(this.#e.toOperationNode(),u.create(this.#r))}};function it(){let r=(t,n)=>new a(fr.create(t,Q(n??[]))),e=(t,n)=>new ie({aggregateFunctionNode:D.create(t,n?Q(n):void 0)});return Object.assign(r,{agg:e,avg(t){return e("avg",[t])},coalesce(...t){return r("coalesce",t)},count(t){return e("count",[t])},countAll(t){return new ie({aggregateFunctionNode:D.create("count",Te(t))})},max(t){return e("max",[t])},min(t){return e("min",[t])},sum(t){return e("sum",[t])},any(t){return r("any",[t])},jsonAgg(t){return new ie({aggregateFunctionNode:D.create("json_agg",[c(t)?O(t):t.toOperationNode()])})},toJson(t){return new a(fr.create("to_json",[c(t)?O(t):t.toOperationNode()]))}})}var st=o({is(r){return r.kind==="UnaryOperationNode"},create(r,e){return o({kind:"UnaryOperationNode",operator:r,operand:e})}});function at(r,e){return st.create(C.create(r),w(e))}var L=o({is(r){return r.kind==="CaseNode"},create(r){return o({kind:"CaseNode",value:r})},cloneWithWhen(r,e){return o({...r,when:o(r.when?[...r.when,e]:[e])})},cloneWithThen(r,e){return o({...r,when:r.when?o([...r.when.slice(0,-1),X.cloneWithResult(r.when[r.when.length-1],e)]):void 0})},cloneWith(r,e){return o({...r,...e})}});var Me=class{#e;constructor(e){this.#e=o(e)}when(...e){return new ze({...this.#e,node:L.cloneWithWhen(this.#e.node,X.create(x(e)))})}},ze=class{#e;constructor(e){this.#e=o(e)}then(e){return new dr({...this.#e,node:L.cloneWithThen(this.#e.node,We(e)?ue(e):l(e))})}},dr=class{#e;constructor(e){this.#e=o(e)}when(...e){return new ze({...this.#e,node:L.cloneWithWhen(this.#e.node,X.create(x(e)))})}else(e){return new pr({...this.#e,node:L.cloneWith(this.#e.node,{else:We(e)?ue(e):l(e)})})}end(){return new a(L.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new a(L.cloneWith(this.#e.node,{isStatement:!0}))}},pr=class{#e;constructor(e){this.#e=o(e)}end(){return new a(L.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new a(L.cloneWith(this.#e.node,{isStatement:!0}))}};var cr=o({is(r){return r.kind==="JSONPathLegNode"},create(r,e){return o({kind:"JSONPathLegNode",type:r,value:e})}});var se=class{#e;constructor(e){this.#e=e}at(e){return this.#r("ArrayLocation",e)}key(e){return this.#r("Member",e)}#r(e,t){return oe.is(this.#e)?new Je(oe.cloneWithTraversal(this.#e,I.is(this.#e.traversal)?I.cloneWithLeg(this.#e.traversal,cr.create(e,t)):Se.cloneWithValue(this.#e.traversal,k.createImmediate(t)))):new Je(I.cloneWithLeg(this.#e,cr.create(e,t)))}},Je=class r extends se{#e;constructor(e){super(e),this.#e=e}get expressionType(){}as(e){return new lr(this,e)}$castTo(){return new r(this.#e)}$notNull(){return new r(this.#e)}toOperationNode(){return this.#e}},lr=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}toOperationNode(){return y.create(this.#e.toOperationNode(),p(this.#r)?this.#r.toOperationNode():u.create(this.#r))}};var hr=o({is(r){return r.kind==="TupleNode"},create(r){return o({kind:"TupleNode",values:o(r)})}});var Gt=["varchar","char","text","integer","int2","int4","int8","smallint","bigint","boolean","real","double precision","float4","float8","decimal","numeric","binary","bytea","date","datetime","time","timetz","timestamp","timestamptz","serial","bigserial","uuid","json","jsonb","blob","varbinary","int4range","int4multirange","int8range","int8multirange","numrange","nummultirange","tsrange","tsmultirange","tstzrange","tstzmultirange","daterange","datemultirange"],jt=[/^varchar\(\d+\)$/,/^char\(\d+\)$/,/^decimal\(\d+, \d+\)$/,/^numeric\(\d+, \d+\)$/,/^binary\(\d+\)$/,/^datetime\(\d+\)$/,/^time\(\d+\)$/,/^timetz\(\d+\)$/,/^timestamp\(\d+\)$/,/^timestamptz\(\d+\)$/,/^varbinary\(\d+\)$/],mt=o({is(r){return r.kind==="DataTypeNode"},create(r){return o({kind:"DataTypeNode",dataType:r})}});function ft(r){return!!(Gt.includes(r)||jt.some(e=>e.test(r)))}function ut(r){if(p(r))return r.toOperationNode();if(ft(r))return mt.create(r);throw new Error(`invalid column data type ${JSON.stringify(r)}`)}var dt=o({is(r){return r.kind==="CastNode"},create(r,e){return o({kind:"CastNode",expression:r,dataType:e})}});function Ve(r=Qe){function e(s,m,h){return new a(Re(s,m,h))}function t(s,m){return new a(at(s,m))}let n=Object.assign(e,{fn:void 0,eb:void 0,selectFrom(s){return nt({queryId:T(),executor:r,queryNode:d.createFrom(nr(s))})},case(s){return new Me({node:L.create(j(s)?void 0:w(s))})},ref(s,m){return j(m)?new a(A(s)):new se(Rr(s,m))},jsonPath(){return new se(I.create())},table(s){return new a(O(s))},val(s){return new a(l(s))},refTuple(...s){return new a(hr.create(s.map(w)))},tuple(...s){return new a(hr.create(s.map(l)))},lit(s){return new a(ue(s))},unary:t,not(s){return t("not",s)},exists(s){return t("exists",s)},neg(s){return t("-",s)},between(s,m,h){return new a(J.create(w(s),C.create("between"),b.create(l(m),l(h))))},betweenSymmetric(s,m,h){return new a(J.create(w(s),C.create("between symmetric"),b.create(l(m),l(h))))},and(s){return g(s)?new a(Ce(s,"and")):new a(He(s,"and"))},or(s){return g(s)?new a(Ce(s,"or")):new a(He(s,"or"))},parens(...s){let m=x(s);return $.is(m)?new a(m):new a($.create(m))},cast(s,m){return new a(dt.create(w(s),ut(m)))},withSchema(s){return Ve(r.withPluginAtFront(new ve(s)))}});return n.fn=it(),n.eb=n,n}function E(r){return Ve()}function U(r){if(p(r))return r.toOperationNode();if(S(r))return r(E()).toOperationNode();throw new Error(`invalid expression: ${JSON.stringify(r)}`)}function Le(r){if(p(r))return r.toOperationNode();if(S(r))return r(E()).toOperationNode();throw new Error(`invalid aliased expression: ${JSON.stringify(r)}`)}function H(r){return ye(r)||wr(r)||S(r)}function pt(r){return v(r)&&p(r)&&c(r.table)&&c(r.alias)}function nr(r){return g(r)?r.map(e=>q(e)):[q(r)]}function q(r){return c(r)?Kt(r):pt(r)?r.toOperationNode():Le(r)}function Kt(r){let e=" as ";if(r.includes(e)){let[t,n]=r.split(e).map(ct);return y.create(O(t),u.create(n))}else return O(r)}function O(r){let e=".";if(r.includes(e)){let[t,n]=r.split(e).map(ct);return W.createWithSchema(t,n)}else return W.create(r)}function ct(r){return r.trim()}var Nr=class r{#e;constructor(e){this.#e=o(e)}get expressionType(){}get isRawBuilder(){return!0}as(e){return new xr(this,e)}$castTo(){return new r({...this.#e})}$notNull(){return new r(this.#e)}withPlugin(e){return new r({...this.#e,plugins:this.#e.plugins!==void 0?o([...this.#e.plugins,e]):o([e])})}toOperationNode(){return this.#t(this.#r())}compile(e){return this.#n(this.#r(e))}async execute(e){let t=this.#r(e);return t.executeQuery(this.#n(t),this.#e.queryId)}#r(e){let t=e!==void 0?e.getExecutor():Qe;return this.#e.plugins!==void 0?t.withPlugins(this.#e.plugins):t}#t(e){return e.transformQuery(this.#e.rawNode,this.#e.queryId)}#n(e){return e.compileQuery(this.#t(e),this.#e.queryId)}};function z(r){return new Nr(r)}var xr=class{#e;#r;constructor(e,t){this.#e=e,this.#r=t}get expression(){return this.#e}get alias(){return this.#r}get rawBuilder(){return this.#e}toOperationNode(){return y.create(this.#e.toOperationNode(),p(this.#r)?this.#r.toOperationNode():u.create(this.#r))}};var ae=Object.assign((r,...e)=>z({queryId:T(),rawNode:N.create(r,e?.map(lt)??[])}),{ref(r){return z({queryId:T(),rawNode:N.createWithChild(A(r))})},val(r){return z({queryId:T(),rawNode:N.createWithChild(l(r))})},value(r){return this.val(r)},table(r){return z({queryId:T(),rawNode:N.createWithChild(O(r))})},id(...r){let e=new Array(r.length+1).fill(".");return e[0]="",e[e.length-1]="",z({queryId:T(),rawNode:N.create(e,r.map(u.create))})},lit(r){return z({queryId:T(),rawNode:N.createWithChild(k.createImmediate(r))})},literal(r){return this.lit(r)},raw(r){return z({queryId:T(),rawNode:N.createWithSql(r)})},join(r,e=ae`, `){let t=new Array(Math.max(2*r.length-1,0)),n=e.toOperationNode();for(let s=0;s<r.length;++s)t[2*s]=lt(r[s]),s!==r.length-1&&(t[2*s+1]=n);return z({queryId:T(),rawNode:N.createWithChildren(t)})}});function lt(r){return p(r)?r.toOperationNode():l(r)}function Nt(r,e){let t=Ht(r,e);return n=>n.where(s=>s.or(t.map(m=>s.and(m.map(([h,_])=>s(h,_===null?"is":Array.isArray(_)?"in":"=",_))))))}function Ht(r,e){let t=[],n=[],s=E();for(let _ of r){let Ue=[];for(let yr of Object.values(e)){let{isInPrimaryKey:xt,name:Or}=yr;xt&&(_===r.at(0)&&t.push(s.ref(Or)),Ue.push(Yt(_[Or]??null,yr)))}n.push(t.length===1?Ue.at(0):ht(Ue))}let m=t.length===1?t.at(0):ht(t),h=n.length===1?n.at(0):n;return[[[m,h]]]}function ht(r){return ae`(${ae.join(r,ae`, `)})`}function Yt(r,e){let{datatype:t}=e,n=E();return r===null?n.lit(null):t.isNative?n.val(r):n.cast(n.val(r),ae.id(t.schema,t.name))}
//# sourceMappingURL=data:application/json;base64,