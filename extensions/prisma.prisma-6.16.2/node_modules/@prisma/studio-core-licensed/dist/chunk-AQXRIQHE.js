import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{e as o}from"./chunk-GDQBQ7MK.js";o();o();o();o();o();o();function K(t){return typeof t>"u"||t===void 0}function v(t){return typeof t=="string"}function We(t){return typeof t=="number"}function Le(t){return typeof t=="boolean"}function $e(t){return t===null}function $i(t){return t instanceof Date}function Ke(t){return typeof t=="bigint"}function b(t){return typeof t=="function"}function B(t){return typeof t=="object"&&t!==null}function i(t){return Object.freeze(t)}function bt(t){return P(t)?t:[t]}function P(t){return Array.isArray(t)}function V(t){return t}var l=i({is(t){return t.kind==="AlterTableNode"},create(t){return i({kind:"AlterTableNode",table:t})},cloneWithTableProps(t,e){return i({...t,...e})},cloneWithColumnAlteration(t,e){return i({...t,columnAlterations:t.columnAlterations?[...t.columnAlterations,e]:[e]})}});o();o();var p=i({is(t){return t.kind==="IdentifierNode"},create(t){return i({kind:"IdentifierNode",name:t})}});var ee=i({is(t){return t.kind==="CreateIndexNode"},create(t){return i({kind:"CreateIndexNode",name:p.create(t)})},cloneWith(t,e){return i({...t,...e})},cloneWithColumns(t,e){return i({...t,columns:[...t.columns||[],...e]})}});o();var Pt=i({is(t){return t.kind==="CreateSchemaNode"},create(t,e){return i({kind:"CreateSchemaNode",schema:p.create(t),...e})},cloneWith(t,e){return i({...t,...e})}});o();var Ki=["preserve rows","delete rows","drop"],M=i({is(t){return t.kind==="CreateTableNode"},create(t){return i({kind:"CreateTableNode",table:t,columns:i([])})},cloneWithColumn(t,e){return i({...t,columns:i([...t.columns,e])})},cloneWithConstraint(t,e){return i({...t,constraints:t.constraints?i([...t.constraints,e]):i([e])})},cloneWithFrontModifier(t,e){return i({...t,frontModifiers:t.frontModifiers?i([...t.frontModifiers,e]):i([e])})},cloneWithEndModifier(t,e){return i({...t,endModifiers:t.endModifiers?i([...t.endModifiers,e]):i([e])})},cloneWith(t,e){return i({...t,...e})}});o();o();var F=i({is(t){return t.kind==="SchemableIdentifierNode"},create(t){return i({kind:"SchemableIdentifierNode",identifier:p.create(t)})},createWithSchema(t,e){return i({kind:"SchemableIdentifierNode",schema:p.create(t),identifier:p.create(e)})}});var Se=i({is(t){return t.kind==="DropIndexNode"},create(t,e){return i({kind:"DropIndexNode",name:F.create(t),...e})},cloneWith(t,e){return i({...t,...e})}});o();var Wt=i({is(t){return t.kind==="DropSchemaNode"},create(t,e){return i({kind:"DropSchemaNode",schema:p.create(t),...e})},cloneWith(t,e){return i({...t,...e})}});o();var St=i({is(t){return t.kind==="DropTableNode"},create(t,e){return i({kind:"DropTableNode",table:t,...e})},cloneWith(t,e){return i({...t,...e})}});o();o();var I=i({is(t){return t.kind==="AliasNode"},create(t,e){return i({kind:"AliasNode",node:t,alias:e})}});o();var j=i({is(t){return t.kind==="TableNode"},create(t){return i({kind:"TableNode",table:F.create(t)})},createWithSchema(t,e){return i({kind:"TableNode",table:F.createWithSchema(t,e)})}});o();o();o();function O(t){return B(t)&&b(t.toOperationNode)}function Mt(t){return B(t)&&"expressionType"in t&&O(t)}function ji(t){return B(t)&&"expression"in t&&v(t.alias)&&O(t)}o();o();o();var ue=i({is(t){return t.kind==="SelectModifierNode"},create(t,e){return i({kind:"SelectModifierNode",modifier:t,of:e})},createWithExpression(t){return i({kind:"SelectModifierNode",rawModifier:t})}});o();o();o();o();var J=i({is(t){return t.kind==="AndNode"},create(t,e){return i({kind:"AndNode",left:t,right:e})}});o();var te=i({is(t){return t.kind==="OrNode"},create(t,e){return i({kind:"OrNode",left:t,right:e})}});var Ft=i({is(t){return t.kind==="OnNode"},create(t){return i({kind:"OnNode",on:t})},cloneWithOperation(t,e,r){return i({...t,on:e==="And"?J.create(t.on,r):te.create(t.on,r)})}});var Ne=i({is(t){return t.kind==="JoinNode"},create(t,e){return i({kind:"JoinNode",joinType:t,table:e,on:void 0})},createWithOn(t,e,r){return i({kind:"JoinNode",joinType:t,table:e,on:Ft.create(r)})},cloneWithOn(t,e){return i({...t,on:t.on?Ft.cloneWithOperation(t.on,"And",e):Ft.create(e)})}});o();o();var ke=i({is(t){return t.kind==="BinaryOperationNode"},create(t,e,r){return i({kind:"BinaryOperationNode",leftOperand:t,operator:e,rightOperand:r})}});o();var Ko=["=","==","!=","<>",">",">=","<","<=","in","not in","is","is not","like","not like","match","ilike","not ilike","@>","<@","^@","&&","?","?&","?|","!<","!>","<=>","!~","~","~*","!~*","@@","@@@","!!","<->","regexp","is distinct from","is not distinct from"],jo=["+","-","*","/","%","^","&","|","#","<<",">>"],Gi=["->","->>"],Go=[...Ko,...jo,"&&","||"],Ho=["exists","not exists"],Yo=["not","-",...Ho],Hi=[...Go,...Gi,...Yo,"between","between symmetric"],G=i({is(t){return t.kind==="OperatorNode"},create(t){return i({kind:"OperatorNode",operator:t})}});function jr(t){return v(t)&&Gi.includes(t)}o();o();var c=i({is(t){return t.kind==="ColumnNode"},create(t){return i({kind:"ColumnNode",column:p.create(t)})}});o();o();var je=i({is(t){return t.kind==="SelectAllNode"},create(){return i({kind:"SelectAllNode"})}});var Ge=i({is(t){return t.kind==="ReferenceNode"},create(t,e){return i({kind:"ReferenceNode",table:e,column:t})},createSelectAll(t){return i({kind:"ReferenceNode",table:t,column:je.create()})}});o();o();var Vt=class{#e;get dynamicReference(){return this.#e}get refType(){}constructor(e){this.#e=e}toOperationNode(){return Gr(this.#e)}};function zt(t){return B(t)&&O(t)&&v(t.dynamicReference)}o();var re=i({is(t){return t.kind==="OrderByItemNode"},create(t,e){return i({kind:"OrderByItemNode",orderBy:t,direction:e})},cloneWith(t,e){return i({...t,...e})}});o();var C=i({is(t){return t.kind==="RawNode"},create(t,e){return i({kind:"RawNode",sqlFragments:i(t),parameters:i(e)})},createWithSql(t){return C.create([t],[])},createWithChild(t){return C.create(["",""],[t])},createWithChildren(t){return C.create(new Array(t.length+1).fill(""),t)}});o();o();var Yi={is(t){return t.kind==="CollateNode"},create(t){return i({kind:"CollateNode",collation:p.create(t)})}};var Ut=class t{#e;constructor(e){this.#e=i(e)}desc(){return new t({node:re.cloneWith(this.#e.node,{direction:C.createWithSql("desc")})})}asc(){return new t({node:re.cloneWith(this.#e.node,{direction:C.createWithSql("asc")})})}nullsLast(){return new t({node:re.cloneWith(this.#e.node,{nulls:"last"})})}nullsFirst(){return new t({node:re.cloneWith(this.#e.node,{nulls:"first"})})}collate(e){return new t({node:re.cloneWith(this.#e.node,{collation:Yi.create(e)})})}toOperationNode(){return this.#e.node}};o();var Xi=new Set;function Te(t){Xi.has(t)||(Xi.add(t),console.log(t))}function Yr(t){return t==="asc"||t==="desc"}function Y(t){if(t.length===2)return[Hr(t[0],t[1])];if(t.length===1){let[e]=t;return Array.isArray(e)?(Te("orderBy(array) is deprecated, use multiple orderBy calls instead."),e.map(r=>Hr(r))):[Hr(e)]}throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${t.length}`)}function Hr(t,e){let r=Xo(t);if(re.is(r)){if(e)throw new Error("Cannot specify direction twice!");return r}return Zi(r,e)}function Xo(t){if(ye(t))return $(t);if(zt(t))return t.toOperationNode();let[e,r]=t.split(" ");return r?(Te("`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead."),Zi(H(e),r)):H(t)}function Zi(t,e){if(typeof e=="string"){if(!Yr(e))throw new Error(`Invalid order by direction: ${e}`);return re.create(t,C.createWithSql(e))}if(Mt(e))return Te("`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead."),re.create(t,e.toOperationNode());let r=re.create(t);return e?e(new Ut({node:r})).toOperationNode():r}o();var He=i({is(t){return t.kind==="JSONReferenceNode"},create(t,e){return i({kind:"JSONReferenceNode",reference:t,traversal:e})},cloneWithTraversal(t,e){return i({...t,traversal:e})}});o();var Jt=i({is(t){return t.kind==="JSONOperatorChainNode"},create(t){return i({kind:"JSONOperatorChainNode",operator:t,values:i([])})},cloneWithValue(t,e){return i({...t,values:i([...t.values,e])})}});o();var Ee=i({is(t){return t.kind==="JSONPathNode"},create(t){return i({kind:"JSONPathNode",inOperator:t,pathLegs:i([])})},cloneWithLeg(t,e){return i({...t,pathLegs:i([...t.pathLegs,e])})}});function Gr(t){return v(t)?H(t):t.toOperationNode()}function xe(t){return P(t)?t.map(e=>L(e)):[L(t)]}function L(t){return ye(t)?$(t):Gr(t)}function _i(t,e){let r=H(t);if(jr(e))return He.create(r,Jt.create(G.create(e)));let n=e.slice(0,-1);if(jr(n))return He.create(r,Ee.create(G.create(n)));throw new Error(`Invalid JSON operator: ${e}`)}function H(t){let e=".";if(!t.includes(e))return Ge.create(c.create(t));let r=t.split(e).map(Zr);if(r.length===3)return Zo(r);if(r.length===2)return _o(r);throw new Error(`invalid column reference ${t}`)}function eo(t){let e=" as ";if(t.includes(e)){let[r,n]=t.split(e).map(Zr);return I.create(H(r),p.create(n))}else return H(t)}function Xr(t){return c.create(t)}function Ye(t){let e=" ";if(t.includes(e)){let[r,n]=t.split(e).map(Zr);if(!Yr(n))throw new Error(`invalid order direction "${n}" next to "${r}"`);return Y([r,n])[0]}else return Xr(t)}function Zo(t){let[e,r,n]=t;return Ge.create(c.create(n),j.createWithSchema(e,r))}function _o(t){let[e,r]=t;return Ge.create(c.create(r),j.create(e))}function Zr(t){return t.trim()}o();o();var $t=i({is(t){return t.kind==="PrimitiveValueListNode"},create(t){return i({kind:"PrimitiveValueListNode",values:i([...t])})}});o();var de=i({is(t){return t.kind==="ValueListNode"},create(t){return i({kind:"ValueListNode",values:i(t)})}});o();var S=i({is(t){return t.kind==="ValueNode"},create(t){return i({kind:"ValueNode",value:t})},createImmediate(t){return i({kind:"ValueNode",value:t,immediate:!0})}});function to(t){return P(t)?en(t):x(t)}function x(t){return ye(t)?$(t):S.create(t)}function Kt(t){return We(t)||Le(t)||$e(t)}function kt(t){if(!Kt(t))throw new Error(`unsafe immediate value ${JSON.stringify(t)}`);return S.createImmediate(t)}function en(t){return t.some(ye)?de.create(t.map(e=>x(e))):$t.create(t)}o();var pe=i({is(t){return t.kind==="ParensNode"},create(t){return i({kind:"ParensNode",node:t})}});function w(t){if(t.length===3)return jt(t[0],t[1],t[2]);if(t.length===1)return x(t[0]);throw new Error(`invalid arguments: ${JSON.stringify(t)}`)}function jt(t,e,r){return tn(e)&&io(r)?ke.create(L(t),_r(e),S.createImmediate(r)):ke.create(L(t),_r(e),to(r))}function R(t,e,r){return ke.create(L(t),_r(e),L(r))}function ei(t,e){return Xe(Object.entries(t).filter(([,r])=>!K(r)).map(([r,n])=>jt(r,io(n)?"is":"=",n)),e)}function Xe(t,e,r=!0){let n=e==="and"?J.create:te.create;if(t.length===0)return ke.create(S.createImmediate(1),G.create("="),S.createImmediate(e==="and"?1:0));let a=ro(t[0]);for(let d=1;d<t.length;++d)a=n(a,ro(t[d]));return t.length>1&&r?pe.create(a):a}function tn(t){return t==="is"||t==="is not"}function io(t){return $e(t)||Le(t)}function _r(t){if(v(t)&&Hi.includes(t))return G.create(t);if(O(t))return t.toOperationNode();throw new Error(`invalid operator ${JSON.stringify(t)}`)}function ro(t){return O(t)?t.toOperationNode():t}o();o();o();var we=i({is(t){return t.kind==="OrderByNode"},create(t){return i({kind:"OrderByNode",items:i([...t])})},cloneWithItems(t,e){return i({...t,items:i([...t.items,...e])})}});o();var ti=i({is(t){return t.kind==="PartitionByNode"},create(t){return i({kind:"PartitionByNode",items:i(t)})},cloneWithItems(t,e){return i({...t,items:i([...t.items,...e])})}});var Tt=i({is(t){return t.kind==="OverNode"},create(){return i({kind:"OverNode"})},cloneWithOrderByItems(t,e){return i({...t,orderBy:t.orderBy?we.cloneWithItems(t.orderBy,e):we.create(e)})},cloneWithPartitionByItems(t,e){return i({...t,partitionBy:t.partitionBy?ti.cloneWithItems(t.partitionBy,e):ti.create(e)})}});o();o();var Qe=i({is(t){return t.kind==="FromNode"},create(t){return i({kind:"FromNode",froms:i(t)})},cloneWithFroms(t,e){return i({...t,froms:i([...t.froms,...e])})}});o();var ri=i({is(t){return t.kind==="GroupByNode"},create(t){return i({kind:"GroupByNode",items:i(t)})},cloneWithItems(t,e){return i({...t,items:i([...t.items,...e])})}});o();var ii=i({is(t){return t.kind==="HavingNode"},create(t){return i({kind:"HavingNode",having:t})},cloneWithOperation(t,e,r){return i({...t,having:e==="And"?J.create(t.having,r):te.create(t.having,r)})}});o();o();var W=i({is(t){return t.kind==="InsertQueryNode"},create(t,e,r){return i({kind:"InsertQueryNode",into:t,...e&&{with:e},replace:r})},createWithoutInto(){return i({kind:"InsertQueryNode"})},cloneWith(t,e){return i({...t,...e})}});o();o();var Gt=i({is(t){return t.kind==="ListNode"},create(t){return i({kind:"ListNode",items:i(t)})}});var he=i({is(t){return t.kind==="UpdateQueryNode"},create(t,e){return i({kind:"UpdateQueryNode",table:t.length===1?t[0]:Gt.create(t),...e&&{with:e}})},createWithoutTable(){return i({kind:"UpdateQueryNode"})},cloneWithFromItems(t,e){return i({...t,from:t.from?Qe.cloneWithFroms(t.from,e):Qe.create(e)})},cloneWithUpdates(t,e){return i({...t,updates:t.updates?i([...t.updates,...e]):e})},cloneWithLimit(t,e){return i({...t,limit:e})}});o();o();var oi=i({is(t){return t.kind==="UsingNode"},create(t){return i({kind:"UsingNode",tables:i(t)})},cloneWithTables(t,e){return i({...t,tables:i([...t.tables,...e])})}});var Ae=i({is(t){return t.kind==="DeleteQueryNode"},create(t,e){return i({kind:"DeleteQueryNode",from:Qe.create(t),...e&&{with:e}})},cloneWithOrderByItems:(t,e)=>u.cloneWithOrderByItems(t,e),cloneWithoutOrderBy:t=>u.cloneWithoutOrderBy(t),cloneWithLimit(t,e){return i({...t,limit:e})},cloneWithoutLimit(t){return i({...t,limit:void 0})},cloneWithUsing(t,e){return i({...t,using:t.using!==void 0?oi.cloneWithTables(t.using,e):oi.create(e)})}});o();var Q=i({is(t){return t.kind==="WhereNode"},create(t){return i({kind:"WhereNode",where:t})},cloneWithOperation(t,e,r){return i({...t,where:e==="And"?J.create(t.where,r):te.create(t.where,r)})}});o();var ni=i({is(t){return t.kind==="ReturningNode"},create(t){return i({kind:"ReturningNode",selections:i(t)})},cloneWithSelections(t,e){return i({...t,selections:t.selections?i([...t.selections,...e]):i(e)})}});o();var oo=i({is(t){return t.kind==="ExplainNode"},create(t,e){return i({kind:"ExplainNode",format:t,options:e})}});o();o();var Oe=i({is(t){return t.kind==="WhenNode"},create(t){return i({kind:"WhenNode",condition:t})},cloneWithResult(t,e){return i({...t,result:e})}});var q=i({is(t){return t.kind==="MergeQueryNode"},create(t,e){return i({kind:"MergeQueryNode",into:t,...e&&{with:e}})},cloneWithUsing(t,e){return i({...t,using:e})},cloneWithWhen(t,e){return i({...t,whens:t.whens?i([...t.whens,e]):i([e])})},cloneWithThen(t,e){return i({...t,whens:t.whens?i([...t.whens.slice(0,-1),Oe.cloneWithResult(t.whens[t.whens.length-1],e)]):void 0})}});o();var si=i({is(t){return t.kind==="OutputNode"},create(t){return i({kind:"OutputNode",selections:i(t)})},cloneWithSelections(t,e){return i({...t,selections:t.selections?i([...t.selections,...e]):i(e)})}});var u=i({is(t){return y.is(t)||W.is(t)||he.is(t)||Ae.is(t)||q.is(t)},cloneWithEndModifier(t,e){return i({...t,endModifiers:t.endModifiers?i([...t.endModifiers,e]):i([e])})},cloneWithWhere(t,e){return i({...t,where:t.where?Q.cloneWithOperation(t.where,"And",e):Q.create(e)})},cloneWithJoin(t,e){return i({...t,joins:t.joins?i([...t.joins,e]):i([e])})},cloneWithReturning(t,e){return i({...t,returning:t.returning?ni.cloneWithSelections(t.returning,e):ni.create(e)})},cloneWithoutReturning(t){return i({...t,returning:void 0})},cloneWithoutWhere(t){return i({...t,where:void 0})},cloneWithExplain(t,e,r){return i({...t,explain:oo.create(e,r?.toOperationNode())})},cloneWithTop(t,e){return i({...t,top:e})},cloneWithOutput(t,e){return i({...t,output:t.output?si.cloneWithSelections(t.output,e):si.create(e)})},cloneWithOrderByItems(t,e){return i({...t,orderBy:t.orderBy?we.cloneWithItems(t.orderBy,e):we.create(e)})},cloneWithoutOrderBy(t){return i({...t,orderBy:void 0})}});var y=i({is(t){return t.kind==="SelectQueryNode"},create(t){return i({kind:"SelectQueryNode",...t&&{with:t}})},createFrom(t,e){return i({kind:"SelectQueryNode",from:Qe.create(t),...e&&{with:e}})},cloneWithSelections(t,e){return i({...t,selections:t.selections?i([...t.selections,...e]):i(e)})},cloneWithDistinctOn(t,e){return i({...t,distinctOn:t.distinctOn?i([...t.distinctOn,...e]):i(e)})},cloneWithFrontModifier(t,e){return i({...t,frontModifiers:t.frontModifiers?i([...t.frontModifiers,e]):i([e])})},cloneWithOrderByItems:(t,e)=>u.cloneWithOrderByItems(t,e),cloneWithGroupByItems(t,e){return i({...t,groupBy:t.groupBy?ri.cloneWithItems(t.groupBy,e):ri.create(e)})},cloneWithLimit(t,e){return i({...t,limit:e})},cloneWithOffset(t,e){return i({...t,offset:e})},cloneWithFetch(t,e){return i({...t,fetch:e})},cloneWithHaving(t,e){return i({...t,having:t.having?ii.cloneWithOperation(t.having,"And",e):ii.create(e)})},cloneWithSetOperations(t,e){return i({...t,setOperations:t.setOperations?i([...t.setOperations,...e]):i([...e])})},cloneWithoutSelections(t){return i({...t,selections:[]})},cloneWithoutLimit(t){return i({...t,limit:void 0})},cloneWithoutOffset(t){return i({...t,offset:void 0})},cloneWithoutOrderBy:t=>u.cloneWithoutOrderBy(t),cloneWithoutGroupBy(t){return i({...t,groupBy:void 0})}});o();var Ht=class t{#e;constructor(e){this.#e=i(e)}on(...e){return new t({...this.#e,joinNode:Ne.cloneWithOn(this.#e.joinNode,w(e))})}onRef(e,r,n){return new t({...this.#e,joinNode:Ne.cloneWithOn(this.#e.joinNode,R(e,r,n))})}onTrue(){return new t({...this.#e,joinNode:Ne.cloneWithOn(this.#e.joinNode,C.createWithSql("true"))})}$call(e){return e(this)}toOperationNode(){return this.#e.joinNode}};o();o();o();var no=i({is(t){return t.kind==="PartitionByItemNode"},create(t){return i({kind:"PartitionByItemNode",partitionBy:t})}});function so(t){return xe(t).map(no.create)}var Yt=class t{#e;constructor(e){this.#e=i(e)}orderBy(...e){return new t({overNode:Tt.cloneWithOrderByItems(this.#e.overNode,Y(e))})}clearOrderBy(){return new t({overNode:u.cloneWithoutOrderBy(this.#e.overNode)})}partitionBy(e){return new t({overNode:Tt.cloneWithPartitionByItems(this.#e.overNode,so(e))})}$call(e){return e(this)}toOperationNode(){return this.#e.overNode}};o();o();o();o();var Ze=i({is(t){return t.kind==="SelectionNode"},create(t){return i({kind:"SelectionNode",selection:t})},createSelectAll(){return i({kind:"SelectionNode",selection:je.create()})},createSelectAllFromTable(t){return i({kind:"SelectionNode",selection:Ge.createSelectAll(t)})}});function A(t){return b(t)?A(t(z())):P(t)?t.map(e=>ao(e)):[ao(t)]}function ao(t){return v(t)?Ze.create(eo(t)):zt(t)?Ze.create(t.toOperationNode()):Ze.create(Xt(t))}function D(t){return t?Array.isArray(t)?t.map(uo):[uo(t)]:[Ze.createSelectAll()]}function uo(t){if(v(t))return Ze.createSelectAllFromTable(f(t));throw new Error(`invalid value selectAll expression: ${JSON.stringify(t)}`)}o();o();var po=i({is(t){return t.kind==="ValuesNode"},create(t){return i({kind:"ValuesNode",values:i(t)})}});o();var ho=i({is(t){return t.kind==="DefaultInsertValueNode"},create(){return i({kind:"DefaultInsertValueNode"})}});function Zt(t){let e=b(t)?t(z()):t,r=P(e)?e:i([e]);return rn(r)}function rn(t){let e=on(t);return[i([...e.keys()].map(c.create)),po.create(t.map(r=>nn(r,e)))]}function on(t){let e=new Map;for(let r of t){let n=Object.keys(r);for(let a of n)!e.has(a)&&r[a]!==void 0&&e.set(a,e.size)}return e}function nn(t,e){let r=Object.keys(t),n=Array.from({length:e.size}),a=!1,d=r.length;for(let k of r){let T=e.get(k);if(K(T)){d--;continue}let E=t[k];(K(E)||ye(E))&&(a=!0),n[T]=E}if(d<e.size||a){let k=ho.create();return de.create(n.map(T=>K(T)?k:x(T)))}return $t.create(n)}o();o();var ai=i({is(t){return t.kind==="ColumnUpdateNode"},create(t,e){return i({kind:"ColumnUpdateNode",column:t,value:e})}});function co(...t){return t.length===2?[ai.create(L(t[0]),x(t[1]))]:Et(t[0])}function Et(t){let e=b(t)?t(z()):t;return Object.entries(e).filter(([r,n])=>n!==void 0).map(([r,n])=>ai.create(c.create(r),x(n)))}o();var mo=i({is(t){return t.kind==="OnDuplicateKeyNode"},create(t){return i({kind:"OnDuplicateKeyNode",updates:t})}});o();var _t=class{insertId;numInsertedOrUpdatedRows;constructor(e,r){this.insertId=e,this.numInsertedOrUpdatedRows=r}};o();var Z=class extends Error{node;constructor(e){super("no result"),this.node=e}};function ce(t){return Object.prototype.hasOwnProperty.call(t,"prototype")}o();o();var U=i({is(t){return t.kind==="OnConflictNode"},create(){return i({kind:"OnConflictNode"})},cloneWith(t,e){return i({...t,...e})},cloneWithIndexWhere(t,e){return i({...t,indexWhere:t.indexWhere?Q.cloneWithOperation(t.indexWhere,"And",e):Q.create(e)})},cloneWithIndexOrWhere(t,e){return i({...t,indexWhere:t.indexWhere?Q.cloneWithOperation(t.indexWhere,"Or",e):Q.create(e)})},cloneWithUpdateWhere(t,e){return i({...t,updateWhere:t.updateWhere?Q.cloneWithOperation(t.updateWhere,"And",e):Q.create(e)})},cloneWithUpdateOrWhere(t,e){return i({...t,updateWhere:t.updateWhere?Q.cloneWithOperation(t.updateWhere,"Or",e):Q.create(e)})},cloneWithoutIndexWhere(t){return i({...t,indexWhere:void 0})},cloneWithoutUpdateWhere(t){return i({...t,updateWhere:void 0})}});var er=class t{#e;constructor(e){this.#e=i(e)}column(e){let r=c.create(e);return new t({...this.#e,onConflictNode:U.cloneWith(this.#e.onConflictNode,{columns:this.#e.onConflictNode.columns?i([...this.#e.onConflictNode.columns,r]):i([r])})})}columns(e){let r=e.map(c.create);return new t({...this.#e,onConflictNode:U.cloneWith(this.#e.onConflictNode,{columns:this.#e.onConflictNode.columns?i([...this.#e.onConflictNode.columns,...r]):i(r)})})}constraint(e){return new t({...this.#e,onConflictNode:U.cloneWith(this.#e.onConflictNode,{constraint:p.create(e)})})}expression(e){return new t({...this.#e,onConflictNode:U.cloneWith(this.#e.onConflictNode,{indexExpression:e.toOperationNode()})})}where(...e){return new t({...this.#e,onConflictNode:U.cloneWithIndexWhere(this.#e.onConflictNode,w(e))})}whereRef(e,r,n){return new t({...this.#e,onConflictNode:U.cloneWithIndexWhere(this.#e.onConflictNode,R(e,r,n))})}clearWhere(){return new t({...this.#e,onConflictNode:U.cloneWithoutIndexWhere(this.#e.onConflictNode)})}doNothing(){return new ui({...this.#e,onConflictNode:U.cloneWith(this.#e.onConflictNode,{doNothing:!0})})}doUpdateSet(e){return new di({...this.#e,onConflictNode:U.cloneWith(this.#e.onConflictNode,{updates:Et(e)})})}$call(e){return e(this)}},ui=class{#e;constructor(e){this.#e=i(e)}toOperationNode(){return this.#e.onConflictNode}},di=class t{#e;constructor(e){this.#e=i(e)}where(...e){return new t({...this.#e,onConflictNode:U.cloneWithUpdateWhere(this.#e.onConflictNode,w(e))})}whereRef(e,r,n){return new t({...this.#e,onConflictNode:U.cloneWithUpdateWhere(this.#e.onConflictNode,R(e,r,n))})}clearWhere(){return new t({...this.#e,onConflictNode:U.cloneWithoutUpdateWhere(this.#e.onConflictNode)})}$call(e){return e(this)}toOperationNode(){return this.#e.onConflictNode}};o();o();var lo=i({is(t){return t.kind==="TopNode"},create(t,e){return i({kind:"TopNode",expression:t,modifiers:e})}});function ie(t,e){if(!We(t)&&!Ke(t))throw new Error(`Invalid top expression: ${t}`);if(!K(e)&&!sn(e))throw new Error(`Invalid top modifiers: ${e}`);return lo.create(t,e)}function sn(t){return t==="percent"||t==="with ties"||t==="percent with ties"}o();var Pe=i({is(t){return t.kind==="OrActionNode"},create(t){return i({kind:"OrActionNode",action:t})}});var At=class t{#e;constructor(e){this.#e=i(e)}values(e){let[r,n]=Zt(e);return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{columns:r,values:n})})}columns(e){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{columns:i(e.map(c.create))})})}expression(e){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{values:$(e)})})}defaultValues(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{defaultValues:!0})})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}ignore(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{orAction:Pe.create("ignore")})})}orIgnore(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{orAction:Pe.create("ignore")})})}orAbort(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{orAction:Pe.create("abort")})})}orFail(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{orAction:Pe.create("fail")})})}orReplace(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{orAction:Pe.create("replace")})})}orRollback(){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{orAction:Pe.create("rollback")})})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ie(e,r))})}onConflict(e){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{onConflict:e(new er({onConflictNode:U.create()})).toOperationNode()})})}onDuplicateKeyUpdate(e){return new t({...this.#e,queryNode:W.cloneWith(this.#e.queryNode,{onDuplicateKey:mo.create(Et(e))})})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,A(e))})}returningAll(){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,D())})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,A(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,D(e))})}clearReturning(){return new t({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:n}=this.#e.executor,a=e.query;return a.returning&&n.supportsReturning||a.output&&n.supportsOutput?r.rows:[new _t(r.insertId,r.numAffectedRows??BigInt(0))]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=Z){let r=await this.executeTakeFirst();if(r===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),n=this.#e.executor.stream(r,e,this.#e.queryId);for await(let a of n)yield*a.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};o();o();var tr=class{numDeletedRows;constructor(e){this.numDeletedRows=e}};o();var _e=i({is(t){return t.kind==="LimitNode"},create(t){return i({kind:"LimitNode",limit:t})}});var rr=class t{#e;constructor(e){this.#e=i(e)}where(...e){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,w(e))})}whereRef(e,r,n){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,R(e,r,n))})}clearWhere(){return new t({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ie(e,r))})}using(e){return new t({...this.#e,queryNode:Ae.cloneWithUsing(this.#e.queryNode,oe(e))})}innerJoin(...e){return this.#t("InnerJoin",e)}leftJoin(...e){return this.#t("LeftJoin",e)}rightJoin(...e){return this.#t("RightJoin",e)}fullJoin(...e){return this.#t("FullJoin",e)}#t(e,r){return new t({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Ie(e,r))})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,A(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,D(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,A(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,D(e))})}clearReturning(){return new t({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}clearLimit(){return new t({...this.#e,queryNode:Ae.cloneWithoutLimit(this.#e.queryNode)})}orderBy(...e){return new t({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,Y(e))})}clearOrderBy(){return new t({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}limit(e){return new t({...this.#e,queryNode:Ae.cloneWithLimit(this.#e.queryNode,_e.create(x(e)))})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:n}=this.#e.executor,a=e.query;return a.returning&&n.supportsReturning||a.output&&n.supportsOutput?r.rows:[new tr(r.numAffectedRows??BigInt(0))]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=Z){let r=await this.executeTakeFirst();if(r===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),n=this.#e.executor.stream(r,e,this.#e.queryId);for await(let a of n)yield*a.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};o();o();var ir=class{numUpdatedRows;numChangedRows;constructor(e,r){this.numUpdatedRows=e,this.numChangedRows=r}};var et=class t{#e;constructor(e){this.#e=i(e)}where(...e){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,w(e))})}whereRef(e,r,n){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,R(e,r,n))})}clearWhere(){return new t({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ie(e,r))})}from(e){return new t({...this.#e,queryNode:he.cloneWithFromItems(this.#e.queryNode,oe(e))})}innerJoin(...e){return this.#t("InnerJoin",e)}leftJoin(...e){return this.#t("LeftJoin",e)}rightJoin(...e){return this.#t("RightJoin",e)}fullJoin(...e){return this.#t("FullJoin",e)}#t(e,r){return new t({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Ie(e,r))})}orderBy(...e){return new t({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,Y(e))})}clearOrderBy(){return new t({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}limit(e){return new t({...this.#e,queryNode:he.cloneWithLimit(this.#e.queryNode,_e.create(x(e)))})}set(...e){return new t({...this.#e,queryNode:he.cloneWithUpdates(this.#e.queryNode,co(...e))})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,A(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,D(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,A(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,D(e))})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}clearReturning(){return new t({...this.#e,queryNode:u.cloneWithoutReturning(this.#e.queryNode)})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:n}=this.#e.executor,a=e.query;return a.returning&&n.supportsReturning||a.output&&n.supportsOutput?r.rows:[new ir(r.numAffectedRows??BigInt(0),r.numChangedRows)]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=Z){let r=await this.executeTakeFirst();if(r===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),n=this.#e.executor.stream(r,e,this.#e.queryId);for await(let a of n)yield*a.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};o();o();var pi=i({is(t){return t.kind==="CommonTableExpressionNameNode"},create(t,e){return i({kind:"CommonTableExpressionNameNode",table:j.create(t),columns:e?i(e.map(c.create)):void 0})}});o();o();var tt=i({is(t){return t.kind==="CommonTableExpressionNode"},create(t,e){return i({kind:"CommonTableExpressionNode",name:t,expression:e})},cloneWith(t,e){return i({...t,...e})}});var or=class t{#e;constructor(e){this.#e=i(e)}materialized(){return new t({...this.#e,node:tt.cloneWith(this.#e.node,{materialized:!0})})}notMaterialized(){return new t({...this.#e,node:tt.cloneWith(this.#e.node,{materialized:!1})})}toOperationNode(){return this.#e.node}};function hi(t,e){let r=e(No()).toOperationNode();return b(t)?t(an(r)).toOperationNode():tt.create(fo(t),r)}function an(t){return e=>new or({node:tt.create(fo(e),t)})}function fo(t){if(t.includes("(")){let e=t.split(/[\(\)]/),r=e[0],n=e[1].split(",").map(a=>a.trim());return pi.create(r,n)}else return pi.create(t)}o();var It=i({is(t){return t.kind==="WithNode"},create(t,e){return i({kind:"WithNode",expressions:i([t]),...e})},cloneWithExpression(t,e){return i({...t,expressions:i([...t.expressions,e])})}});o();o();var yo=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"];function xo(t){let e="";for(let r=0;r<t;++r)e+=un();return e}function un(){return yo[~~(Math.random()*yo.length)]}function m(){return new ci}var ci=class{#e;get queryId(){return this.#e===void 0&&(this.#e=xo(8)),this.#e}};o();o();o();var Re=class{nodeStack=[];#e=i({AliasNode:this.transformAlias.bind(this),ColumnNode:this.transformColumn.bind(this),IdentifierNode:this.transformIdentifier.bind(this),SchemableIdentifierNode:this.transformSchemableIdentifier.bind(this),RawNode:this.transformRaw.bind(this),ReferenceNode:this.transformReference.bind(this),SelectQueryNode:this.transformSelectQuery.bind(this),SelectionNode:this.transformSelection.bind(this),TableNode:this.transformTable.bind(this),FromNode:this.transformFrom.bind(this),SelectAllNode:this.transformSelectAll.bind(this),AndNode:this.transformAnd.bind(this),OrNode:this.transformOr.bind(this),ValueNode:this.transformValue.bind(this),ValueListNode:this.transformValueList.bind(this),PrimitiveValueListNode:this.transformPrimitiveValueList.bind(this),ParensNode:this.transformParens.bind(this),JoinNode:this.transformJoin.bind(this),OperatorNode:this.transformOperator.bind(this),WhereNode:this.transformWhere.bind(this),InsertQueryNode:this.transformInsertQuery.bind(this),DeleteQueryNode:this.transformDeleteQuery.bind(this),ReturningNode:this.transformReturning.bind(this),CreateTableNode:this.transformCreateTable.bind(this),AddColumnNode:this.transformAddColumn.bind(this),ColumnDefinitionNode:this.transformColumnDefinition.bind(this),DropTableNode:this.transformDropTable.bind(this),DataTypeNode:this.transformDataType.bind(this),OrderByNode:this.transformOrderBy.bind(this),OrderByItemNode:this.transformOrderByItem.bind(this),GroupByNode:this.transformGroupBy.bind(this),GroupByItemNode:this.transformGroupByItem.bind(this),UpdateQueryNode:this.transformUpdateQuery.bind(this),ColumnUpdateNode:this.transformColumnUpdate.bind(this),LimitNode:this.transformLimit.bind(this),OffsetNode:this.transformOffset.bind(this),OnConflictNode:this.transformOnConflict.bind(this),OnDuplicateKeyNode:this.transformOnDuplicateKey.bind(this),CreateIndexNode:this.transformCreateIndex.bind(this),DropIndexNode:this.transformDropIndex.bind(this),ListNode:this.transformList.bind(this),PrimaryKeyConstraintNode:this.transformPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.transformUniqueConstraint.bind(this),ReferencesNode:this.transformReferences.bind(this),CheckConstraintNode:this.transformCheckConstraint.bind(this),WithNode:this.transformWith.bind(this),CommonTableExpressionNode:this.transformCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.transformCommonTableExpressionName.bind(this),HavingNode:this.transformHaving.bind(this),CreateSchemaNode:this.transformCreateSchema.bind(this),DropSchemaNode:this.transformDropSchema.bind(this),AlterTableNode:this.transformAlterTable.bind(this),DropColumnNode:this.transformDropColumn.bind(this),RenameColumnNode:this.transformRenameColumn.bind(this),AlterColumnNode:this.transformAlterColumn.bind(this),ModifyColumnNode:this.transformModifyColumn.bind(this),AddConstraintNode:this.transformAddConstraint.bind(this),DropConstraintNode:this.transformDropConstraint.bind(this),RenameConstraintNode:this.transformRenameConstraint.bind(this),ForeignKeyConstraintNode:this.transformForeignKeyConstraint.bind(this),CreateViewNode:this.transformCreateView.bind(this),RefreshMaterializedViewNode:this.transformRefreshMaterializedView.bind(this),DropViewNode:this.transformDropView.bind(this),GeneratedNode:this.transformGenerated.bind(this),DefaultValueNode:this.transformDefaultValue.bind(this),OnNode:this.transformOn.bind(this),ValuesNode:this.transformValues.bind(this),SelectModifierNode:this.transformSelectModifier.bind(this),CreateTypeNode:this.transformCreateType.bind(this),DropTypeNode:this.transformDropType.bind(this),ExplainNode:this.transformExplain.bind(this),DefaultInsertValueNode:this.transformDefaultInsertValue.bind(this),AggregateFunctionNode:this.transformAggregateFunction.bind(this),OverNode:this.transformOver.bind(this),PartitionByNode:this.transformPartitionBy.bind(this),PartitionByItemNode:this.transformPartitionByItem.bind(this),SetOperationNode:this.transformSetOperation.bind(this),BinaryOperationNode:this.transformBinaryOperation.bind(this),UnaryOperationNode:this.transformUnaryOperation.bind(this),UsingNode:this.transformUsing.bind(this),FunctionNode:this.transformFunction.bind(this),CaseNode:this.transformCase.bind(this),WhenNode:this.transformWhen.bind(this),JSONReferenceNode:this.transformJSONReference.bind(this),JSONPathNode:this.transformJSONPath.bind(this),JSONPathLegNode:this.transformJSONPathLeg.bind(this),JSONOperatorChainNode:this.transformJSONOperatorChain.bind(this),TupleNode:this.transformTuple.bind(this),MergeQueryNode:this.transformMergeQuery.bind(this),MatchedNode:this.transformMatched.bind(this),AddIndexNode:this.transformAddIndex.bind(this),CastNode:this.transformCast.bind(this),FetchNode:this.transformFetch.bind(this),TopNode:this.transformTop.bind(this),OutputNode:this.transformOutput.bind(this),OrActionNode:this.transformOrAction.bind(this),CollateNode:this.transformCollate.bind(this)});transformNode(e,r){if(!e)return e;this.nodeStack.push(e);let n=this.transformNodeImpl(e,r);return this.nodeStack.pop(),i(n)}transformNodeImpl(e,r){return this.#e[e.kind](e,r)}transformNodeList(e,r){return e&&i(e.map(n=>this.transformNode(n,r)))}transformSelectQuery(e,r){return{kind:"SelectQueryNode",from:this.transformNode(e.from,r),selections:this.transformNodeList(e.selections,r),distinctOn:this.transformNodeList(e.distinctOn,r),joins:this.transformNodeList(e.joins,r),groupBy:this.transformNode(e.groupBy,r),orderBy:this.transformNode(e.orderBy,r),where:this.transformNode(e.where,r),frontModifiers:this.transformNodeList(e.frontModifiers,r),endModifiers:this.transformNodeList(e.endModifiers,r),limit:this.transformNode(e.limit,r),offset:this.transformNode(e.offset,r),with:this.transformNode(e.with,r),having:this.transformNode(e.having,r),explain:this.transformNode(e.explain,r),setOperations:this.transformNodeList(e.setOperations,r),fetch:this.transformNode(e.fetch,r),top:this.transformNode(e.top,r)}}transformSelection(e,r){return{kind:"SelectionNode",selection:this.transformNode(e.selection,r)}}transformColumn(e,r){return{kind:"ColumnNode",column:this.transformNode(e.column,r)}}transformAlias(e,r){return{kind:"AliasNode",node:this.transformNode(e.node,r),alias:this.transformNode(e.alias,r)}}transformTable(e,r){return{kind:"TableNode",table:this.transformNode(e.table,r)}}transformFrom(e,r){return{kind:"FromNode",froms:this.transformNodeList(e.froms,r)}}transformReference(e,r){return{kind:"ReferenceNode",column:this.transformNode(e.column,r),table:this.transformNode(e.table,r)}}transformAnd(e,r){return{kind:"AndNode",left:this.transformNode(e.left,r),right:this.transformNode(e.right,r)}}transformOr(e,r){return{kind:"OrNode",left:this.transformNode(e.left,r),right:this.transformNode(e.right,r)}}transformValueList(e,r){return{kind:"ValueListNode",values:this.transformNodeList(e.values,r)}}transformParens(e,r){return{kind:"ParensNode",node:this.transformNode(e.node,r)}}transformJoin(e,r){return{kind:"JoinNode",joinType:e.joinType,table:this.transformNode(e.table,r),on:this.transformNode(e.on,r)}}transformRaw(e,r){return{kind:"RawNode",sqlFragments:i([...e.sqlFragments]),parameters:this.transformNodeList(e.parameters,r)}}transformWhere(e,r){return{kind:"WhereNode",where:this.transformNode(e.where,r)}}transformInsertQuery(e,r){return{kind:"InsertQueryNode",into:this.transformNode(e.into,r),columns:this.transformNodeList(e.columns,r),values:this.transformNode(e.values,r),returning:this.transformNode(e.returning,r),onConflict:this.transformNode(e.onConflict,r),onDuplicateKey:this.transformNode(e.onDuplicateKey,r),endModifiers:this.transformNodeList(e.endModifiers,r),with:this.transformNode(e.with,r),ignore:e.ignore,orAction:this.transformNode(e.orAction,r),replace:e.replace,explain:this.transformNode(e.explain,r),defaultValues:e.defaultValues,top:this.transformNode(e.top,r),output:this.transformNode(e.output,r)}}transformValues(e,r){return{kind:"ValuesNode",values:this.transformNodeList(e.values,r)}}transformDeleteQuery(e,r){return{kind:"DeleteQueryNode",from:this.transformNode(e.from,r),using:this.transformNode(e.using,r),joins:this.transformNodeList(e.joins,r),where:this.transformNode(e.where,r),returning:this.transformNode(e.returning,r),endModifiers:this.transformNodeList(e.endModifiers,r),with:this.transformNode(e.with,r),orderBy:this.transformNode(e.orderBy,r),limit:this.transformNode(e.limit,r),explain:this.transformNode(e.explain,r),top:this.transformNode(e.top,r),output:this.transformNode(e.output,r)}}transformReturning(e,r){return{kind:"ReturningNode",selections:this.transformNodeList(e.selections,r)}}transformCreateTable(e,r){return{kind:"CreateTableNode",table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r),constraints:this.transformNodeList(e.constraints,r),temporary:e.temporary,ifNotExists:e.ifNotExists,onCommit:e.onCommit,frontModifiers:this.transformNodeList(e.frontModifiers,r),endModifiers:this.transformNodeList(e.endModifiers,r),selectQuery:this.transformNode(e.selectQuery,r)}}transformColumnDefinition(e,r){return{kind:"ColumnDefinitionNode",column:this.transformNode(e.column,r),dataType:this.transformNode(e.dataType,r),references:this.transformNode(e.references,r),primaryKey:e.primaryKey,autoIncrement:e.autoIncrement,unique:e.unique,notNull:e.notNull,unsigned:e.unsigned,defaultTo:this.transformNode(e.defaultTo,r),check:this.transformNode(e.check,r),generated:this.transformNode(e.generated,r),frontModifiers:this.transformNodeList(e.frontModifiers,r),endModifiers:this.transformNodeList(e.endModifiers,r),nullsNotDistinct:e.nullsNotDistinct,identity:e.identity,ifNotExists:e.ifNotExists}}transformAddColumn(e,r){return{kind:"AddColumnNode",column:this.transformNode(e.column,r)}}transformDropTable(e,r){return{kind:"DropTableNode",table:this.transformNode(e.table,r),ifExists:e.ifExists,cascade:e.cascade}}transformOrderBy(e,r){return{kind:"OrderByNode",items:this.transformNodeList(e.items,r)}}transformOrderByItem(e,r){return{kind:"OrderByItemNode",orderBy:this.transformNode(e.orderBy,r),direction:this.transformNode(e.direction,r),collation:this.transformNode(e.collation,r),nulls:e.nulls}}transformGroupBy(e,r){return{kind:"GroupByNode",items:this.transformNodeList(e.items,r)}}transformGroupByItem(e,r){return{kind:"GroupByItemNode",groupBy:this.transformNode(e.groupBy,r)}}transformUpdateQuery(e,r){return{kind:"UpdateQueryNode",table:this.transformNode(e.table,r),from:this.transformNode(e.from,r),joins:this.transformNodeList(e.joins,r),where:this.transformNode(e.where,r),updates:this.transformNodeList(e.updates,r),returning:this.transformNode(e.returning,r),endModifiers:this.transformNodeList(e.endModifiers,r),with:this.transformNode(e.with,r),explain:this.transformNode(e.explain,r),limit:this.transformNode(e.limit,r),top:this.transformNode(e.top,r),output:this.transformNode(e.output,r),orderBy:this.transformNode(e.orderBy,r)}}transformColumnUpdate(e,r){return{kind:"ColumnUpdateNode",column:this.transformNode(e.column,r),value:this.transformNode(e.value,r)}}transformLimit(e,r){return{kind:"LimitNode",limit:this.transformNode(e.limit,r)}}transformOffset(e,r){return{kind:"OffsetNode",offset:this.transformNode(e.offset,r)}}transformOnConflict(e,r){return{kind:"OnConflictNode",columns:this.transformNodeList(e.columns,r),constraint:this.transformNode(e.constraint,r),indexExpression:this.transformNode(e.indexExpression,r),indexWhere:this.transformNode(e.indexWhere,r),updates:this.transformNodeList(e.updates,r),updateWhere:this.transformNode(e.updateWhere,r),doNothing:e.doNothing}}transformOnDuplicateKey(e,r){return{kind:"OnDuplicateKeyNode",updates:this.transformNodeList(e.updates,r)}}transformCreateIndex(e,r){return{kind:"CreateIndexNode",name:this.transformNode(e.name,r),table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r),unique:e.unique,using:this.transformNode(e.using,r),ifNotExists:e.ifNotExists,where:this.transformNode(e.where,r),nullsNotDistinct:e.nullsNotDistinct}}transformList(e,r){return{kind:"ListNode",items:this.transformNodeList(e.items,r)}}transformDropIndex(e,r){return{kind:"DropIndexNode",name:this.transformNode(e.name,r),table:this.transformNode(e.table,r),ifExists:e.ifExists,cascade:e.cascade}}transformPrimaryKeyConstraint(e,r){return{kind:"PrimaryKeyConstraintNode",columns:this.transformNodeList(e.columns,r),name:this.transformNode(e.name,r),deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformUniqueConstraint(e,r){return{kind:"UniqueConstraintNode",columns:this.transformNodeList(e.columns,r),name:this.transformNode(e.name,r),nullsNotDistinct:e.nullsNotDistinct,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformForeignKeyConstraint(e,r){return{kind:"ForeignKeyConstraintNode",columns:this.transformNodeList(e.columns,r),references:this.transformNode(e.references,r),name:this.transformNode(e.name,r),onDelete:e.onDelete,onUpdate:e.onUpdate,deferrable:e.deferrable,initiallyDeferred:e.initiallyDeferred}}transformSetOperation(e,r){return{kind:"SetOperationNode",operator:e.operator,expression:this.transformNode(e.expression,r),all:e.all}}transformReferences(e,r){return{kind:"ReferencesNode",table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r),onDelete:e.onDelete,onUpdate:e.onUpdate}}transformCheckConstraint(e,r){return{kind:"CheckConstraintNode",expression:this.transformNode(e.expression,r),name:this.transformNode(e.name,r)}}transformWith(e,r){return{kind:"WithNode",expressions:this.transformNodeList(e.expressions,r),recursive:e.recursive}}transformCommonTableExpression(e,r){return{kind:"CommonTableExpressionNode",name:this.transformNode(e.name,r),materialized:e.materialized,expression:this.transformNode(e.expression,r)}}transformCommonTableExpressionName(e,r){return{kind:"CommonTableExpressionNameNode",table:this.transformNode(e.table,r),columns:this.transformNodeList(e.columns,r)}}transformHaving(e,r){return{kind:"HavingNode",having:this.transformNode(e.having,r)}}transformCreateSchema(e,r){return{kind:"CreateSchemaNode",schema:this.transformNode(e.schema,r),ifNotExists:e.ifNotExists}}transformDropSchema(e,r){return{kind:"DropSchemaNode",schema:this.transformNode(e.schema,r),ifExists:e.ifExists,cascade:e.cascade}}transformAlterTable(e,r){return{kind:"AlterTableNode",table:this.transformNode(e.table,r),renameTo:this.transformNode(e.renameTo,r),setSchema:this.transformNode(e.setSchema,r),columnAlterations:this.transformNodeList(e.columnAlterations,r),addConstraint:this.transformNode(e.addConstraint,r),dropConstraint:this.transformNode(e.dropConstraint,r),renameConstraint:this.transformNode(e.renameConstraint,r),addIndex:this.transformNode(e.addIndex,r),dropIndex:this.transformNode(e.dropIndex,r)}}transformDropColumn(e,r){return{kind:"DropColumnNode",column:this.transformNode(e.column,r)}}transformRenameColumn(e,r){return{kind:"RenameColumnNode",column:this.transformNode(e.column,r),renameTo:this.transformNode(e.renameTo,r)}}transformAlterColumn(e,r){return{kind:"AlterColumnNode",column:this.transformNode(e.column,r),dataType:this.transformNode(e.dataType,r),dataTypeExpression:this.transformNode(e.dataTypeExpression,r),setDefault:this.transformNode(e.setDefault,r),dropDefault:e.dropDefault,setNotNull:e.setNotNull,dropNotNull:e.dropNotNull}}transformModifyColumn(e,r){return{kind:"ModifyColumnNode",column:this.transformNode(e.column,r)}}transformAddConstraint(e,r){return{kind:"AddConstraintNode",constraint:this.transformNode(e.constraint,r)}}transformDropConstraint(e,r){return{kind:"DropConstraintNode",constraintName:this.transformNode(e.constraintName,r),ifExists:e.ifExists,modifier:e.modifier}}transformRenameConstraint(e,r){return{kind:"RenameConstraintNode",oldName:this.transformNode(e.oldName,r),newName:this.transformNode(e.newName,r)}}transformCreateView(e,r){return{kind:"CreateViewNode",name:this.transformNode(e.name,r),temporary:e.temporary,orReplace:e.orReplace,ifNotExists:e.ifNotExists,materialized:e.materialized,columns:this.transformNodeList(e.columns,r),as:this.transformNode(e.as,r)}}transformRefreshMaterializedView(e,r){return{kind:"RefreshMaterializedViewNode",name:this.transformNode(e.name,r),concurrently:e.concurrently,withNoData:e.withNoData}}transformDropView(e,r){return{kind:"DropViewNode",name:this.transformNode(e.name,r),ifExists:e.ifExists,materialized:e.materialized,cascade:e.cascade}}transformGenerated(e,r){return{kind:"GeneratedNode",byDefault:e.byDefault,always:e.always,identity:e.identity,stored:e.stored,expression:this.transformNode(e.expression,r)}}transformDefaultValue(e,r){return{kind:"DefaultValueNode",defaultValue:this.transformNode(e.defaultValue,r)}}transformOn(e,r){return{kind:"OnNode",on:this.transformNode(e.on,r)}}transformSelectModifier(e,r){return{kind:"SelectModifierNode",modifier:e.modifier,rawModifier:this.transformNode(e.rawModifier,r),of:this.transformNodeList(e.of,r)}}transformCreateType(e,r){return{kind:"CreateTypeNode",name:this.transformNode(e.name,r),enum:this.transformNode(e.enum,r)}}transformDropType(e,r){return{kind:"DropTypeNode",name:this.transformNode(e.name,r),ifExists:e.ifExists}}transformExplain(e,r){return{kind:"ExplainNode",format:e.format,options:this.transformNode(e.options,r)}}transformSchemableIdentifier(e,r){return{kind:"SchemableIdentifierNode",schema:this.transformNode(e.schema,r),identifier:this.transformNode(e.identifier,r)}}transformAggregateFunction(e,r){return{kind:"AggregateFunctionNode",func:e.func,aggregated:this.transformNodeList(e.aggregated,r),distinct:e.distinct,orderBy:this.transformNode(e.orderBy,r),withinGroup:this.transformNode(e.withinGroup,r),filter:this.transformNode(e.filter,r),over:this.transformNode(e.over,r)}}transformOver(e,r){return{kind:"OverNode",orderBy:this.transformNode(e.orderBy,r),partitionBy:this.transformNode(e.partitionBy,r)}}transformPartitionBy(e,r){return{kind:"PartitionByNode",items:this.transformNodeList(e.items,r)}}transformPartitionByItem(e,r){return{kind:"PartitionByItemNode",partitionBy:this.transformNode(e.partitionBy,r)}}transformBinaryOperation(e,r){return{kind:"BinaryOperationNode",leftOperand:this.transformNode(e.leftOperand,r),operator:this.transformNode(e.operator,r),rightOperand:this.transformNode(e.rightOperand,r)}}transformUnaryOperation(e,r){return{kind:"UnaryOperationNode",operator:this.transformNode(e.operator,r),operand:this.transformNode(e.operand,r)}}transformUsing(e,r){return{kind:"UsingNode",tables:this.transformNodeList(e.tables,r)}}transformFunction(e,r){return{kind:"FunctionNode",func:e.func,arguments:this.transformNodeList(e.arguments,r)}}transformCase(e,r){return{kind:"CaseNode",value:this.transformNode(e.value,r),when:this.transformNodeList(e.when,r),else:this.transformNode(e.else,r),isStatement:e.isStatement}}transformWhen(e,r){return{kind:"WhenNode",condition:this.transformNode(e.condition,r),result:this.transformNode(e.result,r)}}transformJSONReference(e,r){return{kind:"JSONReferenceNode",reference:this.transformNode(e.reference,r),traversal:this.transformNode(e.traversal,r)}}transformJSONPath(e,r){return{kind:"JSONPathNode",inOperator:this.transformNode(e.inOperator,r),pathLegs:this.transformNodeList(e.pathLegs,r)}}transformJSONPathLeg(e,r){return{kind:"JSONPathLegNode",type:e.type,value:e.value}}transformJSONOperatorChain(e,r){return{kind:"JSONOperatorChainNode",operator:this.transformNode(e.operator,r),values:this.transformNodeList(e.values,r)}}transformTuple(e,r){return{kind:"TupleNode",values:this.transformNodeList(e.values,r)}}transformMergeQuery(e,r){return{kind:"MergeQueryNode",into:this.transformNode(e.into,r),using:this.transformNode(e.using,r),whens:this.transformNodeList(e.whens,r),with:this.transformNode(e.with,r),top:this.transformNode(e.top,r),endModifiers:this.transformNodeList(e.endModifiers,r),output:this.transformNode(e.output,r),returning:this.transformNode(e.returning,r)}}transformMatched(e,r){return{kind:"MatchedNode",not:e.not,bySource:e.bySource}}transformAddIndex(e,r){return{kind:"AddIndexNode",name:this.transformNode(e.name,r),columns:this.transformNodeList(e.columns,r),unique:e.unique,using:this.transformNode(e.using,r),ifNotExists:e.ifNotExists}}transformCast(e,r){return{kind:"CastNode",expression:this.transformNode(e.expression,r),dataType:this.transformNode(e.dataType,r)}}transformFetch(e,r){return{kind:"FetchNode",rowCount:this.transformNode(e.rowCount,r),modifier:e.modifier}}transformTop(e,r){return{kind:"TopNode",expression:e.expression,modifiers:e.modifiers}}transformOutput(e,r){return{kind:"OutputNode",selections:this.transformNodeList(e.selections,r)}}transformDataType(e,r){return e}transformSelectAll(e,r){return e}transformIdentifier(e,r){return e}transformValue(e,r){return e}transformPrimitiveValueList(e,r){return e}transformOperator(e,r){return e}transformDefaultInsertValue(e,r){return e}transformOrAction(e,r){return e}transformCollate(e,r){return e}};var dn=i({AlterTableNode:!0,CreateIndexNode:!0,CreateSchemaNode:!0,CreateTableNode:!0,CreateTypeNode:!0,CreateViewNode:!0,RefreshMaterializedViewNode:!0,DeleteQueryNode:!0,DropIndexNode:!0,DropSchemaNode:!0,DropTableNode:!0,DropTypeNode:!0,DropViewNode:!0,InsertQueryNode:!0,RawNode:!0,SelectQueryNode:!0,UpdateQueryNode:!0,MergeQueryNode:!0}),pn={json_agg:!0,to_json:!0},nr=class extends Re{#e;#t=new Set;#r=new Set;constructor(e){super(),this.#e=e}transformNodeImpl(e,r){if(!this.#o(e))return super.transformNodeImpl(e,r);let n=this.#d(e);for(let h of n)this.#r.add(h);let a=this.#a(e);for(let h of a)this.#t.add(h);let d=super.transformNodeImpl(e,r);for(let h of a)this.#t.delete(h);for(let h of n)this.#r.delete(h);return d}transformSchemableIdentifier(e,r){let n=super.transformSchemableIdentifier(e,r);return n.schema||!this.#t.has(e.identifier.name)?n:{...n,schema:p.create(this.#e)}}transformReferences(e,r){let n=super.transformReferences(e,r);return n.table.table.schema?n:{...n,table:j.createWithSchema(this.#e,n.table.table.identifier.name)}}transformAggregateFunction(e,r){return{...super.transformAggregateFunction({...e,aggregated:[]},r),aggregated:this.#i(e,r,"aggregated")}}transformFunction(e,r){return{...super.transformFunction({...e,arguments:[]},r),arguments:this.#i(e,r,"arguments")}}#i(e,r,n){return pn[e.func]?e[n].map(a=>!j.is(a)||a.table.schema?this.transformNode(a,r):{...a,table:this.transformIdentifier(a.table.identifier,r)}):this.transformNodeList(e[n],r)}#o(e){return e.kind in dn}#a(e){let r=new Set;if("name"in e&&e.name&&F.is(e.name)&&this.#s(e.name,r),"from"in e&&e.from)for(let n of e.from.froms)this.#n(n,r);if("into"in e&&e.into&&this.#n(e.into,r),"table"in e&&e.table&&this.#n(e.table,r),"joins"in e&&e.joins)for(let n of e.joins)this.#n(n.table,r);return"using"in e&&e.using&&this.#n(e.using,r),r}#d(e){let r=new Set;return"with"in e&&e.with&&this.#u(e.with,r),r}#n(e,r){if(j.is(e))this.#s(e.table,r);else if(I.is(e)&&j.is(e.node))this.#s(e.node.table,r);else if(Gt.is(e))for(let n of e.items)this.#n(n,r)}#s(e,r){let n=e.identifier.name;!this.#t.has(n)&&!this.#r.has(n)&&r.add(n)}#u(e,r){for(let n of e.expressions){let a=n.name.table.table.identifier.name;this.#r.has(a)||r.add(a)}}};var _=class{#e;constructor(e){this.#e=new nr(e)}transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}async transformResult(e){return e.result}};o();o();o();var wo=i({is(t){return t.kind==="MatchedNode"},create(t,e=!1){return i({kind:"MatchedNode",not:t,bySource:e})}});function mi(t,e,r){return Oe.create(Xe([wo.create(!t.isMatched,t.bySource),...e&&e.length>0?[e.length===3&&r?R(e[0],e[1],e[2]):w(e)]:[]],"and",!1))}function rt(t){return v(t)?C.create([t],[]):O(t)?t.toOperationNode():t}o();o();o();o();var Rt=class{#e;#t;#r;constructor(){this.#e=new Promise((e,r)=>{this.#r=r,this.#t=e})}get promise(){return this.#e}resolve=e=>{this.#t&&this.#t(e)};reject=e=>{this.#r&&this.#r(e)}};async function sr(t){let e=new Rt,r=new Rt;return t.provideConnection(async n=>(e.resolve(n),await r.promise)).catch(n=>e.reject(n)),i({connection:await e.promise,release:r.resolve})}var hn=i([]),it=class{#e;constructor(e=hn){this.#e=e}get plugins(){return this.#e}transformQuery(e,r){for(let n of this.#e){let a=n.transformQuery({node:e,queryId:r});if(a.kind===e.kind)e=a;else throw new Error(["KyselyPlugin.transformQuery must return a node","of the same kind that was given to it.",`The plugin was given a ${e.kind}`,`but it returned a ${a.kind}`].join(" "))}return e}async executeQuery(e,r){return await this.provideConnection(async n=>{let a=await n.executeQuery(e);return"numUpdatedOrDeletedRows"in a&&Te("kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`."),await this.#t(a,r)})}async*stream(e,r,n){let{connection:a,release:d}=await sr(this);try{for await(let h of a.streamQuery(e,r))yield await this.#t(h,n)}finally{d()}}async#t(e,r){for(let n of this.#e)e=await n.transformResult({result:e,queryId:r});return e}};var li=class t extends it{get adapter(){throw new Error("this query cannot be compiled to SQL")}compileQuery(){throw new Error("this query cannot be compiled to SQL")}provideConnection(){throw new Error("this query cannot be executed")}withConnectionProvider(){throw new Error("this query cannot have a connection provider")}withPlugin(e){return new t([...this.plugins,e])}withPlugins(e){return new t([...this.plugins,...e])}withPluginAtFront(e){return new t([e,...this.plugins])}withoutPlugins(){return new t([])}},qe=new li;o();var ar=class{numChangedRows;constructor(e){this.numChangedRows=e}};var ur=class t{#e;constructor(e){this.#e=i(e)}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ie(e,r))})}using(...e){return new De({...this.#e,queryNode:q.cloneWithUsing(this.#e.queryNode,Ie("Using",e))})}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,A(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,D(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,A(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,D(e))})}},De=class t{#e;constructor(e){this.#e=i(e)}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,e.toOperationNode())})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ie(e,r))})}whenMatched(){return this.#t([])}whenMatchedAnd(...e){return this.#t(e)}whenMatchedAndRef(e,r,n){return this.#t([e,r,n],!0)}#t(e,r){return new dr({...this.#e,queryNode:q.cloneWithWhen(this.#e.queryNode,mi({isMatched:!0},e,r))})}whenNotMatched(){return this.#r([])}whenNotMatchedAnd(...e){return this.#r(e)}whenNotMatchedAndRef(e,r,n){return this.#r([e,r,n],!0)}whenNotMatchedBySource(){return this.#r([],!1,!0)}whenNotMatchedBySourceAnd(...e){return this.#r(e,!1,!0)}whenNotMatchedBySourceAndRef(e,r,n){return this.#r([e,r,n],!0,!0)}returning(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,A(e))})}returningAll(e){return new t({...this.#e,queryNode:u.cloneWithReturning(this.#e.queryNode,D(e))})}output(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,A(e))})}outputAll(e){return new t({...this.#e,queryNode:u.cloneWithOutput(this.#e.queryNode,D(e))})}#r(e,r=!1,n=!1){let a={...this.#e,queryNode:q.cloneWithWhen(this.#e.queryNode,mi({isMatched:!1,bySource:n},e,r))},d=n?dr:fi;return new d(a)}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile(),r=await this.#e.executor.executeQuery(e,this.#e.queryId),{adapter:n}=this.#e.executor,a=e.query;return a.returning&&n.supportsReturning||a.output&&n.supportsOutput?r.rows:[new ar(r.numAffectedRows)]}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=Z){let r=await this.executeTakeFirst();if(r===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}},dr=class{#e;constructor(e){this.#e=i(e)}thenDelete(){return new De({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,rt("delete"))})}thenDoNothing(){return new De({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,rt("do nothing"))})}thenUpdate(e){return new De({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,rt(e(new et({queryId:this.#e.queryId,executor:qe,queryNode:he.createWithoutTable()}))))})}thenUpdateSet(...e){return this.thenUpdate(r=>r.set(...e))}},fi=class{#e;constructor(e){this.#e=i(e)}thenDoNothing(){return new De({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,rt("do nothing"))})}thenInsertValues(e){let[r,n]=Zt(e);return new De({...this.#e,queryNode:q.cloneWithThen(this.#e.queryNode,rt(W.cloneWith(W.createWithoutInto(),{columns:r,values:n})))})}};var ot=class t{#e;constructor(e){this.#e=i(e)}selectFrom(e){return qt({queryId:m(),executor:this.#e.executor,queryNode:y.createFrom(oe(e),this.#e.withNode)})}selectNoFrom(e){return qt({queryId:m(),executor:this.#e.executor,queryNode:y.cloneWithSelections(y.create(this.#e.withNode),A(e))})}insertInto(e){return new At({queryId:m(),executor:this.#e.executor,queryNode:W.create(f(e),this.#e.withNode)})}replaceInto(e){return new At({queryId:m(),executor:this.#e.executor,queryNode:W.create(f(e),this.#e.withNode,!0)})}deleteFrom(e){return new rr({queryId:m(),executor:this.#e.executor,queryNode:Ae.create(oe(e),this.#e.withNode)})}updateTable(e){return new et({queryId:m(),executor:this.#e.executor,queryNode:he.create(oe(e),this.#e.withNode)})}mergeInto(e){return new ur({queryId:m(),executor:this.#e.executor,queryNode:q.create(Ni(e),this.#e.withNode)})}with(e,r){let n=hi(e,r);return new t({...this.#e,withNode:this.#e.withNode?It.cloneWithExpression(this.#e.withNode,n):It.create(n)})}withRecursive(e,r){let n=hi(e,r);return new t({...this.#e,withNode:this.#e.withNode?It.cloneWithExpression(this.#e.withNode,n):It.create(n,{recursive:!0})})}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new _(e))})}};function No(){return new ot({executor:qe})}function Oo(t,e){return new Ht({joinNode:Ne.create(t,Me(e))})}function go(){return new Yt({overNode:Tt.create()})}function Ie(t,e){if(e.length===3)return mn(t,e[0],e[1],e[2]);if(e.length===2)return cn(t,e[0],e[1]);if(e.length===1)return ln(t,e[0]);throw new Error("not implemented")}function cn(t,e,r){return r(Oo(t,e)).toOperationNode()}function mn(t,e,r,n){return Ne.createWithOn(t,Me(e),R(r,"=",n))}function ln(t,e){return Ne.create(t,Me(e))}o();var vo=i({is(t){return t.kind==="OffsetNode"},create(t){return i({kind:"OffsetNode",offset:t})}});o();o();var Co=i({is(t){return t.kind==="GroupByItemNode"},create(t){return i({kind:"GroupByItemNode",groupBy:t})}});function bo(t){return t=b(t)?t(z()):t,xe(t).map(Co.create)}o();o();var pr=i({is(t){return t.kind==="SetOperationNode"},create(t,e,r){return i({kind:"SetOperationNode",operator:t,expression:e,all:r})}});function Fe(t,e,r){return b(e)&&(e=e(hr())),P(e)||(e=[e]),e.map(n=>pr.create(t,$(n),r))}o();var N=class t{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new Dt(this,e)}or(...e){return new yi(te.create(this.#e,w(e)))}and(...e){return new xi(J.create(this.#e,w(e)))}$castTo(){return new t(this.#e)}$notNull(){return new t(this.#e)}toOperationNode(){return this.#e}},Dt=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}toOperationNode(){return I.create(this.#e.toOperationNode(),O(this.#t)?this.#t.toOperationNode():p.create(this.#t))}},yi=class t{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new Dt(this,e)}or(...e){return new t(te.create(this.#e,w(e)))}$castTo(){return new t(this.#e)}toOperationNode(){return pe.create(this.#e)}},xi=class t{#e;constructor(e){this.#e=e}get expressionType(){}as(e){return new Dt(this,e)}and(...e){return new t(J.create(this.#e,w(e)))}$castTo(){return new t(this.#e)}toOperationNode(){return pe.create(this.#e)}};o();o();var Wo={is(t){return t.kind==="FetchNode"},create(t,e){return{kind:"FetchNode",rowCount:S.create(t),modifier:e}}};function So(t,e){if(!We(t)&&!Ke(t))throw new Error(`Invalid fetch row count: ${t}`);if(!fn(e))throw new Error(`Invalid fetch modifier: ${e}`);return Wo.create(t,e)}function fn(t){return t==="only"||t==="with ties"}var wi=class t{#e;constructor(e){this.#e=i(e)}get expressionType(){}get isSelectQueryBuilder(){return!0}where(...e){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,w(e))})}whereRef(e,r,n){return new t({...this.#e,queryNode:u.cloneWithWhere(this.#e.queryNode,R(e,r,n))})}having(...e){return new t({...this.#e,queryNode:y.cloneWithHaving(this.#e.queryNode,w(e))})}havingRef(e,r,n){return new t({...this.#e,queryNode:y.cloneWithHaving(this.#e.queryNode,R(e,r,n))})}select(e){return new t({...this.#e,queryNode:y.cloneWithSelections(this.#e.queryNode,A(e))})}distinctOn(e){return new t({...this.#e,queryNode:y.cloneWithDistinctOn(this.#e.queryNode,xe(e))})}modifyFront(e){return new t({...this.#e,queryNode:y.cloneWithFrontModifier(this.#e.queryNode,ue.createWithExpression(e.toOperationNode()))})}modifyEnd(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.createWithExpression(e.toOperationNode()))})}distinct(){return new t({...this.#e,queryNode:y.cloneWithFrontModifier(this.#e.queryNode,ue.create("Distinct"))})}forUpdate(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.create("ForUpdate",e?bt(e).map(f):void 0))})}forShare(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.create("ForShare",e?bt(e).map(f):void 0))})}forKeyShare(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.create("ForKeyShare",e?bt(e).map(f):void 0))})}forNoKeyUpdate(e){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.create("ForNoKeyUpdate",e?bt(e).map(f):void 0))})}skipLocked(){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.create("SkipLocked"))})}noWait(){return new t({...this.#e,queryNode:u.cloneWithEndModifier(this.#e.queryNode,ue.create("NoWait"))})}selectAll(e){return new t({...this.#e,queryNode:y.cloneWithSelections(this.#e.queryNode,D(e))})}innerJoin(...e){return this.#t("InnerJoin",e)}leftJoin(...e){return this.#t("LeftJoin",e)}rightJoin(...e){return this.#t("RightJoin",e)}fullJoin(...e){return this.#t("FullJoin",e)}crossJoin(...e){return this.#t("CrossJoin",e)}innerJoinLateral(...e){return this.#t("LateralInnerJoin",e)}leftJoinLateral(...e){return this.#t("LateralLeftJoin",e)}crossJoinLateral(...e){return this.#t("LateralCrossJoin",e)}crossApply(...e){return this.#t("CrossApply",e)}outerApply(...e){return this.#t("OuterApply",e)}#t(e,r){return new t({...this.#e,queryNode:u.cloneWithJoin(this.#e.queryNode,Ie(e,r))})}orderBy(...e){return new t({...this.#e,queryNode:u.cloneWithOrderByItems(this.#e.queryNode,Y(e))})}groupBy(e){return new t({...this.#e,queryNode:y.cloneWithGroupByItems(this.#e.queryNode,bo(e))})}limit(e){return new t({...this.#e,queryNode:y.cloneWithLimit(this.#e.queryNode,_e.create(x(e)))})}offset(e){return new t({...this.#e,queryNode:y.cloneWithOffset(this.#e.queryNode,vo.create(x(e)))})}fetch(e,r="only"){return new t({...this.#e,queryNode:y.cloneWithFetch(this.#e.queryNode,So(e,r))})}top(e,r){return new t({...this.#e,queryNode:u.cloneWithTop(this.#e.queryNode,ie(e,r))})}union(e){return new t({...this.#e,queryNode:y.cloneWithSetOperations(this.#e.queryNode,Fe("union",e,!1))})}unionAll(e){return new t({...this.#e,queryNode:y.cloneWithSetOperations(this.#e.queryNode,Fe("union",e,!0))})}intersect(e){return new t({...this.#e,queryNode:y.cloneWithSetOperations(this.#e.queryNode,Fe("intersect",e,!1))})}intersectAll(e){return new t({...this.#e,queryNode:y.cloneWithSetOperations(this.#e.queryNode,Fe("intersect",e,!0))})}except(e){return new t({...this.#e,queryNode:y.cloneWithSetOperations(this.#e.queryNode,Fe("except",e,!1))})}exceptAll(e){return new t({...this.#e,queryNode:y.cloneWithSetOperations(this.#e.queryNode,Fe("except",e,!0))})}as(e){return new Oi(this,e)}clearSelect(){return new t({...this.#e,queryNode:y.cloneWithoutSelections(this.#e.queryNode)})}clearWhere(){return new t({...this.#e,queryNode:u.cloneWithoutWhere(this.#e.queryNode)})}clearLimit(){return new t({...this.#e,queryNode:y.cloneWithoutLimit(this.#e.queryNode)})}clearOffset(){return new t({...this.#e,queryNode:y.cloneWithoutOffset(this.#e.queryNode)})}clearOrderBy(){return new t({...this.#e,queryNode:u.cloneWithoutOrderBy(this.#e.queryNode)})}clearGroupBy(){return new t({...this.#e,queryNode:y.cloneWithoutGroupBy(this.#e.queryNode)})}$call(e){return e(this)}$if(e,r){return e?r(this):new t({...this.#e})}$castTo(){return new t(this.#e)}$narrowType(){return new t(this.#e)}$assertType(){return new t(this.#e)}$asTuple(){return new N(this.toOperationNode())}$asScalar(){return new N(this.toOperationNode())}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.queryNode,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){let e=this.compile();return(await this.#e.executor.executeQuery(e,this.#e.queryId)).rows}async executeTakeFirst(){let[e]=await this.execute();return e}async executeTakeFirstOrThrow(e=Z){let r=await this.executeTakeFirst();if(r===void 0)throw ce(e)?new e(this.toOperationNode()):e(this.toOperationNode());return r}async*stream(e=100){let r=this.compile(),n=this.#e.executor.stream(r,e,this.#e.queryId);for await(let a of n)yield*a.rows}async explain(e,r){return await new t({...this.#e,queryNode:u.cloneWithExplain(this.#e.queryNode,e,r)}).execute()}};function qt(t){return new wi(t)}var Oi=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}get isAliasedSelectQueryBuilder(){return!0}toOperationNode(){return I.create(this.#e.toOperationNode(),p.create(this.#t))}};o();o();var me=i({is(t){return t.kind==="AggregateFunctionNode"},create(t,e=[]){return i({kind:"AggregateFunctionNode",func:t,aggregated:e})},cloneWithDistinct(t){return i({...t,distinct:!0})},cloneWithOrderBy(t,e,r=!1){let n=r?"withinGroup":"orderBy";return i({...t,[n]:t[n]?we.cloneWithItems(t[n],e):we.create(e)})},cloneWithFilter(t,e){return i({...t,filter:t.filter?Q.cloneWithOperation(t.filter,"And",e):Q.create(e)})},cloneWithOrFilter(t,e){return i({...t,filter:t.filter?Q.cloneWithOperation(t.filter,"Or",e):Q.create(e)})},cloneWithOver(t,e){return i({...t,over:e})}});o();var gi=i({is(t){return t.kind==="FunctionNode"},create(t,e){return i({kind:"FunctionNode",func:t,arguments:e})}});o();var nt=class t{#e;constructor(e){this.#e=i(e)}get expressionType(){}as(e){return new vi(this,e)}distinct(){return new t({...this.#e,aggregateFunctionNode:me.cloneWithDistinct(this.#e.aggregateFunctionNode)})}orderBy(...e){return new t({...this.#e,aggregateFunctionNode:u.cloneWithOrderByItems(this.#e.aggregateFunctionNode,Y(e))})}clearOrderBy(){return new t({...this.#e,aggregateFunctionNode:u.cloneWithoutOrderBy(this.#e.aggregateFunctionNode)})}withinGroupOrderBy(...e){return new t({...this.#e,aggregateFunctionNode:me.cloneWithOrderBy(this.#e.aggregateFunctionNode,Y(e),!0)})}filterWhere(...e){return new t({...this.#e,aggregateFunctionNode:me.cloneWithFilter(this.#e.aggregateFunctionNode,w(e))})}filterWhereRef(e,r,n){return new t({...this.#e,aggregateFunctionNode:me.cloneWithFilter(this.#e.aggregateFunctionNode,R(e,r,n))})}over(e){let r=go();return new t({...this.#e,aggregateFunctionNode:me.cloneWithOver(this.#e.aggregateFunctionNode,(e?e(r):r).toOperationNode())})}$call(e){return e(this)}$castTo(){return new t(this.#e)}$notNull(){return new t(this.#e)}toOperationNode(){return this.#e.aggregateFunctionNode}},vi=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}toOperationNode(){return I.create(this.#e.toOperationNode(),p.create(this.#t))}};function cr(){let t=(r,n)=>new N(gi.create(r,xe(n??[]))),e=(r,n)=>new nt({aggregateFunctionNode:me.create(r,n?xe(n):void 0)});return Object.assign(t,{agg:e,avg(r){return e("avg",[r])},coalesce(...r){return t("coalesce",r)},count(r){return e("count",[r])},countAll(r){return new nt({aggregateFunctionNode:me.create("count",D(r))})},max(r){return e("max",[r])},min(r){return e("min",[r])},sum(r){return e("sum",[r])},any(r){return t("any",[r])},jsonAgg(r){return new nt({aggregateFunctionNode:me.create("json_agg",[v(r)?f(r):r.toOperationNode()])})},toJson(r){return new N(gi.create("to_json",[v(r)?f(r):r.toOperationNode()]))}})}o();o();var ko=i({is(t){return t.kind==="UnaryOperationNode"},create(t,e){return i({kind:"UnaryOperationNode",operator:t,operand:e})}});function To(t,e){return ko.create(G.create(t),L(e))}o();o();var X=i({is(t){return t.kind==="CaseNode"},create(t){return i({kind:"CaseNode",value:t})},cloneWithWhen(t,e){return i({...t,when:i(t.when?[...t.when,e]:[e])})},cloneWithThen(t,e){return i({...t,when:t.when?i([...t.when.slice(0,-1),Oe.cloneWithResult(t.when[t.when.length-1],e)]):void 0})},cloneWith(t,e){return i({...t,...e})}});var st=class{#e;constructor(e){this.#e=i(e)}when(...e){return new mr({...this.#e,node:X.cloneWithWhen(this.#e.node,Oe.create(w(e)))})}},mr=class{#e;constructor(e){this.#e=i(e)}then(e){return new Ci({...this.#e,node:X.cloneWithThen(this.#e.node,Kt(e)?kt(e):x(e))})}},Ci=class{#e;constructor(e){this.#e=i(e)}when(...e){return new mr({...this.#e,node:X.cloneWithWhen(this.#e.node,Oe.create(w(e)))})}else(e){return new bi({...this.#e,node:X.cloneWith(this.#e.node,{else:Kt(e)?kt(e):x(e)})})}end(){return new N(X.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new N(X.cloneWith(this.#e.node,{isStatement:!0}))}},bi=class{#e;constructor(e){this.#e=i(e)}end(){return new N(X.cloneWith(this.#e.node,{isStatement:!1}))}endCase(){return new N(X.cloneWith(this.#e.node,{isStatement:!0}))}};o();o();var Wi=i({is(t){return t.kind==="JSONPathLegNode"},create(t,e){return i({kind:"JSONPathLegNode",type:t,value:e})}});var at=class{#e;constructor(e){this.#e=e}at(e){return this.#t("ArrayLocation",e)}key(e){return this.#t("Member",e)}#t(e,r){return He.is(this.#e)?new lr(He.cloneWithTraversal(this.#e,Ee.is(this.#e.traversal)?Ee.cloneWithLeg(this.#e.traversal,Wi.create(e,r)):Jt.cloneWithValue(this.#e.traversal,S.createImmediate(r)))):new lr(Ee.cloneWithLeg(this.#e,Wi.create(e,r)))}},lr=class t extends at{#e;constructor(e){super(e),this.#e=e}get expressionType(){}as(e){return new Si(this,e)}$castTo(){return new t(this.#e)}$notNull(){return new t(this.#e)}toOperationNode(){return this.#e}},Si=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}toOperationNode(){return I.create(this.#e.toOperationNode(),O(this.#t)?this.#t.toOperationNode():p.create(this.#t))}};o();var ki=i({is(t){return t.kind==="TupleNode"},create(t){return i({kind:"TupleNode",values:i(t)})}});o();o();var Nn=["varchar","char","text","integer","int2","int4","int8","smallint","bigint","boolean","real","double precision","float4","float8","decimal","numeric","binary","bytea","date","datetime","time","timetz","timestamp","timestamptz","serial","bigserial","uuid","json","jsonb","blob","varbinary","int4range","int4multirange","int8range","int8multirange","numrange","nummultirange","tsrange","tsmultirange","tstzrange","tstzmultirange","daterange","datemultirange"],yn=[/^varchar\(\d+\)$/,/^char\(\d+\)$/,/^decimal\(\d+, \d+\)$/,/^numeric\(\d+, \d+\)$/,/^binary\(\d+\)$/,/^datetime\(\d+\)$/,/^time\(\d+\)$/,/^timetz\(\d+\)$/,/^timestamp\(\d+\)$/,/^timestamptz\(\d+\)$/,/^varbinary\(\d+\)$/],Eo=i({is(t){return t.kind==="DataTypeNode"},create(t){return i({kind:"DataTypeNode",dataType:t})}});function Ao(t){return!!(Nn.includes(t)||yn.some(e=>e.test(t)))}function ne(t){if(O(t))return t.toOperationNode();if(Ao(t))return Eo.create(t);throw new Error(`invalid column data type ${JSON.stringify(t)}`)}o();var Io=i({is(t){return t.kind==="CastNode"},create(t,e){return i({kind:"CastNode",expression:t,dataType:e})}});function hr(t=qe){function e(a,d,h){return new N(jt(a,d,h))}function r(a,d){return new N(To(a,d))}let n=Object.assign(e,{fn:void 0,eb:void 0,selectFrom(a){return qt({queryId:m(),executor:t,queryNode:y.createFrom(oe(a))})},case(a){return new st({node:X.create(K(a)?void 0:L(a))})},ref(a,d){return K(d)?new N(H(a)):new at(_i(a,d))},jsonPath(){return new at(Ee.create())},table(a){return new N(f(a))},val(a){return new N(x(a))},refTuple(...a){return new N(ki.create(a.map(L)))},tuple(...a){return new N(ki.create(a.map(x)))},lit(a){return new N(kt(a))},unary:r,not(a){return r("not",a)},exists(a){return r("exists",a)},neg(a){return r("-",a)},between(a,d,h){return new N(ke.create(L(a),G.create("between"),J.create(x(d),x(h))))},betweenSymmetric(a,d,h){return new N(ke.create(L(a),G.create("between symmetric"),J.create(x(d),x(h))))},and(a){return P(a)?new N(Xe(a,"and")):new N(ei(a,"and"))},or(a){return P(a)?new N(Xe(a,"or")):new N(ei(a,"or"))},parens(...a){let d=w(a);return pe.is(d)?new N(d):new N(pe.create(d))},cast(a,d){return new N(Io.create(L(a),ne(d)))},withSchema(a){return hr(t.withPluginAtFront(new _(a)))}});return n.fn=cr(),n.eb=n,n}function z(t){return hr()}function $(t){if(O(t))return t.toOperationNode();if(b(t))return t(z()).toOperationNode();throw new Error(`invalid expression: ${JSON.stringify(t)}`)}function Xt(t){if(O(t))return t.toOperationNode();if(b(t))return t(z()).toOperationNode();throw new Error(`invalid aliased expression: ${JSON.stringify(t)}`)}function ye(t){return Mt(t)||ji(t)||b(t)}o();var fr=class{#e;get table(){return this.#e}constructor(e){this.#e=e}as(e){return new Ti(this.#e,e)}},Ti=class{#e;#t;get table(){return this.#e}get alias(){return this.#t}constructor(e,r){this.#e=e,this.#t=r}toOperationNode(){return I.create(f(this.#e),p.create(this.#t))}};function Ro(t){return B(t)&&O(t)&&v(t.table)&&v(t.alias)}function oe(t){return P(t)?t.map(e=>Me(e)):[Me(t)]}function Me(t){return v(t)?Ni(t):Ro(t)?t.toOperationNode():Xt(t)}function Ni(t){let e=" as ";if(t.includes(e)){let[r,n]=t.split(e).map(qo);return I.create(f(r),p.create(n))}else return f(t)}function f(t){let e=".";if(t.includes(e)){let[r,n]=t.split(e).map(qo);return j.createWithSchema(r,n)}else return j.create(t)}function qo(t){return t.trim()}o();o();var Ei=i({is(t){return t.kind==="AddColumnNode"},create(t){return i({kind:"AddColumnNode",column:t})}});o();var g=i({is(t){return t.kind==="ColumnDefinitionNode"},create(t,e){return i({kind:"ColumnDefinitionNode",column:c.create(t),dataType:e})},cloneWithFrontModifier(t,e){return i({...t,frontModifiers:t.frontModifiers?i([...t.frontModifiers,e]):[e]})},cloneWithEndModifier(t,e){return i({...t,endModifiers:t.endModifiers?i([...t.endModifiers,e]):[e]})},cloneWith(t,e){return i({...t,...e})}});o();var Ai=i({is(t){return t.kind==="DropColumnNode"},create(t){return i({kind:"DropColumnNode",column:c.create(t)})}});o();var Ii=i({is(t){return t.kind==="RenameColumnNode"},create(t,e){return i({kind:"RenameColumnNode",column:c.create(t),renameTo:c.create(e)})}});o();o();var ut=i({is(t){return t.kind==="CheckConstraintNode"},create(t,e){return i({kind:"CheckConstraintNode",expression:t,name:e?p.create(e):void 0})}});o();var Do=["no action","restrict","cascade","set null","set default"],dt=i({is(t){return t.kind==="ReferencesNode"},create(t,e){return i({kind:"ReferencesNode",table:t,columns:i([...e])})},cloneWithOnDelete(t,e){return i({...t,onDelete:e})},cloneWithOnUpdate(t,e){return i({...t,onUpdate:e})}});o();function Nr(t){return O(t)?t.toOperationNode():S.createImmediate(t)}o();var Bt=i({is(t){return t.kind==="GeneratedNode"},create(t){return i({kind:"GeneratedNode",...t})},createWithExpression(t){return i({kind:"GeneratedNode",always:!0,expression:t})},cloneWith(t,e){return i({...t,...e})}});o();var Bo=i({is(t){return t.kind==="DefaultValueNode"},create(t){return i({kind:"DefaultValueNode",defaultValue:t})}});o();function pt(t){if(Do.includes(t))return t;throw new Error(`invalid OnModifyForeignAction ${t}`)}var ge=class t{#e;constructor(e){this.#e=e}autoIncrement(){return new t(g.cloneWith(this.#e,{autoIncrement:!0}))}identity(){return new t(g.cloneWith(this.#e,{identity:!0}))}primaryKey(){return new t(g.cloneWith(this.#e,{primaryKey:!0}))}references(e){let r=H(e);if(!r.table||je.is(r.column))throw new Error(`invalid call references('${e}'). The reference must have format table.column or schema.table.column`);return new t(g.cloneWith(this.#e,{references:dt.create(r.table,[r.column])}))}onDelete(e){if(!this.#e.references)throw new Error("on delete constraint can only be added for foreign keys");return new t(g.cloneWith(this.#e,{references:dt.cloneWithOnDelete(this.#e.references,pt(e))}))}onUpdate(e){if(!this.#e.references)throw new Error("on update constraint can only be added for foreign keys");return new t(g.cloneWith(this.#e,{references:dt.cloneWithOnUpdate(this.#e.references,pt(e))}))}unique(){return new t(g.cloneWith(this.#e,{unique:!0}))}notNull(){return new t(g.cloneWith(this.#e,{notNull:!0}))}unsigned(){return new t(g.cloneWith(this.#e,{unsigned:!0}))}defaultTo(e){return new t(g.cloneWith(this.#e,{defaultTo:Bo.create(Nr(e))}))}check(e){return new t(g.cloneWith(this.#e,{check:ut.create(e.toOperationNode())}))}generatedAlwaysAs(e){return new t(g.cloneWith(this.#e,{generated:Bt.createWithExpression(e.toOperationNode())}))}generatedAlwaysAsIdentity(){return new t(g.cloneWith(this.#e,{generated:Bt.create({identity:!0,always:!0})}))}generatedByDefaultAsIdentity(){return new t(g.cloneWith(this.#e,{generated:Bt.create({identity:!0,byDefault:!0})}))}stored(){if(!this.#e.generated)throw new Error("stored() can only be called after generatedAlwaysAs");return new t(g.cloneWith(this.#e,{generated:Bt.cloneWith(this.#e.generated,{stored:!0})}))}modifyFront(e){return new t(g.cloneWithFrontModifier(this.#e,e.toOperationNode()))}nullsNotDistinct(){return new t(g.cloneWith(this.#e,{nullsNotDistinct:!0}))}ifNotExists(){return new t(g.cloneWith(this.#e,{ifNotExists:!0}))}modifyEnd(e){return new t(g.cloneWithEndModifier(this.#e,e.toOperationNode()))}$call(e){return e(this)}toOperationNode(){return this.#e}};o();var Ri=i({is(t){return t.kind==="ModifyColumnNode"},create(t){return i({kind:"ModifyColumnNode",column:t})}});o();o();var se=i({is(t){return t.kind==="ForeignKeyConstraintNode"},create(t,e,r,n){return i({kind:"ForeignKeyConstraintNode",columns:t,references:dt.create(e,r),name:n?p.create(n):void 0})},cloneWith(t,e){return i({...t,...e})}});var ht=class t{#e;constructor(e){this.#e=e}onDelete(e){return new t(se.cloneWith(this.#e,{onDelete:pt(e)}))}onUpdate(e){return new t(se.cloneWith(this.#e,{onUpdate:pt(e)}))}deferrable(){return new t(se.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new t(se.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new t(se.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new t(se.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};o();var ct=i({is(t){return t.kind==="AddConstraintNode"},create(t){return i({kind:"AddConstraintNode",constraint:t})}});o();var le=i({is(t){return t.kind==="UniqueConstraintNode"},create(t,e,r){return i({kind:"UniqueConstraintNode",columns:i(t.map(c.create)),name:e?p.create(e):void 0,nullsNotDistinct:r})},cloneWith(t,e){return i({...t,...e})}});o();var mt=i({is(t){return t.kind==="DropConstraintNode"},create(t){return i({kind:"DropConstraintNode",constraintName:p.create(t)})},cloneWith(t,e){return i({...t,...e})}});o();o();var lt=i({is(t){return t.kind==="AlterColumnNode"},create(t,e,r){return i({kind:"AlterColumnNode",column:c.create(t),[e]:r})}});var Lt=class{#e;constructor(e){this.#e=e}setDataType(e){return new Ve(lt.create(this.#e,"dataType",ne(e)))}setDefault(e){return new Ve(lt.create(this.#e,"setDefault",Nr(e)))}dropDefault(){return new Ve(lt.create(this.#e,"dropDefault",!0))}setNotNull(){return new Ve(lt.create(this.#e,"setNotNull",!0))}dropNotNull(){return new Ve(lt.create(this.#e,"dropNotNull",!0))}$call(e){return e(this)}},Ve=class{#e;constructor(e){this.#e=e}toOperationNode(){return this.#e}};o();var ve=class{#e;constructor(e){this.#e=i(e)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var yr=class t{#e;constructor(e){this.#e=i(e)}onDelete(e){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.onDelete(e)})}onUpdate(e){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.onUpdate(e)})}deferrable(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.deferrable()})}notDeferrable(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.notDeferrable()})}initiallyDeferred(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.initiallyDeferred()})}initiallyImmediate(){return new t({...this.#e,constraintBuilder:this.#e.constraintBuilder.initiallyImmediate()})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(l.cloneWithTableProps(this.#e.node,{addConstraint:ct.create(this.#e.constraintBuilder.toOperationNode())}),this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var Qt=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:mt.cloneWith(this.#e.node.dropConstraint,{ifExists:!0})})})}cascade(){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:mt.cloneWith(this.#e.node.dropConstraint,{modifier:"cascade"})})})}restrict(){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:mt.cloneWith(this.#e.node.dropConstraint,{modifier:"restrict"})})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var Ce=i({is(t){return t.kind==="PrimaryKeyConstraintNode"},create(t,e){return i({kind:"PrimaryKeyConstraintNode",columns:i(t.map(c.create)),name:e?p.create(e):void 0})},cloneWith(t,e){return i({...t,...e})}});o();var Be=i({is(t){return t.kind==="AddIndexNode"},create(t){return i({kind:"AddIndexNode",name:p.create(t)})},cloneWith(t,e){return i({...t,...e})},cloneWithColumns(t,e){return i({...t,columns:[...t.columns||[],...e]})}});o();var xr=class t{#e;constructor(e){this.#e=i(e)}unique(){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Be.cloneWith(this.#e.node.addIndex,{unique:!0})})})}column(e){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Be.cloneWithColumns(this.#e.node.addIndex,[Ye(e)])})})}columns(e){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Be.cloneWithColumns(this.#e.node.addIndex,e.map(Ye))})})}expression(e){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Be.cloneWithColumns(this.#e.node.addIndex,[e.toOperationNode()])})})}using(e){return new t({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Be.cloneWith(this.#e.node.addIndex,{using:C.createWithSql(e)})})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var ft=class t{#e;constructor(e){this.#e=e}nullsNotDistinct(){return new t(le.cloneWith(this.#e,{nullsNotDistinct:!0}))}deferrable(){return new t(le.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new t(le.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new t(le.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new t(le.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};o();var Nt=class t{#e;constructor(e){this.#e=e}deferrable(){return new t(Ce.cloneWith(this.#e,{deferrable:!0}))}notDeferrable(){return new t(Ce.cloneWith(this.#e,{deferrable:!1}))}initiallyDeferred(){return new t(Ce.cloneWith(this.#e,{initiallyDeferred:!0}))}initiallyImmediate(){return new t(Ce.cloneWith(this.#e,{initiallyDeferred:!1}))}$call(e){return e(this)}toOperationNode(){return this.#e}};o();var yt=class{#e;constructor(e){this.#e=e}$call(e){return e(this)}toOperationNode(){return this.#e}};o();var Lo=i({is(t){return t.kind==="RenameConstraintNode"},create(t,e){return i({kind:"RenameConstraintNode",oldName:p.create(t),newName:p.create(e)})}});var wr=class{#e;constructor(e){this.#e=i(e)}renameTo(e){return new ve({...this.#e,node:l.cloneWithTableProps(this.#e.node,{renameTo:f(e)})})}setSchema(e){return new ve({...this.#e,node:l.cloneWithTableProps(this.#e.node,{setSchema:p.create(e)})})}alterColumn(e,r){let n=r(new Lt(e));return new ze({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,n.toOperationNode())})}dropColumn(e){return new ze({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ai.create(e))})}renameColumn(e,r){return new ze({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ii.create(e,r))})}addColumn(e,r,n=V){let a=n(new ge(g.create(e,ne(r))));return new ze({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ei.create(a.toOperationNode()))})}modifyColumn(e,r,n=V){let a=n(new ge(g.create(e,ne(r))));return new ze({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ri.create(a.toOperationNode()))})}addUniqueConstraint(e,r,n=V){let a=n(new ft(le.create(r,e)));return new ve({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addConstraint:ct.create(a.toOperationNode())})})}addCheckConstraint(e,r,n=V){let a=n(new yt(ut.create(r.toOperationNode(),e)));return new ve({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addConstraint:ct.create(a.toOperationNode())})})}addForeignKeyConstraint(e,r,n,a,d=V){let h=d(new ht(se.create(r.map(c.create),f(n),a.map(c.create),e)));return new yr({...this.#e,constraintBuilder:h})}addPrimaryKeyConstraint(e,r,n=V){let a=n(new Nt(Ce.create(r,e)));return new ve({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addConstraint:ct.create(a.toOperationNode())})})}dropConstraint(e){return new Qt({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropConstraint:mt.create(e)})})}renameConstraint(e,r){return new Qt({...this.#e,node:l.cloneWithTableProps(this.#e.node,{renameConstraint:Lo.create(e,r)})})}addIndex(e){return new xr({...this.#e,node:l.cloneWithTableProps(this.#e.node,{addIndex:Be.create(e)})})}dropIndex(e){return new ve({...this.#e,node:l.cloneWithTableProps(this.#e.node,{dropIndex:Se.create(e)})})}$call(e){return e(this)}},ze=class t{#e;constructor(e){this.#e=i(e)}alterColumn(e,r){let n=r(new Lt(e));return new t({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,n.toOperationNode())})}dropColumn(e){return new t({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ai.create(e))})}renameColumn(e,r){return new t({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ii.create(e,r))})}addColumn(e,r,n=V){let a=n(new ge(g.create(e,ne(r))));return new t({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ei.create(a.toOperationNode()))})}modifyColumn(e,r,n=V){let a=n(new ge(g.create(e,ne(r))));return new t({...this.#e,node:l.cloneWithColumnAlteration(this.#e.node,Ri.create(a.toOperationNode()))})}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();o();var xt=class extends Re{transformPrimitiveValueList(e){return de.create(e.values.map(S.createImmediate))}transformValue(e){return S.createImmediate(e.value)}};var Or=class t{#e;constructor(e){this.#e=i(e)}ifNotExists(){return new t({...this.#e,node:ee.cloneWith(this.#e.node,{ifNotExists:!0})})}unique(){return new t({...this.#e,node:ee.cloneWith(this.#e.node,{unique:!0})})}nullsNotDistinct(){return new t({...this.#e,node:ee.cloneWith(this.#e.node,{nullsNotDistinct:!0})})}on(e){return new t({...this.#e,node:ee.cloneWith(this.#e.node,{table:f(e)})})}column(e){return new t({...this.#e,node:ee.cloneWithColumns(this.#e.node,[Ye(e)])})}columns(e){return new t({...this.#e,node:ee.cloneWithColumns(this.#e.node,e.map(Ye))})}expression(e){return new t({...this.#e,node:ee.cloneWithColumns(this.#e.node,[e.toOperationNode()])})}using(e){return new t({...this.#e,node:ee.cloneWith(this.#e.node,{using:C.createWithSql(e)})})}where(...e){let r=new xt;return new t({...this.#e,node:u.cloneWithWhere(this.#e.node,r.transformNode(w(e),this.#e.queryId))})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var gr=class t{#e;constructor(e){this.#e=i(e)}ifNotExists(){return new t({...this.#e,node:Pt.cloneWith(this.#e.node,{ifNotExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();o();function Qo(t){if(Ki.includes(t))return t;throw new Error(`invalid OnCommitAction ${t}`)}var vr=class t{#e;constructor(e){this.#e=i(e)}temporary(){return new t({...this.#e,node:M.cloneWith(this.#e.node,{temporary:!0})})}onCommit(e){return new t({...this.#e,node:M.cloneWith(this.#e.node,{onCommit:Qo(e)})})}ifNotExists(){return new t({...this.#e,node:M.cloneWith(this.#e.node,{ifNotExists:!0})})}addColumn(e,r,n=V){let a=n(new ge(g.create(e,ne(r))));return new t({...this.#e,node:M.cloneWithColumn(this.#e.node,a.toOperationNode())})}addPrimaryKeyConstraint(e,r,n=V){let a=n(new Nt(Ce.create(r,e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,a.toOperationNode())})}addUniqueConstraint(e,r,n=V){let a=n(new ft(le.create(r,e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,a.toOperationNode())})}addCheckConstraint(e,r,n=V){let a=n(new yt(ut.create(r.toOperationNode(),e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,a.toOperationNode())})}addForeignKeyConstraint(e,r,n,a,d=V){let h=d(new ht(se.create(r.map(c.create),f(n),a.map(c.create),e)));return new t({...this.#e,node:M.cloneWithConstraint(this.#e.node,h.toOperationNode())})}modifyFront(e){return new t({...this.#e,node:M.cloneWithFrontModifier(this.#e.node,e.toOperationNode())})}modifyEnd(e){return new t({...this.#e,node:M.cloneWithEndModifier(this.#e.node,e.toOperationNode())})}as(e){return new t({...this.#e,node:M.cloneWith(this.#e.node,{selectQuery:$(e)})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var Cr=class t{#e;constructor(e){this.#e=i(e)}on(e){return new t({...this.#e,node:Se.cloneWith(this.#e.node,{table:f(e)})})}ifExists(){return new t({...this.#e,node:Se.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:Se.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var br=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:Wt.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:Wt.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();var Wr=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:St.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:St.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();o();var ae=i({is(t){return t.kind==="CreateViewNode"},create(t){return i({kind:"CreateViewNode",name:F.create(t)})},cloneWith(t,e){return i({...t,...e})}});o();var Sr=class{#e=new xt;transformQuery(e){return this.#e.transformNode(e.node,e.queryId)}transformResult(e){return Promise.resolve(e.result)}};var kr=class t{#e;constructor(e){this.#e=i(e)}temporary(){return new t({...this.#e,node:ae.cloneWith(this.#e.node,{temporary:!0})})}materialized(){return new t({...this.#e,node:ae.cloneWith(this.#e.node,{materialized:!0})})}ifNotExists(){return new t({...this.#e,node:ae.cloneWith(this.#e.node,{ifNotExists:!0})})}orReplace(){return new t({...this.#e,node:ae.cloneWith(this.#e.node,{orReplace:!0})})}columns(e){return new t({...this.#e,node:ae.cloneWith(this.#e.node,{columns:e.map(Xr)})})}as(e){let r=e.withPlugin(new Sr).toOperationNode();return new t({...this.#e,node:ae.cloneWith(this.#e.node,{as:r})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();o();var wt=i({is(t){return t.kind==="DropViewNode"},create(t){return i({kind:"DropViewNode",name:F.create(t)})},cloneWith(t,e){return i({...t,...e})}});var Tr=class t{#e;constructor(e){this.#e=i(e)}materialized(){return new t({...this.#e,node:wt.cloneWith(this.#e.node,{materialized:!0})})}ifExists(){return new t({...this.#e,node:wt.cloneWith(this.#e.node,{ifExists:!0})})}cascade(){return new t({...this.#e,node:wt.cloneWith(this.#e.node,{cascade:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();o();var Er=i({is(t){return t.kind==="CreateTypeNode"},create(t){return i({kind:"CreateTypeNode",name:t})},cloneWithEnum(t,e){return i({...t,enum:de.create(e.map(S.createImmediate))})}});var Ar=class t{#e;constructor(e){this.#e=i(e)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}asEnum(e){return new t({...this.#e,node:Er.cloneWithEnum(this.#e.node,e)})}$call(e){return e(this)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();o();var Ir=i({is(t){return t.kind==="DropTypeNode"},create(t){return i({kind:"DropTypeNode",name:t})},cloneWith(t,e){return i({...t,...e})}});var Rr=class t{#e;constructor(e){this.#e=i(e)}ifExists(){return new t({...this.#e,node:Ir.cloneWith(this.#e.node,{ifExists:!0})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};o();function qi(t){let e=".";if(t.includes(e)){let r=t.split(e).map(xn);if(r.length===2)return F.createWithSchema(r[0],r[1]);throw new Error(`invalid schemable identifier ${t}`)}else return F.create(t)}function xn(t){return t.trim()}o();o();var Ot=i({is(t){return t.kind==="RefreshMaterializedViewNode"},create(t){return i({kind:"RefreshMaterializedViewNode",name:F.create(t)})},cloneWith(t,e){return i({...t,...e})}});var qr=class t{#e;constructor(e){this.#e=i(e)}concurrently(){return new t({...this.#e,node:Ot.cloneWith(this.#e.node,{concurrently:!0,withNoData:!1})})}withData(){return new t({...this.#e,node:Ot.cloneWith(this.#e.node,{withNoData:!1})})}withNoData(){return new t({...this.#e,node:Ot.cloneWith(this.#e.node,{withNoData:!0,concurrently:!1})})}$call(e){return e(this)}toOperationNode(){return this.#e.executor.transformQuery(this.#e.node,this.#e.queryId)}compile(){return this.#e.executor.compileQuery(this.toOperationNode(),this.#e.queryId)}async execute(){await this.#e.executor.executeQuery(this.compile(),this.#e.queryId)}};var Dr=class t{#e;constructor(e){this.#e=e}createTable(e){return new vr({queryId:m(),executor:this.#e,node:M.create(f(e))})}dropTable(e){return new Wr({queryId:m(),executor:this.#e,node:St.create(f(e))})}createIndex(e){return new Or({queryId:m(),executor:this.#e,node:ee.create(e)})}dropIndex(e){return new Cr({queryId:m(),executor:this.#e,node:Se.create(e)})}createSchema(e){return new gr({queryId:m(),executor:this.#e,node:Pt.create(e)})}dropSchema(e){return new br({queryId:m(),executor:this.#e,node:Wt.create(e)})}alterTable(e){return new wr({queryId:m(),executor:this.#e,node:l.create(f(e))})}createView(e){return new kr({queryId:m(),executor:this.#e,node:ae.create(e)})}refreshMaterializedView(e){return new qr({queryId:m(),executor:this.#e,node:Ot.create(e)})}dropView(e){return new Tr({queryId:m(),executor:this.#e,node:wt.create(e)})}createType(e){return new Ar({queryId:m(),executor:this.#e,node:Er.create(qi(e))})}dropType(e){return new Rr({queryId:m(),executor:this.#e,node:Ir.create(qi(e))})}withPlugin(e){return new t(this.#e.withPlugin(e))}withoutPlugins(){return new t(this.#e.withoutPlugins())}withSchema(e){return new t(this.#e.withPluginAtFront(new _(e)))}};o();var Br=class{ref(e){return new Vt(e)}table(e){return new fr(e)}};o();var Lr=class{#e;constructor(e){this.#e=e}async provideConnection(e){let r=await this.#e.acquireConnection();try{return await e(r)}finally{await this.#e.releaseConnection(r)}}};o();var Qr=class t extends it{#e;#t;#r;constructor(e,r,n,a=[]){super(a),this.#e=e,this.#t=r,this.#r=n}get adapter(){return this.#t}compileQuery(e,r){return this.#e.compileQuery(e,r)}provideConnection(e){return this.#r.provideConnection(e)}withPlugins(e){return new t(this.#e,this.#t,this.#r,[...this.plugins,...e])}withPlugin(e){return new t(this.#e,this.#t,this.#r,[...this.plugins,e])}withPluginAtFront(e){return new t(this.#e,this.#t,this.#r,[e,...this.plugins])}withConnectionProvider(e){return new t(this.#e,this.#t,e,[...this.plugins])}withoutPlugins(){return new t(this.#e,this.#t,this.#r,[])}};o();o();function Pr(){return typeof performance<"u"&&b(performance.now)?performance.now():Date.now()}var Mr=class{#e;#t;#r;#i;#o;#a=new WeakSet;constructor(e,r){this.#i=!1,this.#e=e,this.#t=r}async init(){if(this.#o)throw new Error("driver has already been destroyed");this.#r||(this.#r=this.#e.init().then(()=>{this.#i=!0}).catch(e=>(this.#r=void 0,Promise.reject(e)))),await this.#r}async acquireConnection(){if(this.#o)throw new Error("driver has already been destroyed");this.#i||await this.init();let e=await this.#e.acquireConnection();return this.#a.has(e)||(this.#d()&&this.#n(e),this.#a.add(e)),e}async releaseConnection(e){await this.#e.releaseConnection(e)}beginTransaction(e,r){return this.#e.beginTransaction(e,r)}commitTransaction(e){return this.#e.commitTransaction(e)}rollbackTransaction(e){return this.#e.rollbackTransaction(e)}savepoint(e,r,n){if(this.#e.savepoint)return this.#e.savepoint(e,r,n);throw new Error("The `savepoint` method is not supported by this driver")}rollbackToSavepoint(e,r,n){if(this.#e.rollbackToSavepoint)return this.#e.rollbackToSavepoint(e,r,n);throw new Error("The `rollbackToSavepoint` method is not supported by this driver")}releaseSavepoint(e,r,n){if(this.#e.releaseSavepoint)return this.#e.releaseSavepoint(e,r,n);throw new Error("The `releaseSavepoint` method is not supported by this driver")}async destroy(){this.#r&&(await this.#r,this.#o||(this.#o=this.#e.destroy().catch(e=>(this.#o=void 0,Promise.reject(e)))),await this.#o)}#d(){return this.#t.isLevelEnabled("query")||this.#t.isLevelEnabled("error")}#n(e){let r=e.executeQuery,n=e.streamQuery,a=this;e.executeQuery=async d=>{let h,k=Pr();try{return await r.call(e,d)}catch(T){throw h=T,await a.#s(T,d,k),T}finally{h||await a.#u(d,k)}},e.streamQuery=async function*(d,h){let k,T=Pr();try{for await(let E of n.call(e,d,h))yield E}catch(E){throw k=E,await a.#s(E,d,T),E}finally{k||await a.#u(d,T,!0)}}}async#s(e,r,n){await this.#t.error(()=>({level:"error",error:e,query:r,queryDurationMillis:this.#p(n)}))}async#u(e,r,n=!1){await this.#t.query(()=>({level:"query",isStream:n,query:e,queryDurationMillis:this.#p(r)}))}#p(e){return Pr()-e}};o();var wn=()=>{},gt=class{#e;#t;constructor(e){this.#e=e}async provideConnection(e){for(;this.#t;)await this.#t.catch(wn);return this.#t=this.#r(e).finally(()=>{this.#t=void 0}),this.#t}async#r(e){return await e(this.#e)}};o();var On=["read only","read write"],gn=["read uncommitted","read committed","repeatable read","serializable","snapshot"];function Di(t){if(t.accessMode&&!On.includes(t.accessMode))throw new Error(`invalid transaction access mode ${t.accessMode}`);if(t.isolationLevel&&!gn.includes(t.isolationLevel))throw new Error(`invalid transaction isolation level ${t.isolationLevel}`)}o();var ub=i(["query","error"]),Fr=class{#e;#t;constructor(e){b(e)?(this.#t=e,this.#e=i({query:!0,error:!0})):(this.#t=vn,this.#e=i({query:e.includes("query"),error:e.includes("error")}))}isLevelEnabled(e){return this.#e[e]}async query(e){this.#e.query&&await this.#t(e())}async error(e){this.#e.error&&await this.#t(e())}};function vn(t){if(t.level==="query"){let e=`kysely:query:${t.isStream?"stream:":""}`;console.log(`${e} ${t.query.sql}`),console.log(`${e} duration: ${t.queryDurationMillis.toFixed(1)}ms`)}else t.level==="error"&&(t.error instanceof Error?console.error(`kysely:error: ${t.error.stack??t.error.message}`):console.error(`kysely:error: ${JSON.stringify({error:t.error,query:t.query.sql,queryDurationMillis:t.queryDurationMillis})}`))}o();function Po(t){return B(t)&&b(t.compile)}Symbol.asyncDispose??=Symbol("Symbol.asyncDispose");var vt=class t extends ot{#e;constructor(e){let r,n;if(Cn(e))r={executor:e.executor},n={...e};else{let a=e.dialect,d=a.createDriver(),h=a.createQueryCompiler(),k=a.createAdapter(),T=new Fr(e.log??[]),E=new Mr(d,T),Kr=new Lr(E),Ct=new Qr(h,k,Kr,e.plugins??[]);r={executor:Ct},n={config:e,executor:Ct,dialect:a,driver:E}}super(r),this.#e=i(n)}get schema(){return new Dr(this.#e.executor)}get dynamic(){return new Br}get introspection(){return this.#e.dialect.createIntrospector(this.withoutPlugins())}case(e){return new st({node:X.create(K(e)?void 0:$(e))})}get fn(){return cr()}transaction(){return new Li({...this.#e})}startTransaction(){return new Qi({...this.#e})}connection(){return new Bi({...this.#e})}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new _(e))})}withTables(){return new t({...this.#e})}async destroy(){await this.#e.driver.destroy()}get isTransaction(){return!1}getExecutor(){return this.#e.executor}executeQuery(e,r=m()){let n=Po(e)?e.compile():e;return this.getExecutor().executeQuery(n,r)}async[Symbol.asyncDispose](){await this.destroy()}},Vr=class t extends vt{#e;constructor(e){super(e),this.#e=e}get isTransaction(){return!0}transaction(){throw new Error("calling the transaction method for a Transaction is not supported")}connection(){throw new Error("calling the connection method for a Transaction is not supported")}async destroy(){throw new Error("calling the destroy method for a Transaction is not supported")}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new _(e))})}withTables(){return new t({...this.#e})}};function Cn(t){return B(t)&&B(t.config)&&B(t.driver)&&B(t.executor)&&B(t.dialect)}var Bi=class{#e;constructor(e){this.#e=i(e)}async execute(e){return this.#e.executor.provideConnection(async r=>{let n=this.#e.executor.withConnectionProvider(new gt(r)),a=new vt({...this.#e,executor:n});return await e(a)})}},Li=class t{#e;constructor(e){this.#e=i(e)}setAccessMode(e){return new t({...this.#e,accessMode:e})}setIsolationLevel(e){return new t({...this.#e,isolationLevel:e})}async execute(e){let{isolationLevel:r,accessMode:n,...a}=this.#e,d={isolationLevel:r,accessMode:n};return Di(d),this.#e.executor.provideConnection(async h=>{let k=this.#e.executor.withConnectionProvider(new gt(h)),T=new Vr({...a,executor:k});try{await this.#e.driver.beginTransaction(h,d);let E=await e(T);return await this.#e.driver.commitTransaction(h),E}catch(E){throw await this.#e.driver.rollbackTransaction(h),E}})}},Qi=class t{#e;constructor(e){this.#e=i(e)}setAccessMode(e){return new t({...this.#e,accessMode:e})}setIsolationLevel(e){return new t({...this.#e,isolationLevel:e})}async execute(){let{isolationLevel:e,accessMode:r,...n}=this.#e,a={isolationLevel:e,accessMode:r};Di(a);let d=await sr(this.#e.executor);return await this.#e.driver.beginTransaction(d.connection,a),new Pi({...n,connection:d,executor:this.#e.executor.withConnectionProvider(new gt(d.connection))})}},Pi=class t extends Vr{#e;#t;#r;constructor(e){let r={isCommitted:!1,isRolledBack:!1};e={...e,executor:new Mi(e.executor,r)};let{connection:n,...a}=e;super(a),this.#e=i(e),this.#r=r;let d=m();this.#t=h=>e.executor.compileQuery(h,d)}get isCommitted(){return this.#r.isCommitted}get isRolledBack(){return this.#r.isRolledBack}commit(){return Je(this.#r),new Ue(async()=>{await this.#e.driver.commitTransaction(this.#e.connection.connection),this.#r.isCommitted=!0,this.#e.connection.release()})}rollback(){return Je(this.#r),new Ue(async()=>{await this.#e.driver.rollbackTransaction(this.#e.connection.connection),this.#r.isRolledBack=!0,this.#e.connection.release()})}savepoint(e){return Je(this.#r),new Ue(async()=>(await this.#e.driver.savepoint?.(this.#e.connection.connection,e,this.#t),new t({...this.#e})))}rollbackToSavepoint(e){return Je(this.#r),new Ue(async()=>(await this.#e.driver.rollbackToSavepoint?.(this.#e.connection.connection,e,this.#t),new t({...this.#e})))}releaseSavepoint(e){return Je(this.#r),new Ue(async()=>(await this.#e.driver.releaseSavepoint?.(this.#e.connection.connection,e,this.#t),new t({...this.#e})))}withPlugin(e){return new t({...this.#e,executor:this.#e.executor.withPlugin(e)})}withoutPlugins(){return new t({...this.#e,executor:this.#e.executor.withoutPlugins()})}withSchema(e){return new t({...this.#e,executor:this.#e.executor.withPluginAtFront(new _(e))})}withTables(){return new t({...this.#e})}},Ue=class{#e;constructor(e){this.#e=e}async execute(){return await this.#e()}};function Je(t){if(t.isCommitted)throw new Error("Transaction is already committed");if(t.isRolledBack)throw new Error("Transaction is already rolled back")}var Mi=class t{#e;#t;constructor(e,r){e instanceof t?this.#e=e.#e:this.#e=e,this.#t=r}get adapter(){return this.#e.adapter}get plugins(){return this.#e.plugins}transformQuery(e,r){return this.#e.transformQuery(e,r)}compileQuery(e,r){return this.#e.compileQuery(e,r)}provideConnection(e){return this.#e.provideConnection(e)}executeQuery(e,r){return Je(this.#t),this.#e.executeQuery(e,r)}stream(e,r,n){return Je(this.#t),this.#e.stream(e,r,n)}withConnectionProvider(e){return new t(this.#e.withConnectionProvider(e),this.#t)}withPlugin(e){return new t(this.#e.withPlugin(e),this.#t)}withPlugins(e){return new t(this.#e.withPlugins(e),this.#t)}withPluginAtFront(e){return new t(this.#e.withPluginAtFront(e),this.#t)}withoutPlugins(){return new t(this.#e.withoutPlugins(),this.#t)}};o();var Fi=class t{#e;constructor(e){this.#e=i(e)}get expressionType(){}get isRawBuilder(){return!0}as(e){return new Vi(this,e)}$castTo(){return new t({...this.#e})}$notNull(){return new t(this.#e)}withPlugin(e){return new t({...this.#e,plugins:this.#e.plugins!==void 0?i([...this.#e.plugins,e]):i([e])})}toOperationNode(){return this.#r(this.#t())}compile(e){return this.#i(this.#t(e))}async execute(e){let r=this.#t(e);return r.executeQuery(this.#i(r),this.#e.queryId)}#t(e){let r=e!==void 0?e.getExecutor():qe;return this.#e.plugins!==void 0?r.withPlugins(this.#e.plugins):r}#r(e){return e.transformQuery(this.#e.rawNode,this.#e.queryId)}#i(e){return e.compileQuery(this.#r(e),this.#e.queryId)}};function be(t){return new Fi(t)}var Vi=class{#e;#t;constructor(e,r){this.#e=e,this.#t=r}get expression(){return this.#e}get alias(){return this.#t}get rawBuilder(){return this.#e}toOperationNode(){return I.create(this.#e.toOperationNode(),O(this.#t)?this.#t.toOperationNode():p.create(this.#t))}};o();var fe=Object.assign((t,...e)=>be({queryId:m(),rawNode:C.create(t,e?.map(Mo)??[])}),{ref(t){return be({queryId:m(),rawNode:C.createWithChild(H(t))})},val(t){return be({queryId:m(),rawNode:C.createWithChild(x(t))})},value(t){return this.val(t)},table(t){return be({queryId:m(),rawNode:C.createWithChild(f(t))})},id(...t){let e=new Array(t.length+1).fill(".");return e[0]="",e[e.length-1]="",be({queryId:m(),rawNode:C.create(e,t.map(p.create))})},lit(t){return be({queryId:m(),rawNode:C.createWithChild(S.createImmediate(t))})},literal(t){return this.lit(t)},raw(t){return be({queryId:m(),rawNode:C.createWithSql(t)})},join(t,e=fe`, `){let r=new Array(Math.max(2*t.length-1,0)),n=e.toOperationNode();for(let a=0;a<t.length;++a)r[2*a]=Mo(t[a]),a!==t.length-1&&(r[2*a+1]=n);return be({queryId:m(),rawNode:C.createWithChildren(r)})}});function Mo(t){return O(t)?t.toOperationNode():x(t)}o();o();var zr=class{nodeStack=[];get parentNode(){return this.nodeStack[this.nodeStack.length-2]}#e=i({AliasNode:this.visitAlias.bind(this),ColumnNode:this.visitColumn.bind(this),IdentifierNode:this.visitIdentifier.bind(this),SchemableIdentifierNode:this.visitSchemableIdentifier.bind(this),RawNode:this.visitRaw.bind(this),ReferenceNode:this.visitReference.bind(this),SelectQueryNode:this.visitSelectQuery.bind(this),SelectionNode:this.visitSelection.bind(this),TableNode:this.visitTable.bind(this),FromNode:this.visitFrom.bind(this),SelectAllNode:this.visitSelectAll.bind(this),AndNode:this.visitAnd.bind(this),OrNode:this.visitOr.bind(this),ValueNode:this.visitValue.bind(this),ValueListNode:this.visitValueList.bind(this),PrimitiveValueListNode:this.visitPrimitiveValueList.bind(this),ParensNode:this.visitParens.bind(this),JoinNode:this.visitJoin.bind(this),OperatorNode:this.visitOperator.bind(this),WhereNode:this.visitWhere.bind(this),InsertQueryNode:this.visitInsertQuery.bind(this),DeleteQueryNode:this.visitDeleteQuery.bind(this),ReturningNode:this.visitReturning.bind(this),CreateTableNode:this.visitCreateTable.bind(this),AddColumnNode:this.visitAddColumn.bind(this),ColumnDefinitionNode:this.visitColumnDefinition.bind(this),DropTableNode:this.visitDropTable.bind(this),DataTypeNode:this.visitDataType.bind(this),OrderByNode:this.visitOrderBy.bind(this),OrderByItemNode:this.visitOrderByItem.bind(this),GroupByNode:this.visitGroupBy.bind(this),GroupByItemNode:this.visitGroupByItem.bind(this),UpdateQueryNode:this.visitUpdateQuery.bind(this),ColumnUpdateNode:this.visitColumnUpdate.bind(this),LimitNode:this.visitLimit.bind(this),OffsetNode:this.visitOffset.bind(this),OnConflictNode:this.visitOnConflict.bind(this),OnDuplicateKeyNode:this.visitOnDuplicateKey.bind(this),CreateIndexNode:this.visitCreateIndex.bind(this),DropIndexNode:this.visitDropIndex.bind(this),ListNode:this.visitList.bind(this),PrimaryKeyConstraintNode:this.visitPrimaryKeyConstraint.bind(this),UniqueConstraintNode:this.visitUniqueConstraint.bind(this),ReferencesNode:this.visitReferences.bind(this),CheckConstraintNode:this.visitCheckConstraint.bind(this),WithNode:this.visitWith.bind(this),CommonTableExpressionNode:this.visitCommonTableExpression.bind(this),CommonTableExpressionNameNode:this.visitCommonTableExpressionName.bind(this),HavingNode:this.visitHaving.bind(this),CreateSchemaNode:this.visitCreateSchema.bind(this),DropSchemaNode:this.visitDropSchema.bind(this),AlterTableNode:this.visitAlterTable.bind(this),DropColumnNode:this.visitDropColumn.bind(this),RenameColumnNode:this.visitRenameColumn.bind(this),AlterColumnNode:this.visitAlterColumn.bind(this),ModifyColumnNode:this.visitModifyColumn.bind(this),AddConstraintNode:this.visitAddConstraint.bind(this),DropConstraintNode:this.visitDropConstraint.bind(this),RenameConstraintNode:this.visitRenameConstraint.bind(this),ForeignKeyConstraintNode:this.visitForeignKeyConstraint.bind(this),CreateViewNode:this.visitCreateView.bind(this),RefreshMaterializedViewNode:this.visitRefreshMaterializedView.bind(this),DropViewNode:this.visitDropView.bind(this),GeneratedNode:this.visitGenerated.bind(this),DefaultValueNode:this.visitDefaultValue.bind(this),OnNode:this.visitOn.bind(this),ValuesNode:this.visitValues.bind(this),SelectModifierNode:this.visitSelectModifier.bind(this),CreateTypeNode:this.visitCreateType.bind(this),DropTypeNode:this.visitDropType.bind(this),ExplainNode:this.visitExplain.bind(this),DefaultInsertValueNode:this.visitDefaultInsertValue.bind(this),AggregateFunctionNode:this.visitAggregateFunction.bind(this),OverNode:this.visitOver.bind(this),PartitionByNode:this.visitPartitionBy.bind(this),PartitionByItemNode:this.visitPartitionByItem.bind(this),SetOperationNode:this.visitSetOperation.bind(this),BinaryOperationNode:this.visitBinaryOperation.bind(this),UnaryOperationNode:this.visitUnaryOperation.bind(this),UsingNode:this.visitUsing.bind(this),FunctionNode:this.visitFunction.bind(this),CaseNode:this.visitCase.bind(this),WhenNode:this.visitWhen.bind(this),JSONReferenceNode:this.visitJSONReference.bind(this),JSONPathNode:this.visitJSONPath.bind(this),JSONPathLegNode:this.visitJSONPathLeg.bind(this),JSONOperatorChainNode:this.visitJSONOperatorChain.bind(this),TupleNode:this.visitTuple.bind(this),MergeQueryNode:this.visitMergeQuery.bind(this),MatchedNode:this.visitMatched.bind(this),AddIndexNode:this.visitAddIndex.bind(this),CastNode:this.visitCast.bind(this),FetchNode:this.visitFetch.bind(this),TopNode:this.visitTop.bind(this),OutputNode:this.visitOutput.bind(this),OrActionNode:this.visitOrAction.bind(this),CollateNode:this.visitCollate.bind(this)});visitNode=e=>{this.nodeStack.push(e),this.#e[e.kind](e),this.nodeStack.pop()}};var bn=/'/g,Ur=class extends zr{#e="";#t=[];get numParameters(){return this.#t.length}compileQuery(e,r){return this.#e="",this.#t=[],this.nodeStack.splice(0,this.nodeStack.length),this.visitNode(e),i({query:e,queryId:r,sql:this.getSql(),parameters:[...this.#t]})}getSql(){return this.#e}visitSelectQuery(e){let r=this.parentNode!==void 0&&!pe.is(this.parentNode)&&!W.is(this.parentNode)&&!M.is(this.parentNode)&&!ae.is(this.parentNode)&&!pr.is(this.parentNode);this.parentNode===void 0&&e.explain&&(this.visitNode(e.explain),this.append(" ")),r&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("select"),e.distinctOn&&(this.append(" "),this.compileDistinctOn(e.distinctOn)),e.frontModifiers?.length&&(this.append(" "),this.compileList(e.frontModifiers," ")),e.top&&(this.append(" "),this.visitNode(e.top)),e.selections&&(this.append(" "),this.compileList(e.selections)),e.from&&(this.append(" "),this.visitNode(e.from)),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.groupBy&&(this.append(" "),this.visitNode(e.groupBy)),e.having&&(this.append(" "),this.visitNode(e.having)),e.setOperations&&(this.append(" "),this.compileList(e.setOperations," ")),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.offset&&(this.append(" "),this.visitNode(e.offset)),e.fetch&&(this.append(" "),this.visitNode(e.fetch)),e.endModifiers?.length&&(this.append(" "),this.compileList(this.sortSelectModifiers([...e.endModifiers])," ")),r&&this.append(")")}visitFrom(e){this.append("from "),this.compileList(e.froms)}visitSelection(e){this.visitNode(e.selection)}visitColumn(e){this.visitNode(e.column)}compileDistinctOn(e){this.append("distinct on ("),this.compileList(e),this.append(")")}compileList(e,r=", "){let n=e.length-1;for(let a=0;a<=n;a++)this.visitNode(e[a]),a<n&&this.append(r)}visitWhere(e){this.append("where "),this.visitNode(e.where)}visitHaving(e){this.append("having "),this.visitNode(e.having)}visitInsertQuery(e){let r=this.nodeStack.find(u.is),n=r!==e;!n&&e.explain&&(this.visitNode(e.explain),this.append(" ")),n&&!q.is(r)&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append(e.replace?"replace":"insert"),e.ignore&&(Te("`InsertQueryNode.ignore` is deprecated. Use `InsertQueryNode.orAction` instead."),this.append(" ignore")),e.orAction&&(this.append(" "),this.visitNode(e.orAction)),e.top&&(this.append(" "),this.visitNode(e.top)),e.into&&(this.append(" into "),this.visitNode(e.into)),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.output&&(this.append(" "),this.visitNode(e.output)),e.values&&(this.append(" "),this.visitNode(e.values)),e.defaultValues&&(this.append(" "),this.append("default values")),e.onConflict&&(this.append(" "),this.visitNode(e.onConflict)),e.onDuplicateKey&&(this.append(" "),this.visitNode(e.onDuplicateKey)),e.returning&&(this.append(" "),this.visitNode(e.returning)),n&&!q.is(r)&&this.append(")"),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitValues(e){this.append("values "),this.compileList(e.values)}visitDeleteQuery(e){let r=this.nodeStack.find(u.is)!==e;!r&&e.explain&&(this.visitNode(e.explain),this.append(" ")),r&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("delete "),e.top&&(this.visitNode(e.top),this.append(" ")),this.visitNode(e.from),e.output&&(this.append(" "),this.visitNode(e.output)),e.using&&(this.append(" "),this.visitNode(e.using)),e.joins&&(this.append(" "),this.compileList(e.joins," ")),e.where&&(this.append(" "),this.visitNode(e.where)),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.returning&&(this.append(" "),this.visitNode(e.returning)),r&&this.append(")"),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitReturning(e){this.append("returning "),this.compileList(e.selections)}visitAlias(e){this.visitNode(e.node),this.append(" as "),this.visitNode(e.alias)}visitReference(e){e.table&&(this.visitNode(e.table),this.append(".")),this.visitNode(e.column)}visitSelectAll(e){this.append("*")}visitIdentifier(e){this.append(this.getLeftIdentifierWrapper()),this.compileUnwrappedIdentifier(e),this.append(this.getRightIdentifierWrapper())}compileUnwrappedIdentifier(e){if(!v(e.name))throw new Error("a non-string identifier was passed to compileUnwrappedIdentifier.");this.append(this.sanitizeIdentifier(e.name))}visitAnd(e){this.visitNode(e.left),this.append(" and "),this.visitNode(e.right)}visitOr(e){this.visitNode(e.left),this.append(" or "),this.visitNode(e.right)}visitValue(e){e.immediate?this.appendImmediateValue(e.value):this.appendValue(e.value)}visitValueList(e){this.append("("),this.compileList(e.values),this.append(")")}visitTuple(e){this.append("("),this.compileList(e.values),this.append(")")}visitPrimitiveValueList(e){this.append("(");let{values:r}=e;for(let n=0;n<r.length;++n)this.appendValue(r[n]),n!==r.length-1&&this.append(", ");this.append(")")}visitParens(e){this.append("("),this.visitNode(e.node),this.append(")")}visitJoin(e){this.append(Sn[e.joinType]),this.append(" "),this.visitNode(e.table),e.on&&(this.append(" "),this.visitNode(e.on))}visitOn(e){this.append("on "),this.visitNode(e.on)}visitRaw(e){let{sqlFragments:r,parameters:n}=e;for(let a=0;a<r.length;++a)this.append(r[a]),n.length>a&&this.visitNode(n[a])}visitOperator(e){this.append(e.operator)}visitTable(e){this.visitNode(e.table)}visitSchemableIdentifier(e){e.schema&&(this.visitNode(e.schema),this.append(".")),this.visitNode(e.identifier)}visitCreateTable(e){this.append("create "),e.frontModifiers&&e.frontModifiers.length>0&&(this.compileList(e.frontModifiers," "),this.append(" ")),e.temporary&&this.append("temporary "),this.append("table "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.table),e.selectQuery?(this.append(" as "),this.visitNode(e.selectQuery)):(this.append(" ("),this.compileList([...e.columns,...e.constraints??[]]),this.append(")"),e.onCommit&&(this.append(" on commit "),this.append(e.onCommit)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," ")))}visitColumnDefinition(e){e.ifNotExists&&this.append("if not exists "),this.visitNode(e.column),this.append(" "),this.visitNode(e.dataType),e.unsigned&&this.append(" unsigned"),e.frontModifiers&&e.frontModifiers.length>0&&(this.append(" "),this.compileList(e.frontModifiers," ")),e.generated&&(this.append(" "),this.visitNode(e.generated)),e.identity&&this.append(" identity"),e.defaultTo&&(this.append(" "),this.visitNode(e.defaultTo)),e.notNull&&this.append(" not null"),e.unique&&this.append(" unique"),e.nullsNotDistinct&&this.append(" nulls not distinct"),e.primaryKey&&this.append(" primary key"),e.autoIncrement&&(this.append(" "),this.append(this.getAutoIncrement())),e.references&&(this.append(" "),this.visitNode(e.references)),e.check&&(this.append(" "),this.visitNode(e.check)),e.endModifiers&&e.endModifiers.length>0&&(this.append(" "),this.compileList(e.endModifiers," "))}getAutoIncrement(){return"auto_increment"}visitReferences(e){this.append("references "),this.visitNode(e.table),this.append(" ("),this.compileList(e.columns),this.append(")"),e.onDelete&&(this.append(" on delete "),this.append(e.onDelete)),e.onUpdate&&(this.append(" on update "),this.append(e.onUpdate))}visitDropTable(e){this.append("drop table "),e.ifExists&&this.append("if exists "),this.visitNode(e.table),e.cascade&&this.append(" cascade")}visitDataType(e){this.append(e.dataType)}visitOrderBy(e){this.append("order by "),this.compileList(e.items)}visitOrderByItem(e){this.visitNode(e.orderBy),e.collation&&(this.append(" "),this.visitNode(e.collation)),e.direction&&(this.append(" "),this.visitNode(e.direction)),e.nulls&&(this.append(" nulls "),this.append(e.nulls))}visitGroupBy(e){this.append("group by "),this.compileList(e.items)}visitGroupByItem(e){this.visitNode(e.groupBy)}visitUpdateQuery(e){let r=this.nodeStack.find(u.is),n=r!==e;if(!n&&e.explain&&(this.visitNode(e.explain),this.append(" ")),n&&!q.is(r)&&this.append("("),e.with&&(this.visitNode(e.with),this.append(" ")),this.append("update "),e.top&&(this.visitNode(e.top),this.append(" ")),e.table&&(this.visitNode(e.table),this.append(" ")),this.append("set "),e.updates&&this.compileList(e.updates),e.output&&(this.append(" "),this.visitNode(e.output)),e.from&&(this.append(" "),this.visitNode(e.from)),e.joins){if(!e.from)throw new Error("Joins in an update query are only supported as a part of a PostgreSQL 'update set from join' query. If you want to create a MySQL 'update join set' query, see https://kysely.dev/docs/examples/update/my-sql-joins");this.append(" "),this.compileList(e.joins," ")}e.where&&(this.append(" "),this.visitNode(e.where)),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),e.limit&&(this.append(" "),this.visitNode(e.limit)),e.returning&&(this.append(" "),this.visitNode(e.returning)),n&&!q.is(r)&&this.append(")"),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitColumnUpdate(e){this.visitNode(e.column),this.append(" = "),this.visitNode(e.value)}visitLimit(e){this.append("limit "),this.visitNode(e.limit)}visitOffset(e){this.append("offset "),this.visitNode(e.offset)}visitOnConflict(e){this.append("on conflict"),e.columns?(this.append(" ("),this.compileList(e.columns),this.append(")")):e.constraint?(this.append(" on constraint "),this.visitNode(e.constraint)):e.indexExpression&&(this.append(" ("),this.visitNode(e.indexExpression),this.append(")")),e.indexWhere&&(this.append(" "),this.visitNode(e.indexWhere)),e.doNothing===!0?this.append(" do nothing"):e.updates&&(this.append(" do update set "),this.compileList(e.updates),e.updateWhere&&(this.append(" "),this.visitNode(e.updateWhere)))}visitOnDuplicateKey(e){this.append("on duplicate key update "),this.compileList(e.updates)}visitCreateIndex(e){this.append("create "),e.unique&&this.append("unique "),this.append("index "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.name),e.table&&(this.append(" on "),this.visitNode(e.table)),e.using&&(this.append(" using "),this.visitNode(e.using)),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.nullsNotDistinct&&this.append(" nulls not distinct"),e.where&&(this.append(" "),this.visitNode(e.where))}visitDropIndex(e){this.append("drop index "),e.ifExists&&this.append("if exists "),this.visitNode(e.name),e.table&&(this.append(" on "),this.visitNode(e.table)),e.cascade&&this.append(" cascade")}visitCreateSchema(e){this.append("create schema "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.schema)}visitDropSchema(e){this.append("drop schema "),e.ifExists&&this.append("if exists "),this.visitNode(e.schema),e.cascade&&this.append(" cascade")}visitPrimaryKeyConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("primary key ("),this.compileList(e.columns),this.append(")"),this.buildDeferrable(e)}buildDeferrable(e){e.deferrable!==void 0&&(e.deferrable?this.append(" deferrable"):this.append(" not deferrable")),e.initiallyDeferred!==void 0&&(e.initiallyDeferred?this.append(" initially deferred"):this.append(" initially immediate"))}visitUniqueConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("unique"),e.nullsNotDistinct&&this.append(" nulls not distinct"),this.append(" ("),this.compileList(e.columns),this.append(")"),this.buildDeferrable(e)}visitCheckConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("check ("),this.visitNode(e.expression),this.append(")")}visitForeignKeyConstraint(e){e.name&&(this.append("constraint "),this.visitNode(e.name),this.append(" ")),this.append("foreign key ("),this.compileList(e.columns),this.append(") "),this.visitNode(e.references),e.onDelete&&(this.append(" on delete "),this.append(e.onDelete)),e.onUpdate&&(this.append(" on update "),this.append(e.onUpdate)),this.buildDeferrable(e)}visitList(e){this.compileList(e.items)}visitWith(e){this.append("with "),e.recursive&&this.append("recursive "),this.compileList(e.expressions)}visitCommonTableExpression(e){this.visitNode(e.name),this.append(" as "),Le(e.materialized)&&(e.materialized||this.append("not "),this.append("materialized ")),this.visitNode(e.expression)}visitCommonTableExpressionName(e){this.visitNode(e.table),e.columns&&(this.append("("),this.compileList(e.columns),this.append(")"))}visitAlterTable(e){this.append("alter table "),this.visitNode(e.table),this.append(" "),e.renameTo&&(this.append("rename to "),this.visitNode(e.renameTo)),e.setSchema&&(this.append("set schema "),this.visitNode(e.setSchema)),e.addConstraint&&this.visitNode(e.addConstraint),e.dropConstraint&&this.visitNode(e.dropConstraint),e.renameConstraint&&this.visitNode(e.renameConstraint),e.columnAlterations&&this.compileColumnAlterations(e.columnAlterations),e.addIndex&&this.visitNode(e.addIndex),e.dropIndex&&this.visitNode(e.dropIndex)}visitAddColumn(e){this.append("add column "),this.visitNode(e.column)}visitRenameColumn(e){this.append("rename column "),this.visitNode(e.column),this.append(" to "),this.visitNode(e.renameTo)}visitDropColumn(e){this.append("drop column "),this.visitNode(e.column)}visitAlterColumn(e){this.append("alter column "),this.visitNode(e.column),this.append(" "),e.dataType&&(this.announcesNewColumnDataType()&&this.append("type "),this.visitNode(e.dataType),e.dataTypeExpression&&(this.append("using "),this.visitNode(e.dataTypeExpression))),e.setDefault&&(this.append("set default "),this.visitNode(e.setDefault)),e.dropDefault&&this.append("drop default"),e.setNotNull&&this.append("set not null"),e.dropNotNull&&this.append("drop not null")}visitModifyColumn(e){this.append("modify column "),this.visitNode(e.column)}visitAddConstraint(e){this.append("add "),this.visitNode(e.constraint)}visitDropConstraint(e){this.append("drop constraint "),e.ifExists&&this.append("if exists "),this.visitNode(e.constraintName),e.modifier==="cascade"?this.append(" cascade"):e.modifier==="restrict"&&this.append(" restrict")}visitRenameConstraint(e){this.append("rename constraint "),this.visitNode(e.oldName),this.append(" to "),this.visitNode(e.newName)}visitSetOperation(e){this.append(e.operator),this.append(" "),e.all&&this.append("all "),this.visitNode(e.expression)}visitCreateView(e){this.append("create "),e.orReplace&&this.append("or replace "),e.materialized&&this.append("materialized "),e.temporary&&this.append("temporary "),this.append("view "),e.ifNotExists&&this.append("if not exists "),this.visitNode(e.name),this.append(" "),e.columns&&(this.append("("),this.compileList(e.columns),this.append(") ")),e.as&&(this.append("as "),this.visitNode(e.as))}visitRefreshMaterializedView(e){this.append("refresh materialized view "),e.concurrently&&this.append("concurrently "),this.visitNode(e.name),e.withNoData?this.append(" with no data"):this.append(" with data")}visitDropView(e){this.append("drop "),e.materialized&&this.append("materialized "),this.append("view "),e.ifExists&&this.append("if exists "),this.visitNode(e.name),e.cascade&&this.append(" cascade")}visitGenerated(e){this.append("generated "),e.always&&this.append("always "),e.byDefault&&this.append("by default "),this.append("as "),e.identity&&this.append("identity"),e.expression&&(this.append("("),this.visitNode(e.expression),this.append(")")),e.stored&&this.append(" stored")}visitDefaultValue(e){this.append("default "),this.visitNode(e.defaultValue)}visitSelectModifier(e){e.rawModifier?this.visitNode(e.rawModifier):this.append(Wn[e.modifier]),e.of&&(this.append(" of "),this.compileList(e.of,", "))}visitCreateType(e){this.append("create type "),this.visitNode(e.name),e.enum&&(this.append(" as enum "),this.visitNode(e.enum))}visitDropType(e){this.append("drop type "),e.ifExists&&this.append("if exists "),this.visitNode(e.name)}visitExplain(e){this.append("explain"),(e.options||e.format)&&(this.append(" "),this.append(this.getLeftExplainOptionsWrapper()),e.options&&(this.visitNode(e.options),e.format&&this.append(this.getExplainOptionsDelimiter())),e.format&&(this.append("format"),this.append(this.getExplainOptionAssignment()),this.append(e.format)),this.append(this.getRightExplainOptionsWrapper()))}visitDefaultInsertValue(e){this.append("default")}visitAggregateFunction(e){this.append(e.func),this.append("("),e.distinct&&this.append("distinct "),this.compileList(e.aggregated),e.orderBy&&(this.append(" "),this.visitNode(e.orderBy)),this.append(")"),e.withinGroup&&(this.append(" within group ("),this.visitNode(e.withinGroup),this.append(")")),e.filter&&(this.append(" filter("),this.visitNode(e.filter),this.append(")")),e.over&&(this.append(" "),this.visitNode(e.over))}visitOver(e){this.append("over("),e.partitionBy&&(this.visitNode(e.partitionBy),e.orderBy&&this.append(" ")),e.orderBy&&this.visitNode(e.orderBy),this.append(")")}visitPartitionBy(e){this.append("partition by "),this.compileList(e.items)}visitPartitionByItem(e){this.visitNode(e.partitionBy)}visitBinaryOperation(e){this.visitNode(e.leftOperand),this.append(" "),this.visitNode(e.operator),this.append(" "),this.visitNode(e.rightOperand)}visitUnaryOperation(e){this.visitNode(e.operator),this.isMinusOperator(e.operator)||this.append(" "),this.visitNode(e.operand)}isMinusOperator(e){return G.is(e)&&e.operator==="-"}visitUsing(e){this.append("using "),this.compileList(e.tables)}visitFunction(e){this.append(e.func),this.append("("),this.compileList(e.arguments),this.append(")")}visitCase(e){this.append("case"),e.value&&(this.append(" "),this.visitNode(e.value)),e.when&&(this.append(" "),this.compileList(e.when," ")),e.else&&(this.append(" else "),this.visitNode(e.else)),this.append(" end"),e.isStatement&&this.append(" case")}visitWhen(e){this.append("when "),this.visitNode(e.condition),e.result&&(this.append(" then "),this.visitNode(e.result))}visitJSONReference(e){this.visitNode(e.reference),this.visitNode(e.traversal)}visitJSONPath(e){e.inOperator&&this.visitNode(e.inOperator),this.append("'$");for(let r of e.pathLegs)this.visitNode(r);this.append("'")}visitJSONPathLeg(e){let r=e.type==="ArrayLocation";this.append(r?"[":"."),this.append(String(e.value)),r&&this.append("]")}visitJSONOperatorChain(e){for(let r=0,n=e.values.length;r<n;r++)r===n-1?this.visitNode(e.operator):this.append("->"),this.visitNode(e.values[r])}visitMergeQuery(e){e.with&&(this.visitNode(e.with),this.append(" ")),this.append("merge "),e.top&&(this.visitNode(e.top),this.append(" ")),this.append("into "),this.visitNode(e.into),e.using&&(this.append(" "),this.visitNode(e.using)),e.whens&&(this.append(" "),this.compileList(e.whens," ")),e.returning&&(this.append(" "),this.visitNode(e.returning)),e.output&&(this.append(" "),this.visitNode(e.output)),e.endModifiers?.length&&(this.append(" "),this.compileList(e.endModifiers," "))}visitMatched(e){e.not&&this.append("not "),this.append("matched"),e.bySource&&this.append(" by source")}visitAddIndex(e){this.append("add "),e.unique&&this.append("unique "),this.append("index "),this.visitNode(e.name),e.columns&&(this.append(" ("),this.compileList(e.columns),this.append(")")),e.using&&(this.append(" using "),this.visitNode(e.using))}visitCast(e){this.append("cast("),this.visitNode(e.expression),this.append(" as "),this.visitNode(e.dataType),this.append(")")}visitFetch(e){this.append("fetch next "),this.visitNode(e.rowCount),this.append(` rows ${e.modifier}`)}visitOutput(e){this.append("output "),this.compileList(e.selections)}visitTop(e){this.append(`top(${e.expression})`),e.modifiers&&this.append(` ${e.modifiers}`)}visitOrAction(e){this.append(e.action)}visitCollate(e){this.append("collate "),this.visitNode(e.collation)}append(e){this.#e+=e}appendValue(e){this.addParameter(e),this.append(this.getCurrentParameterPlaceholder())}getLeftIdentifierWrapper(){return'"'}getRightIdentifierWrapper(){return'"'}getCurrentParameterPlaceholder(){return"$"+this.numParameters}getLeftExplainOptionsWrapper(){return"("}getExplainOptionAssignment(){return" "}getExplainOptionsDelimiter(){return", "}getRightExplainOptionsWrapper(){return")"}sanitizeIdentifier(e){let r=this.getLeftIdentifierWrapper(),n=this.getRightIdentifierWrapper(),a="";for(let d of e)a+=d,d===r?a+=r:d===n&&(a+=n);return a}sanitizeStringLiteral(e){return e.replace(bn,"''")}addParameter(e){this.#t.push(e)}appendImmediateValue(e){if(v(e))this.appendStringLiteral(e);else if(We(e)||Le(e))this.append(e.toString());else if($e(e))this.append("null");else if($i(e))this.appendImmediateValue(e.toISOString());else if(Ke(e))this.appendImmediateValue(e.toString());else throw new Error(`invalid immediate value ${e}`)}appendStringLiteral(e){this.append("'"),this.append(this.sanitizeStringLiteral(e)),this.append("'")}sortSelectModifiers(e){return e.sort((r,n)=>r.modifier&&n.modifier?Fo[r.modifier]-Fo[n.modifier]:1),i(e)}compileColumnAlterations(e){this.compileList(e)}announcesNewColumnDataType(){return!0}},Wn=i({ForKeyShare:"for key share",ForNoKeyUpdate:"for no key update",ForUpdate:"for update",ForShare:"for share",NoWait:"nowait",SkipLocked:"skip locked",Distinct:"distinct"}),Fo=i({ForKeyShare:1,ForNoKeyUpdate:1,ForUpdate:1,ForShare:1,NoWait:2,SkipLocked:2,Distinct:0}),Sn=i({InnerJoin:"inner join",LeftJoin:"left join",RightJoin:"right join",FullJoin:"full join",CrossJoin:"cross join",LateralInnerJoin:"inner join lateral",LateralLeftJoin:"left join lateral",LateralCrossJoin:"cross join lateral",OuterApply:"outer apply",CrossApply:"cross apply",Using:"using"});o();var Jr=class{async init(){}async acquireConnection(){return new zi}async beginTransaction(){}async commitTransaction(){}async rollbackTransaction(){}async releaseConnection(){}async destroy(){}async releaseSavepoint(){}async rollbackToSavepoint(){}async savepoint(){}},zi=class{async executeQuery(){return{rows:[]}}async*streamQuery(){}};o();var $r=class{get supportsCreateIfNotExists(){return!0}get supportsTransactionalDdl(){return!1}get supportsReturning(){return!1}get supportsOutput(){return!1}};o();var kn=/"/g,Vo=class extends Ur{sanitizeIdentifier(e){return e.replace(kn,'""')}};o();var Tn=BigInt("3853314791062309107"),zo=class extends $r{get supportsTransactionalDdl(){return!0}get supportsReturning(){return!0}async acquireMigrationLock(e,r){await fe`select pg_advisory_xact_lock(${fe.lit(Tn)})`.execute(e)}async releaseMigrationLock(e,r){}};function wE(t){return new vt({dialect:{createAdapter:()=>new t.Adapter,createDriver:()=>new Jr,createIntrospector:()=>null,createQueryCompiler:()=>new t.QueryCompiler},plugins:[...t.noParameters?[new Ui]:[]]})}var Ui=class{#e=new Ji;transformQuery(e){return this.#e.transformNode(e.node)}transformResult(e){return Promise.resolve(e.result)}},Ji=class extends Re{transformPrimitiveValueList(e){return de.create(e.values.map(S.createImmediate))}transformValue(e){return{...super.transformValue(e),immediate:!0}}};function OE(t){return typeof t=="string"?{parameters:[],sql:t}:t}function gE(t){let e=t.compile();return{parameters:e.parameters,sql:e.sql}}function vE(t,e){let r=En(t,e);return n=>n.where(a=>a.or(r.map(d=>a.and(d.map(([h,k])=>a(h,k===null?"is":Array.isArray(k)?"in":"=",k))))))}function CE(t,e){let r={};for(let n of Object.values(e)){let{isInPrimaryKey:a,name:d}=n;a&&(r[d]=t[d]??null)}return r}function En(t,e){let r=[],n=[],a=z();for(let k of t){let T=[];for(let E of Object.values(e)){let{isInPrimaryKey:Kr,name:Ct}=E;Kr&&(k===t.at(0)&&r.push(a.ref(Ct)),T.push($o(k[Ct]??null,E)))}n.push(r.length===1?T.at(0):Uo(T))}let d=r.length===1?r.at(0):Uo(r),h=n.length===1?n.at(0):n;return[[[d,h]]]}function Uo(t){return fe`(${fe.join(t,fe`, `)})`}function bE(t,e,r){return()=>Array.isArray(e)?e.map(n=>Jo(n,r)):Jo(e,r)}function Jo(t,e){return Object.keys(t).length===0?{[Object.keys(e).at(0)]:fe`default`}:Object.entries(t).reduce((r,[n,a])=>({...r,[n]:$o(a,e[n])}),{})}function $o(t,e){let{datatype:r}=e,n=z();return t===null?n.lit(null):r.isNative?n.val(t):n.cast(n.val(t),fe.id(r.schema,r.name))}export{fe as a,Vo as b,zo as c,wE as d,OE as e,gE as f,vE as g,CE as h,bE as i,$o as j};
//# sourceMappingURL=data:application/json;base64,