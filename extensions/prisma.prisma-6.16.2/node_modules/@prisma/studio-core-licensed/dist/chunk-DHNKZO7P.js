import * as ___react___ from 'react';
import * as ___react_dom___ from 'react-dom'; 

function require(mod) {
  if (mod === 'react') return ___react___;
  if (mod === 'react-dom') return ___react_dom___;
  throw new Error(`Unknown module ${mod}`);
}
import{e as p,f as d}from"./chunk-GDQBQ7MK.js";p();function g(e,t=w){let{columns:r,rows:n,types:i}=e,s=[],c=A(r);for(let o=0,y=n.length;o<y;o++){let l=n[o],a={...c};for(let u=0,f=l.length;u<f;u++){let R=r[u];a[R]=t(l[u],i[u],R)}s.push(a)}return s}function w(e,t,r){return e}function A(e){let t={};for(let r=0,n=e.length;r<n;r++)t[e[r]]=null;return t}p();var x=["postgres","postgresql"],m="accelerate.prisma-data.net",h=d;function Q(e){let{provider:t}=e;if(t!=="postgresql"&&!x.includes(t))throw new Error(`Invalid provider: ${t}`);let r=P(e);return{execute:b(e,r)}}function P(e){let{host:t,engineHash:r,clientVersion:n,provider:i,apiKey:s}=e,o=`${t===m?"https":"http"}://${t||m}/${n}/${E(i).hash}`,y=e.fetch||fetch,l={Authorization:`Bearer ${s}`,"Prisma-Engine-Hash":r};return a=>y(`${o}/${a.path}`,{body:a.body,headers:l,method:a.method,signal:a.signal})}async function q(e,t,r){let n=await r({body:E(e.provider).encoded,method:"PUT",path:"schema",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to upload schema to query engine: ${n.statusText}`)}}function E(e){return e==="postgresql"?h.postgres:h[e]}async function S(e,t,r){let n=await r({body:JSON.stringify(e),method:"POST",path:"graphql",signal:t?.abortSignal});if(!n.ok){try{console.error(await n.text())}catch{}throw new Error(`Failed to execute query: ${n.statusText}`)}return await n.json()}function b(e,t){let{resultDeserializerFn:r=g}=e,n=null;return async(i,s)=>{try{await(n||=q(e,s,t));let{data:c,errors:o}=await S({action:"queryRaw",query:{arguments:{parameters:i.parameters,query:i.sql},selection:{}}},s,t);return o?[new AggregateError(o,"Errors occurred while executing the query")]:[null,r(c.queryRaw)]}catch(c){return[c]}}}export{g as a,Q as b};
//# sourceMappingURL=data:application/json;base64,